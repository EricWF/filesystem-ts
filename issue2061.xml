<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2061" status="New">
<title><tt>make_move_iterator</tt> and arrays</title>
<section><sref ref="[iterator.synopsis]"/>, <sref ref="[move.iterators]"/></section>
<submitter>Marc Glisse</submitter>
<date>28 May 2011</date>

<discussion>
<p>
The standard library always passes template iterators by value and never by reference, 
which has the nice effect that an array decays to a pointer. There is one exception: 
<tt>make_move_iterator</tt>.
</p>
<blockquote><pre>
#include &lt;iterator&gt;
int main(){
  int a[]={1,2,3,4};
  std::make_move_iterator(a+4);
  std::make_move_iterator(a); // fails here
}
</pre></blockquote>
</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>
<ol>
<li><p>Modify the header <tt>&lt;iterator&gt;</tt> synopsis in <sref ref="[iterator.synopsis]"/>:</p>
<blockquote><pre>
namespace std {
  [&hellip;]
  template &lt;class Iterator&gt;
  move_iterator&lt;Iterator&gt; make_move_iterator(<del>const Iterator&amp;</del><ins>Iterator</ins> i);

  [&hellip;]
}
</pre></blockquote>
</li>

<li><p>Modify the class template <tt>move_iterator</tt> synopsis in <sref ref="[move.iterator]"/>:</p>
<blockquote><pre>
namespace std {
  [&hellip;]
  template &lt;class Iterator&gt;
  move_iterator&lt;Iterator&gt; make_move_iterator(<del>const Iterator&amp;</del><ins>Iterator</ins> i);
}
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[move.iter.nonmember]"/>:</p>
<blockquote><pre>
template &lt;class Iterator&gt;
move_iterator&lt;Iterator&gt; make_move_iterator(<del>const Iterator&amp;</del><ins>Iterator</ins> i);
</pre><blockquote><p>
-3- <i>Returns</i>: <tt>move_iterator&lt;Iterator&gt;(i)</tt>.
</p></blockquote></blockquote>
</li>
</ol>
</resolution>

</issue>
