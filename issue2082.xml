<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2082" status="New">
<title>Misleading complexity requirements in <tt>&lt;algorithm&gt;</tt></title>
<section><sref ref="[algorithms]"/></section>
<submitter>Nicolai Josuttis</submitter>
<date>2 Sep 2011</date>

<discussion>

<p>
The <tt>partition_point()</tt> algorithm is specified with:
</p>
<blockquote><p>
<i>Complexity</i>: <i>O(log(last - first))</i> applications of <tt>pred</tt>.
</p></blockquote>
<p>
While this is correct, it gives the impression that this is a logarithmic algorithm.
But unless random access iterators are used it is not logarithmic because for advancing 
the iterator we have last-first steps, which means that the complexity becomes linear here.
<p/>
Shouldn't we clarify the complexity here to something like:
</p>
<blockquote><p>
<i>Complexity</i>: logarithmic for random-access iterators and linear otherwise
            (in any case <i>O(log(last - first)</i>) applications of <tt>pred</tt>).
</p></blockquote>
<p>
Or should we even require <i>O(log(last - first)</i> for random-access iterators only because 
for other iterators just iterating over all elements, while calling <tt>pred</tt> for each element, 
might often be faster.
</p>

<p>
Daniel Kr&uuml;gler:
</p>
<blockquote><p>
I agree that especially this description is a bit misleading. I'm not
convinced that this is a real defect, because the whole bunch of
templates within <tt>&lt;algorithm&gt;</tt> document the complexity solely of
<em>applications*</em> of predicates, assignment, or swaps, but never the
complexity of traversal operations (e.g. increment or iterator
equality tests). This means, the standard is consistent for this
function template, even though it could say a bit more.
<p/>
I would like to see a wording improvement, but I would rather think that
the complexity of the predicate should be mentioned first (as in other
algorithms) and that a non-normative note could be added for
specifically this algorithm to point out that this does not imply
a logarithmic traversal complexity. The note could give more details,
by explicity pointing out the linear traversal complexity for
non-random-Access iterators.
</p></blockquote>
<p>
Howard Hinnant:
</p>
<blockquote><p>
If we are going to make such improvements, they should be made across the 
board in <tt>&lt;algorithm&gt;</tt>, not to just <tt>partition_point</tt>.  
For example all 4 algorithms in <sref ref="[alg.binary.search]"/> have the 
same issue, and have since C++98.
<p/>
<tt>stable_partition</tt> and <tt>inplace_merge</tt> should be inspected as well.
<p/>
Perhaps a new paragraph in <sref ref="[algorithms.general]"/>, similar to 
p12 would be a better place to address this issue.
</p></blockquote>

</discussion>

<resolution>
</resolution>

</issue>
