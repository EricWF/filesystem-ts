<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="865" status="C++11">
<title>More algorithms that throw away information</title>
<section><sref ref="[alg.fill]"/>, <sref ref="[alg.generate]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>13 Jul 2008</date>

<discussion>
<p>
In regard to library defect <iref ref="488"/> I found some more algorithms which
unnecessarily throw away information. These are typically algorithms,
which sequentially write into an <tt>OutputIterator</tt>, but do not return the
final value of this output iterator. These cases are:
</p>

<ol>
<li>
<pre>template&lt;class OutputIterator, class Size, class T&gt;
void fill_n(OutputIterator first, Size n, const T&amp; value);</pre></li>

<li>
<pre>template&lt;class OutputIterator, class Size, class Generator&gt;
void generate_n(OutputIterator first, Size n, Generator gen);</pre></li>
</ol>
<p>
In both cases the minimum requirements on the iterator are
<tt>OutputIterator</tt>, which means according to the requirements of
<sref ref="[output.iterators]"/> p. 2 that only single-pass iterations are guaranteed.
So, if users of <tt>fill_n</tt> and <tt>generate_n</tt> have <em>only</em> an <tt>OutputIterator</tt>
available, they have no chance to continue pushing further values
into it, which seems to be a severe limitation to me.
</p>

<note>
Post Summit Daniel "conceptualized" the wording.
</note>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Alisdair likes the idea, but has concerns about the specific wording
about the returns clauses.
</p>
<p>
Alan notes this is a feature request.
</p>
<p>
Bill notes we have made similar changes to other algorithms.
</p>
<p>
Move to Open.
</p>
</blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote><p>
We have a consensus for moving forward on this issue, but Daniel needs
to deconceptify it.
</p></blockquote>

<note>
2009-07-25 Daniel provided non-concepts wording.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Moved to Ready.
</p></blockquote>

</discussion>

<resolution>

<ol>
<li>
<p>
Replace the current declaration of <tt>fill_n</tt> in <sref ref="[algorithms]"/>/2, header
<tt>&lt;algorithm&gt;</tt> synopsis and in <sref ref="[alg.fill]"/> by
</p>

<blockquote><pre>
template&lt;class OutputIterator, class Size, class T&gt;
  <del>void</del><ins>OutputIterator</ins> fill_n(OutputIterator first, Size n, const T&amp; value);
</pre></blockquote>

<p>
Just after the effects clause add a new returns clause saying:
</p>

<blockquote><p>
<ins><i>Returns:</i> For <tt>fill_n</tt> and positive <tt>n</tt>, returns <tt>first + n</tt>. Otherwise
returns <tt>first</tt> for <tt>fill_n</tt>.</ins>
</p></blockquote>
</li>

<li>
<p>
Replace the current declaration of <tt>generate_n</tt> in <sref ref="[algorithms]"/>/2,
header <tt>&lt;algorithm&gt;</tt> synopsis and in <sref ref="[alg.generate]"/> by
</p>

<blockquote><pre>
template&lt;class OutputIterator, class Size, class Generator&gt;
  <del>void</del><ins>OutputIterator</ins> generate_n(OutputIterator first, Size n, Generator gen);
</pre></blockquote>

<p>
Just after the effects clause add a new returns clause saying:
</p>

<blockquote><p>
<ins>For <tt>generate_n</tt> and positive <tt>n</tt>, returns <tt>first + n</tt>. Otherwise
returns <tt>first</tt> for <tt>generate_n</tt>.</ins>
</p></blockquote>
</li>
</ol>

<!-- 
<ol>
<li>
<p>
Replace the current declaration of <tt>fill_n</tt> in <sref ref="[algorithms]"/>/2, header
<tt>&lt;algorithm&gt;</tt> synopsis and in <sref ref="[alg.fill]"/> by
</p>

<blockquote><pre>
template&lt;class Iter, IntegralLike Size, class T&gt;
  requires OutputIterator&lt;Iter, const T&amp;&gt;
  <del>void</del><ins>Iter</ins> fill_n(Iter first, Size n, const T&amp; value);
</pre></blockquote>

<p>
Just after the effects clause p.1 add a new returns clause saying:
</p>
<blockquote>
<i>Returns:</i> For <tt>fill_n</tt> and <tt>n &gt; Size(0)</tt>, returns <tt>first + n</tt>. Otherwise
returns <tt>first</tt> for <tt>fill_n</tt>.
</blockquote>
</li>
<li>
<p>
Replace the current declaration of <tt>generate_n</tt> in <sref ref="[algorithms]"/>/2, header
<tt>&lt;algorithm&gt;</tt> synopsis and in <sref ref="[alg.generate]"/> by
</p>
<blockquote><pre>
template&lt;class Iter, IntegralLike Size, Callable Generator&gt;
  requires OutputIterator&lt;Iter, Generator::result_type&gt;
        &amp;&amp; CopyConstructible&lt;Generator&gt;
  <del>void</del><ins>Iter</ins> generate_n(Iter first, Size n, Generator gen);
</pre></blockquote>
<p>
Just after the effects clause p.1 add a new returns clause saying:
</p>
<blockquote>
<i>Returns:</i> For <tt>generate_n</tt> and <tt>n &gt; Size(0)</tt>, returns <tt>first + n</tt>.
Otherwise returns <tt>first</tt> for <tt>generate_n</tt>.
</blockquote>
</li>
</ol>
 -->
</resolution>

</issue>
