<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1318" status="Open">
<title>N2982 removes previous allocator capabilities</title>
<section><sref ref="[allocator.traits.types]"/></section>
<submitter>Pete Becker</submitter>
<date>11 Feb 2010</date>

<discussion>
<p><b>Addresses US-87</b></p>
<p>
<a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2982.pdf">N2982</a>
says that containers should have a nested typedef that defines their
<tt>reference_type</tt> as <tt>value_type&amp;</tt>; the previous
standard deferred to the allocator to define its
<tt>reference_type</tt>, and containers simply passed the allocator's
typedef on. This change is a mistake. Allocators should define both a
<tt>pointer</tt> type and a <tt>reference</tt> type. That's essential
for their original purpose, which was to make different memory models
transparent. If an allocator defines a <tt>pointer</tt> type that isn't
compatible with a normal pointer it also has to define a corresponding
<tt>reference</tt> type. For example (and please forgive a Windows-ism),
if an allocator's pointer is <tt>T __far*</tt>, then it's
<tt>reference</tt> has to be <tt>T __far&amp;</tt>. Otherwise everything
crashes (under the hood, references are pointers and have to have the
same memory access mechanics). Extensions such as this for more general
memory models were explicitly encouraged by C++03, and the allocator's
<tt>pointer</tt> and <tt>reference</tt> typedefs were the hooks for such
extensions. Removing the allocator's <tt>reference</tt> and
<tt>const_reference</tt> typedefs makes those extensions unimplementable
and breaks existing implementations that rely on those hooks.
</p>

<note>
2010-02-25 Alisdair adds:
</note>

<blockquote>
<p>
<tt>vector&lt;bool&gt;::reference</tt> is a nested class, and not a typedef.  It
should be removed from the list of containers when this change is made.
</p>

<p>
In general, I am uncomfortable placing this reference requirement on each
container, as I would prefer to require:
</p>

<blockquote><pre>
is_same&lt;Container::reference, Container::iterator::reference&gt;
</pre></blockquote>

<p>
This distinction is important, if we intend to support proxy iterators.  The
iterator paper in the pre-Pittsburgh mailing
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3046.html">N3046</a>)
does <em>not</em> make this proposal, but organises clause 24 in such a way this
will be much easier to specify.
</p>

<p>
The changes to clause 20 remain important for all the reasons Pete highlights.
</p>
</blockquote>

<note>
2010 Batavia
</note>

<p>
Removed <tt>vector</tt> from list of templates that should be adjusted as of meeting outcome.
</p>

<note>
2010 post-Batavia
</note>

<p>
Replaced <tt>vector&lt;bool&gt;</tt> reference by <tt>vector</tt> reference because of misinterpreting meeting typo.
Additional corrected numbering in P/R to N3225 wording.
</p>

<note>
2010-12-06 Daniel reopens
</note>

<p>
Unfortunately, the current P/R is defective for several reasons:
</p>
<ol>
<li> Table 43 &mdash; Descriptive variable definitions still contains three
references to <tt>T&amp;</tt>, namely in:
<blockquote>
<table border="1">
<tr>
<td>
<tt>t</tt>
</td>
<td>a value of type <tt>const T&amp;</tt></td>
</tr>
<tr>
<td>
<tt>r</tt>
</td>
<td>a value of type <tt>T&amp;</tt> obtained by the expression <tt>*p</tt></td>
</tr>
<tr>
<td>
<tt>s</tt>
</td>
<td>a value of type <tt>const T&amp;</tt> obtained by the expression <tt>*q</tt>
or by conversion from a value <tt>r</tt></td>
</tr>
</table>
</blockquote>
Especially the second and third items are misses in the 1318 P/R,
e.g. in N2723 or in C++03 these were referring
to <tt>X::reference</tt> and <tt>X::const_reference</tt>, resp.
None of them is referenced anywhere in the allocator requirements
table: <tt>r</tt> and <tt>s</tt> where historically needed to
define the expressions <tt>a.address(r)</tt> and <tt>a.address(s)</tt> which are gone now,
and <tt>t</tt> was needed to define the expression <tt>a.construct(p, t)</tt> which has been
replaced by <tt>a.construct(p,args)</tt>.
<p/>
The easiest fix seems to be to remove all three rows from Table 43.
</li>
<li>
Further-on, the current P/R suggests to replace the the current
definitions of the adaptor classes
<blockquote><pre>
stack
priority_queue
queue
</pre></blockquote>
similar to the other container types, i.e. to define <tt>reference</tt> and
<tt>const_reference</tt> now as
<blockquote><pre>
typedef typename allocator_traits&lt;Allocator&gt;::reference reference;
typedef typename allocator_traits&lt;Allocator&gt;::const_reference const_reference;
</pre></blockquote>
This would not only be an ill-formed definition (because there is no name
<tt>Allocator</tt> in scope), but it would also introduce a breakage compared to C++03,
where these definitions where already referring to the definition of the wrapped 
containers. So, the adaptor class templates should be removed from the current list.
</li>
<li>
Then the current P/R wording leads to one further unexpected and unwanted change due to 
the general formular used: <tt>match_result::reference</tt> is currently defined as
<blockquote><pre>
typedef const_reference reference;
</pre></blockquote>
because it is an <em>immutable</em> container (And we had this definition
already in N2723). The application of the rule would change this silently.
</li>
<li>
Finally the suggested wording for the <tt>unordered_</tt> containers is incomplete.
The reason is a current inconsistency between these containers and the rest: While
normally the definition of the pointer types is
<blockquote><pre>
typedef typename allocator_traits&lt;Allocator&gt;::pointer pointer;
typedef typename allocator_traits&lt;Allocator&gt;::const_pointer const_pointer;
</pre></blockquote>
for the unordered containers they are
<blockquote><pre>
typedef typename allocator_type::pointer pointer;
typedef typename allocator_type::const_pointer const_pointer;
</pre></blockquote>
These definitions are <em>not</em> equivalent, because allocators are no longer
required to define typedefs <tt>pointer</tt> and <tt>const_pointer</tt>, the
<tt>allocator_traits</tt> were invented as a further indirection to cope
with that. I.e. for the unordered containers we need to bring both the definition
of references <em>and</em> pointers in sync.
</li>
</ol>
</discussion>

<resolution>
<ol>
<li>
<p>
Remove the following three rows from Table 43:
</p>

<blockquote>
<table border="1">
<caption>Table 43 &mdash; Descriptive variable definitions</caption>
<tr>
<th>
Variable
</th>

<th>
Definition
</th>
</tr>

<tr>
<td><del><tt>t</tt></del></td>

<td><del>a value of type <tt>const T&amp;</tt></del></td>

</tr>

<tr>
<td>&nbsp;<tt>...</tt></td>

<td>&nbsp;<tt>...</tt></td>

</tr>

<tr>
<td><del><tt>r</tt></del></td>

<td><del>a value of type <tt>T&amp;</tt> obtained by the expression <tt>*p</tt>.</del></td>

</tr>

<tr>
<td><del><tt>s</tt></del></td>

<td><del>a value of type <tt>const T&amp;</tt> obtained by the expression <tt>*q</tt> or
by conversion from a value <tt>r</tt>.</del></td>

</tr>

</table>
</blockquote>

</li>
<li>
<p>
Add the following two rows to Table 44, Allocator requirements:
</p>

<blockquote>
<table border="1">
<caption>Table 44 &mdash; Allocator requirements</caption>
<tr>
<th>
Expression
</th>

<th>
Return type
</th>

<th>
Assertion/note<br/>pre-/post-condition
</th>

<th>
Default
</th>

</tr>

<tr>
<td><ins><tt>X::reference</tt></ins></td>

<td><tt></tt></td>

<td><tt></tt></td>

<td><ins><tt>T&amp;</tt></ins></td>
</tr>

<tr>
<td><ins><tt>X::const_reference</tt></ins></td>

<td><tt></tt></td>

<td><tt></tt></td>

<td><ins><tt>const T&amp;</tt></ins></td>
</tr>

</table>
</blockquote>

</li>

<li>
<p>
Change the following two rows in Table 44:
</p>

<blockquote>
<table border="1">
<caption>Table 44 &mdash; Allocator requirements</caption>
<tr>
<th>
Expression
</th>

<th>
Return type
</th>

<th>
Assertion/note<br/>pre-/post-condition
</th>

<th>
Default
</th>

</tr>

<tr>
<td><tt>*p</tt></td>

<td><tt><del>T&amp;</del> <ins>X::reference</ins></tt></td>

<td><tt></tt></td>

<td></td>
</tr>

<tr>
<td><tt>*q</tt></td>

<td><tt><del>const T&amp;</del> <ins>X::const_reference</ins></tt></td>

<td><tt>*q</tt> refers to the same object as <tt>*p</tt></td>

<td></td>
</tr>

</table>
</blockquote>

</li>

<li>
<p>
Add the following typedef declarations to allocator_traits <sref
ref="[allocator.traits]"/>:
</p>

<blockquote><pre>
template &lt;class Alloc&gt; struct allocator_traits {
  ...
  <ins>typedef <i>see below</i> reference;</ins>
  <ins>typedef <i>see below</i> const_reference;</ins>
  ...
</pre></blockquote>
</li>

<li>
<p>
Add the following descriptions to <sref ref="[allocator.traits.types]"/>:
</p>

<blockquote>
<pre>typedef <i>see below</i> reference;</pre>
<blockquote><p>
<i>Type:</i> <tt>Alloc::reference</tt> if such a type exists; otherwise,
<tt>value_type&amp;</tt>.
</p></blockquote>

<pre>typedef <i>see below</i> const reference;</pre>
<blockquote><p>
<i>Type:</i> <tt>Alloc::const_reference</tt> if such a type exists; otherwise,
<tt>const value_type&amp;</tt>.
</p></blockquote>
</blockquote>
</li>

<li>
<p>
Add the following typdef declarations to scoped_allocator_adaptor <sref
ref="[allocator.adaptor]"/>:
</p>

<blockquote><pre>
template &lt;class OuterAlloc, class... InnerAllocs&gt;
class scoped_allocator_adaptor : public OuterAlloc {
  ...
  <ins>typedef typename OuterTraits::reference reference;</ins>
  <ins>typedef typename OuterTraits::const_reference const_reference;</ins>
  ...
</pre></blockquote>
</li>

<li>
<p>
Change the nested typedefs <tt>reference</tt> and <tt>const_reference</tt> to:
</p>

<blockquote><pre>
typedef typename allocator_traits&lt;Allocator&gt;::reference reference;
typedef typename allocator_traits&lt;Allocator&gt;::const_reference const_reference;
</pre></blockquote>

<p>
for each of the following class templates:
</p>

<blockquote><p>
<tt>basic_string</tt> <sref ref="[basic.string]"/><br/>
<tt>deque</tt> <sref ref="[deque]"/><br/>
<tt>forward_list</tt> <sref ref="[forwardlist]"/><br/>
<tt>list</tt> <sref ref="[list]"/><br/>
<tt>vector</tt> <sref ref="[vector]"/><br/>
<tt>map</tt> <sref ref="[map]"/><br/>
<tt>multimap</tt> <sref ref="[multimap]"/><br/>
<tt>set</tt> <sref ref="[set]"/><br/>
<tt>multiset</tt> <sref ref="[multiset]"/><br/>
</p></blockquote>
</li>

<li>
<p>
Change the nested typedefs <tt>reference</tt> and <tt>const_reference</tt> to:
</p>

<blockquote><pre>
typedef typename allocator_traits&lt;Allocator&gt;::reference reference;
typedef typename allocator_traits&lt;Allocator&gt;::const_reference const_reference;
</pre></blockquote>

<p>
and change the nested typedefs <tt>pointer</tt> and <tt>const_pointer</tt> to:
</p>

<blockquote><pre>
typedef typename allocator_traits&lt;Allocator&gt;::pointer pointer;
typedef typename allocator_traits&lt;Allocator&gt;::const_pointer const_pointer;
</pre></blockquote>

<p>
for each of the following class templates:
</p>

<blockquote><p>
<tt>unordered_map</tt> <sref ref="[unord.map]"/><br/>
<tt>unordered_multimap</tt> <sref ref="[unord.multimap]"/><br/>
<tt>unordered_set</tt> <sref ref="[unord.set]"/><br/>
<tt>unordered_multiset</tt> <sref ref="[unord.multiset]"/><br/>
</p></blockquote>
</li>

<li>
<p>
Edit the class template synopsis of <tt>match_results</tt> in <sref ref="[re.results]"/>
as indicated:
</p>

<blockquote><pre>
template &lt;class BidirectionalIterator,
class Allocator = allocator&lt;sub_match&lt;BidirectionalIterator&gt; &gt;
class match_results {
public:
  typedef sub_match&lt;BidirectionalIterator&gt; value_type;
  typedef <del>const value_type&amp;</del><ins>typename allocator_traits&lt;Allocator&gt;::const_reference</ins> const_reference;
  typedef const_reference reference;
  ...
};
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
