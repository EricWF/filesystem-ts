<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2094" status="Review">
<title><tt>duration</tt> conversion overflow shouldn't participate in overload resolution</title>
<section><sref ref="[time.duration.cons]"/></section>
<submitter>Vicente J. Botet Escriba</submitter>
<date>31 Oct 2011</date>

<discussion>

<p>
<sref ref="[time.duration.cons]"/> says:
</p>
<blockquote><pre>
template &lt;class Rep2, class Period2&gt;
  constexpr duration(const duration&lt;Rep2, Period2&gt;&amp; d);
</pre><blockquote>
<p>
<i>Remarks</i>: This constructor shall not participate in overload resolution unless 
<tt>treat_as_floating_point&lt;rep&gt;::value</tt> is <tt>true</tt> or both 
<tt>ratio_divide&lt;Period2, period&gt;::den</tt> is <tt>1</tt> and <tt>treat_as_floating_point&lt;Rep2&gt;::value</tt> 
is <tt>false</tt>.
</p></blockquote></blockquote>
<p>
The evaluation of <tt>ratio_divide&lt;Period2, period&gt;::den</tt> could make 
<tt>ratio_divide&lt;Period2, period&gt;::num</tt> overflow.
<p/>
This occur for example when we try to create a millisecond (<tt>period</tt>=<tt>ratio&lt;1,1000&gt;</tt>) 
from an exa-second (<tt>Period2</tt>=<tt>ratio&lt;10<sup>18</sup>&gt;</tt>).
<p/>
<tt>ratio_divide&lt;ratio&lt;10<sup>18</sup>&gt;, ratio&lt;1,1000&gt;&gt;::num</tt> is 
<tt>10<sup>21</sup></tt> which overflows which makes the compiler error.
<p/>
If the function <tt>f</tt> is overloaded with milliseconds and seconds
</p>
<blockquote><pre>
void f(milliseconds);
void f(seconds);
</pre></blockquote>
<p>
The following fails to compile.
</p>
<blockquote><pre>
duration&lt;int,exa&gt; r(1);
f(r);
</pre></blockquote>
<p>
While the conversion to seconds work, the conversion to milliseconds make the program fail at compile time. 
In my opinion, this program should be well formed and the constructor from <tt>duration&lt;int,exa&gt;</tt> 
to milliseconds shouldn't participate in overload resolution as the result can not be represented.
<p/>
I think the wording of the standard can be improved so no misinterpretations are possible by adding that 
"no overflow is induced by the conversion".
</p>

<note>2012, Kona</note>
<p>
Move to Review.
</p>
<p>Pete: The wording is not right.</p>
<p>Howard: Will implement this to be sure it works.</p>
<p>Jeffrey: If ratio needs a new hook, should it be exposed to users for their own uses?</p>
<p>Pete: No.</p>

<p>
Move to Review,
Howard to implement in a way that mere mortals can understand.
</p>



</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<p>Change the following paragraphs of <sref ref="[time.duration.cons]"/> p4 indicated:</p>

<blockquote><pre>
template &lt;class Rep2, class Period2&gt;
  constexpr duration(const duration&lt;Rep2, Period2&gt;&amp; d);
</pre><blockquote>
<p>
<i>Remarks</i>: This constructor shall not participate in overload resolution unless <ins>no 
overflow is induced in the conversion and</ins> <tt>treat_as_floating_point&lt;rep&gt;::value</tt> 
is <tt>true</tt> or both <tt>ratio_divide&lt;Period2, period&gt;::den</tt> is <tt>1</tt> and 
<tt>treat_as_floating_point&lt;Rep2&gt;::value</tt> is <tt>false</tt>. [ <i>Note</i>: This 
requirement prevents implicit truncation error when converting between integral-based duration 
types. Such a construction could easily lead to confusion about the value of the 
duration. &mdash; <i>end note</i> ]
</p></blockquote></blockquote>

</resolution>

</issue>
