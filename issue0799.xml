<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="799" status="NAD">
<title>[tr.rand.eng.mers] and [rand.eng.mers]</title>
<section><sref ref="[rand.eng.mers]"/>, <sref ref="[tr.rand.eng.mers]"/></section>
<submitter>Stephan Tolksdorf</submitter>
<date>18 Feb 2008</date>

<discussion>
<p>
<sref ref="[tr.rand.eng.mers]"/>(10) requires that <tt>operator==</tt> for the <tt>mersenne_twister</tt>
returns <tt>true</tt> if and only if the states of two <tt>mersenne_twisters</tt>,
consisting each of <tt>n</tt> integers between <tt>0</tt> and <tt>2<sup>w</sup> - 1</tt>, are completely
equal. This is a contradiction with <sref ref="[tr.rand.req]"/>(3) because the given
definition of the state also includes the lower <tt>r</tt> bits of <tt>x(i-n)</tt>, which
will never be used to generate a random number. If two <tt>mersenne_twister</tt>s
only differ in the lower bits of <tt>x(i-n)</tt> they will not compare equal,
although they will produce an identical sequence of random numbers.
</p>

<p>
<sref ref="[rand.eng.mers]"/> in the latest C++ draft does not specify the behaviour
of <tt>operator==</tt> but uses a similar definition of the state and, just like
<sref ref="[tr.rand.eng.mers]"/>, requires the textual representation of a
<tt>mersenne_twister_engine</tt> to consist of <tt>X<sub>i-n</sub></tt> to <tt>X<sub>i-1</sub></tt>, including the
lower bits of <tt>X<sub>i-n</sub></tt>. This leads to two problems: First, the
unsuspecting implementer is likely to erroneously compare the lower <tt>r</tt>
bits of <tt>X<sub>i-n</sub></tt> in <tt>operator==</tt>. Second, if only the lower <tt>r</tt> bits differ,
two <tt>mersenne_twister_engine</tt>s will compare equal (if correctly
implemented) but have different textual representations, which
conceptually is a bit ugly.
</p>

<p>
I propose that a paragraph or footnote is added to <sref ref="[rand.eng.mers]"/> which
clarifies that the lower <tt>r</tt> bits of <tt>X<sub>i-n</sub></tt> are not to be compared in
<tt>operator==</tt> and <tt>operator!=</tt>. It would only be consequent if furthermore
the specification for the textual respresentation was changed to
<tt>X<sub>i-n</sub> bitand ((2<sup>w</sup> - 1) - (2<sup>r</sup> - 1)), X<sub>i-(n-1)</sub>, ...,  X<sub>i-1</sub></tt> or
something similar.
</p>

<p>
These changes would likely have no practical effect, but would allow an
implementation that does the right thing to be standard-conformant.
</p>

<note>
Bellevue:
</note>

<blockquote>
<p>
Fermi Lab has no objection to the proposed change. However it feels that
more time is needed to check the details, which would suggest a change
to REVIEW.
</p>
<p>
Bill feels that this is NAD, not enough practical importance to abandon
the simple definition of equality, and someone would have to do a lot
more study to ensure that all cases are covered for a very small
payback. The submitter admits that "These changes would likely have no
practical effect,", and according to Plum's razor this means that it is
not worth the effort!
</p>
<p>
Revisted: Agree that the fact that there is no practical difference means that no change can be justified.
</p>
</blockquote>
</discussion>

<resolution>
<p>
In <sref ref="[rand.eng.mers]"/>:
</p>

<blockquote>
<p>
Insert at the end of para 2.:
</p>

<blockquote><p>
[<i>Note:</i> The lower <tt>r</tt> bits of <tt>X<sub>i-n</sub></tt> do not influence
the state transition and hence should not be compared when comparing two
<tt>mersenne_twister_engine</tt> objects. <i>-- end note</i>]
</p></blockquote>

<p>
In para 5. change:
</p>

<blockquote><p>
The textual representation of <tt>x<sub>i</sub></tt> consists of the values of
<tt>X<sub>i-n</sub> <ins>bitand ((2<sup>w</sup> - 1) - (2<sup>r</sup> - 1)),  X<sub>i-(n-1)</sub></ins>,
..., X<sub>i-1</sub></tt>, in that order.
</p></blockquote>
</blockquote>
</resolution>

</issue>
