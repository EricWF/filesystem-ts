<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="335" status="CD1">
<title>minor issue with char_traits, table 37</title>
<section><sref ref="[char.traits.require]"/></section>
<submitter>Andy Sawyer</submitter>
<date>06 Sep 2001</date>

<discussion>
<p>
Table 37, in <sref ref="[char.traits.require]"/>, descibes char_traits::assign
as:
</p>
<pre>
  X::assign(c,d)   assigns c = d.
</pre>

<p>And para 1 says:</p>

<blockquote><p>
 [...] c and d denote values of type CharT [...]
</p></blockquote>

<p>
Naturally, if c and d are <i>values</i>, then the assignment is
(effectively) meaningless. It's clearly intended that (in the case of
assign, at least), 'c' is intended to be a reference type.
</p>

<p>I did a quick survey of the four implementations I happened to have
lying around, and sure enough they all have signatures:</p>
<pre>
    assign( charT&amp;, const charT&amp; );
</pre>

<p>(or the equivalent). It's also described this way in Nico's book.
(Not to mention the synopses of char_traits&lt;char&gt; in 21.1.3.1
and char_traits&lt;wchar_t&gt; in 21.1.3.2...)
</p>
</discussion>

<resolution>
<p>Add the following to 21.1.1 para 1:</p>
<blockquote><p>
 r denotes an lvalue of CharT
</p></blockquote>

<p>and change the description of assign in the table to:</p>
<pre>
  X::assign(r,d)   assigns r = d
</pre>
</resolution>

</issue>
