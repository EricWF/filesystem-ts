<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2175" status="Voting">
<title><tt>wstring_convert</tt> and <tt>wbuffer_convert</tt> validity</title>
<section><sref ref="[conversions.string]"/>, <sref ref="[conversions.buffer]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>2 Aug 2012</date>

<discussion>

<p>
See discussion following <a href="http://accu.org/cgi-bin/wg21/message?wg=lib&amp;msg=32710">c++std-lib-32710</a>.
<p/>
It's not specified what happens if <tt>wstring_convert</tt> and <tt>wbuffer_convert</tt> objects are constructed 
with null <tt>Codecvt</tt> pointers.
<p/>
Should the constructors have preconditions that the pointers are not null?  If not, are conversions expected to 
fail, or is it undefined to attempt conversions if the pointers are null?
<p/>
There are no observer functions to check whether objects were constructed with valid <tt>Codecvt</tt> pointers. 
If the types are made movable such observers would be necessary even if the constructors require non-null 
pointers (see also LWG <iref ref="2176"/>).
</p>

<note>2013-03-15 Issues Teleconference</note>
<p>
Moved to Tentatively Ready.
</p>

<note>2013-04-20 Bristol</note>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Insert a new paragraph before <sref ref="[conversions.string]"/> paragraph 16:</p>

<blockquote><pre>
wstring_convert(Codecvt *pcvt = new Codecvt);
wstring_convert(Codecvt *pcvt, state_type state);
wstring_convert(const byte_string&amp; byte_err,
  const wide_string&amp; wide_err = wide_string());
</pre>
<blockquote>
<p>
<ins>-?- <i>Requires</i>: For the first and second constructors <tt>pcvt != nullptr</tt>.</ins>
<p/>
-16- <i>Effects</i>: The first constructor shall store <tt>pcvt</tt> in <tt>cvtptr</tt> and default values in 
<tt>cvtstate</tt>, <tt>byte_err_string</tt>, and <tt>wide_err_string</tt>. The second constructor shall 
store <tt>pcvt</tt> in <tt>cvtptr</tt>, <tt>state</tt> in <tt>cvtstate</tt>, and default values in 
<tt>byte_err_string</tt> and <tt>wide_err_string</tt>; moreover the stored state shall be retained between 
calls to <tt>from_bytes</tt> and <tt>to_bytes</tt>. The third constructor shall store <tt>new Codecvt</tt> 
in <tt>cvtptr</tt>, <tt>state_type()</tt> in cvtstate, <tt>byte_err</tt> in <tt>byte_err_string</tt>, 
and <tt>wide_err</tt> in <tt>wide_err_string</tt>.
</p>
</blockquote></blockquote>
</li>

<li><p>Insert a new paragraph before <sref ref="[conversions.buffer]"/> paragraph 10:</p>

<blockquote><pre>
wbuffer_convert(std::streambuf *bytebuf = 0,
  Codecvt *pcvt = new Codecvt, state_type state = state_type());
</pre><blockquote>
<p>
<ins>-?- <i>Requires</i>: <tt>pcvt != nullptr</tt>.</ins>
<p/>
-10- <i>Effects</i>: The constructor constructs a stream buffer object, initializes <tt>bufptr</tt> to <tt>bytebuf</tt>, 
initializes <tt>cvtptr</tt> to <tt>pcvt</tt>, and initializes <tt>cvtstate</tt> to <tt>state</tt>.
</p>
</blockquote></blockquote>

</li>

</ol>
</resolution>

</issue>
