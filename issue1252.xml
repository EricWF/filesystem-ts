<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1252" status="Immediate">
<title><tt>wbuffer_convert::state_type</tt> inconsistency</title>
<section><sref ref="[conversions.buffer]"/></section>
<submitter>Bo Persson </submitter>
<date>21 Oct 2009</date>

<discussion>
<p>
The synopsis for <tt>wbuffer_convert</tt> <sref ref="[conversions.buffer]"/>/2 contains
</p>

<blockquote><pre>
typedef typename Tr::state_type   state_type; 
</pre></blockquote>

<p>
making <tt>state_type</tt> a synonym for (possibly) some
<tt>char_traits&lt;x&gt;::state_type</tt>. 
</p>

<p>
However, in paragraph 9 of the same section, we have 
</p>

<blockquote><pre>
typedef typename Codecvt::state_type state_type;
</pre>

<blockquote><p>
The type shall be a synonym for <tt>Codecvt::state_type</tt>.
</p></blockquote>
</blockquote>

<p>
From what I can see, it might be hard to implement <tt>wbuffer_convert</tt> if 
the types were not both <tt>std::mbstate_t</tt>, but I cannot find a requirement 
that they must be the same type.
</p>

<note>
Batavia 2010:
</note>

<p>
Howard to draft wording, move to Review. Run it by Bill. Need to move this in Madrid.
</p>

<note>2011-03-06: Howard drafts wording</note>

<note>2011-03-24 Madrid meeting</note>

<p>Moved to Immediate</p>
</discussion>

<resolution>
<p>Modify the <tt>state_type</tt> typedef in the synopsis of <sref ref="[conversions.buffer]"/> p.2 as shown
[This makes the synopsis consistent with <sref ref="[conversions.buffer]"/> p.9]:</p>

<blockquote><pre>
namespace std {
template&lt;class Codecvt,
  class Elem = wchar_t,
  class Tr = std::char_traits&lt;Elem&gt; &gt;
class wbuffer_convert
  : public std::basic_streambuf&lt;Elem, Tr&gt; {
public:
  typedef typename <del>Tr</del><ins>Codecvt</ins>::state_type state_type;
  [&hellip;]
};
}
</pre></blockquote>
</resolution>

</issue>
