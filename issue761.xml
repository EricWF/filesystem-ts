<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="761" status="CD1">
<title><tt>unordered_map</tt> needs an <tt>at()</tt> member function</title>
<section><sref ref="[unord.map.elem]"/></section>
<submitter>Joe Gottman</submitter>
<date>15 Nov 2007</date>

<discussion>
<p>
The new member function <tt>at()</tt> was recently added to <tt>std::map()</tt>.  It acts 
like <tt>operator[]()</tt>, except it throws an exception when the input key is 
not found.  It is useful when the <tt>map</tt> is <tt>const</tt>, the <tt>value_type</tt> of the 
key doesn't have  a default constructor, it is an error if the key is 
not found, or the user wants to avoid accidentally adding an element to 
the map.  For exactly these same reasons, <tt>at()</tt> would be equally useful 
in <tt>std::unordered_map</tt>.
</p>
</discussion>

<resolution>
<p>
Add the following functions to the definition of <tt>unordered_map</tt> under "lookup" (<sref ref="[unord.map]"/>):
</p>

<blockquote><pre>
mapped_type&amp; at(const key_type&amp; k);
const mapped_type &amp;at(const key_type &amp;k) const;
</pre></blockquote>

<p>
Add the following definitions to <sref ref="[unord.map.elem]"/>:
</p>

<blockquote>
<pre>
mapped_type&amp; at(const key_type&amp; k);
const mapped_type &amp;at(const key_type &amp;k) const;
</pre>
<blockquote>
<p>
<i>Returns:</i> A reference to <tt>x.second</tt>, where <tt>x</tt> is the (unique) element 
whose key is equivalent to <tt>k</tt>.
</p>
<p>
<i>Throws:</i> An exception object of type <tt>out_of_range</tt> if no such element 
is present.
</p>
</blockquote>
</blockquote>

<note>
Bellevue:  Editorial note: the "(unique)" differs from map.
</note>

</resolution>

</issue>
