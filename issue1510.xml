<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1510" status="NAD Editorial">
<title>Should be undefined behaviour to call <tt>atomic_future</tt> operations unless <tt>valid()</tt></title>
<section><sref ref="[futures.atomic_future]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-203</b></p>
<p>
Both <tt>future</tt> and <tt>shared_future</tt> specify that calling most
member functions on an object for which <tt>valid() == false</tt>
produces undefined behavior. There is no such statement
for <tt>atomic_future</tt>.
</p>

<note>
Resolution proposed by ballot comment:
</note>
<p>
Add a new paragraph after <sref ref="[futures.atomic_future]"/>/2 with the same words as
<sref ref="[futures.shared_future]"/>/3.
</p>

<note>
2010-11-02 Daniel translates proposed changes into specific deltas and comments:
</note>

<blockquote><p>
While applying the wording, I notice that <sref ref="[futures.shared_future]"/>/3 does
speak of the move-assignment operator, and <em>not</em> of the copy-assignment operator.
<tt>atomic_future</tt> obviously needs this to be true for the copy-assignment operator,
but I strongly assume that <tt>shared_future</tt> needs to mention both special member
assignment operators in this paragraph. To keep this consistent, the following P/R also
provides wording to fix the corresponding location for <tt>shared_future</tt>.
</p></blockquote>

</discussion>

<resolution>
<ol>
<li>Change <sref ref="[futures.shared_future]"/>/3 as indicated:
<blockquote><p>
3 The effect of calling any member function other than the destructor<ins>, the 
copy-assignment operator</ins>, the move-assignment operator, or <tt>valid()</tt> 
on a <tt>shared_future</tt> object for which <tt>valid() == false</tt> is undefined.
</p></blockquote>
</li>
<li>Following <sref ref="[futures.atomic_future]"/>/2, add a new paragraph:
<blockquote><p>
<ins>? The effect of calling any member function other than the destructor, the copy-assignment operator, or <tt>valid()</tt>
on a <tt>atomic_future</tt> object for which <tt>valid() == false</tt> is undefined.</ins>
</p></blockquote>
</li>
</ol>
</resolution>

</issue>
