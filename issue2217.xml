<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2217" status="New">
<title><tt>operator==(sub_match, string)</tt> slices on embedded <tt>'\0'</tt>s</title>
<section><sref ref="[re.submatch.op]"/></section>
<submitter>Jeffrey Yasskin</submitter>
<date>26 Nov 2012</date>

<discussion>

<blockquote><pre>
template &lt;class BiIter, class ST, class SA&gt;
  bool operator==(
    const basic_string&lt;
      typename iterator_traits&lt;BiIter&gt;::value_type, ST, SA&gt;&amp; lhs,
    const sub_match&lt;BiIter&gt;&amp; rhs);
</pre></blockquote>
<p>
is specified as:
</p>
<blockquote><p>
<i>Returns</i>: <tt>rhs.compare(lhs.c_str()) == 0</tt>.
</p></blockquote>
<p>
This is odd because <tt>sub_match::compare(basic_string)</tt> is defined to
honor embedded <tt>'\0'</tt> characters. This could allow a <tt>sub_match</tt> to <tt>==</tt> or
<tt>!=</tt> a <tt>std::string</tt> unexpectedly.
</p>

<note>Daniel:</note>
<p>
This wording change was done intentionally as of LWG <iref ref="1181"/>, but the here mentioned slicing
effect was not considered at that time. It seems best to use another overload of compare to fix this problem:
</p>
<blockquote><p>
<i>Returns</i>: <tt>rhs.str().compare(0, rhs.length(), lhs.data(), lhs.size()) == 0</tt>.
</p></blockquote>
<p>
or
</p>
<blockquote><p>
<i>Returns</i>: <tt>rhs.compare(sub_match&lt;BiIter&gt;::string_type(lhs.data(), lhs.size())) == 0</tt>.
</p></blockquote>

<note>2013-10-17: Daniel provides concrete wording</note>

<p>
The original wording was suggested to reduce the need to allocate memory during comparisons. The specification would be
very much easier, if <tt>sub_match</tt> would provide an additional <tt>compare</tt> overload of the form:
</p>
<blockquote><pre>
int compare(const value_type* s, size_t n) const;
</pre></blockquote>
<p>
But given the fact that currently <em>all</em> of <tt>basic_string</tt>'s <tt>compare</tt> overloads are defined in terms
of temporary string constructions, the following proposed wording does follow the same string-construction route as 
<tt>basic_string</tt> does (where needed to fix the embedded zeros issue) and to hope that existing implementations
ignore to interpret this semantics in the literal sense.
<p/>
I decided to use the second replacement form
</p>
<blockquote><pre>
<i>Returns</i>: <tt>rhs.compare(sub_match&lt;BiIter&gt;::string_type(lhs.data(), lhs.size())) == 0</tt>.
</pre></blockquote>
<p>
because it already reflects the existing style used in <sref ref="[re.submatch.op]"/> p31.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Change <sref ref="[re.submatch.op]"/> as indicated:</p>

<blockquote><pre>
template &lt;class BiIter, class ST, class SA&gt;
  bool operator==(
    const basic_string&lt;
      typename iterator_traits&lt;BiIter&gt;::value_type, ST, SA&gt;&amp; lhs,
    const sub_match&lt;BiIter&gt;&amp; rhs);
</pre><blockquote>
<p>
-7- <i>Returns:</i> <tt>rhs.compare(<del>lhs.c_str()</del><ins>sub_match&lt;BiIter&gt;::string_type(lhs.data(), lhs.size())</ins>) == 0</tt>.
</p>
</blockquote></blockquote>
<p>
[&hellip;]
</p>
<blockquote><pre>
template &lt;class BiIter, class ST, class SA&gt;
  bool operator&lt;(
    const basic_string&lt;
      typename iterator_traits&lt;BiIter&gt;::value_type, ST, SA&gt;&amp; lhs,
    const sub_match&lt;BiIter&gt;&amp; rhs);
</pre><blockquote>
<p>
-9- <i>Returns:</i> <tt>rhs.compare(<del>lhs.c_str()</del><ins>sub_match&lt;BiIter&gt;::string_type(lhs.data(), lhs.size())</ins>) &gt; 0</tt>.
</p>
</blockquote></blockquote>
<p>
[&hellip;]
</p>
<blockquote><pre>
template &lt;class BiIter, class ST, class SA&gt;
  bool operator==(const sub_match&lt;BiIter&gt;&amp; lhs,
                  const basic_string&lt;
                    typename iterator_traits&lt;BiIter&gt;::value_type, ST, SA>&amp; rhs);
</pre><blockquote>
<p>
-13- <i>Returns:</i> <tt>lhs.compare(<del>rhs.c_str()</del><ins>sub_match&lt;BiIter&gt;::string_type(rhs.data(), rhs.size())</ins>) == 0</tt>.
</p>
</blockquote></blockquote>
<p>
[&hellip;]
</p>
<blockquote><pre>
template &lt;class BiIter, class ST, class SA&gt;
  bool operator&lt;(const sub_match&lt;BiIter&gt;&amp; lhs,
                 const basic_string&lt;
                   typename iterator_traits&lt;BiIter&gt;::value_type, ST, SA>&amp; rhs);
</pre><blockquote>
<p>
-15- <i>Returns:</i> <tt>lhs.compare(<del>rhs.c_str()</del><ins>sub_match&lt;BiIter&gt;::string_type(rhs.data(), rhs.size())</ins>) &lt; 0</tt>.
</p>
</blockquote></blockquote>

<blockquote><pre>
</pre><blockquote>
<p>
</p>
</blockquote></blockquote>

<blockquote><pre>
</pre><blockquote>
<p>
</p>
</blockquote></blockquote>

<blockquote><pre>
</pre><blockquote>
<p>
</p>
</blockquote></blockquote>

<blockquote><pre>
</pre><blockquote>
<p>
</p>
</blockquote></blockquote>
</li>
</ol>

</resolution>

</issue>
