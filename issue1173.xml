<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1173" status="NAD Future">
<title>"Equivalence" wishy-washiness</title>
<section><sref ref="[library]"/></section>
<submitter>David Abrahams</submitter>
<date>14 Jul 2009</date>

<discussion>
<p>
Issue: The <tt>CopyConstructible</tt> requirements are wishy-washy.  It requires
that the copy is "equivalent" to the original, but "equivalent" is never
defined.
</p>
<p>
I believe this to be an example of a more general lack of rigor around
copy and assignment, although I haven't done the research to dig up all
the instances.
</p>
<p>
It's a problem because if you don't know what <tt>CopyConstructible</tt> means,
you also don't know what it means to copy a pair of <tt>CopyConstructible</tt>
types.  It doesn't prevent us from writing code, but it is a hole in our
ability to understand the meaning of copy.
</p>
<p>
Furthermore, I'm pretty sure that vector's copy constructor doesn't
require the elements to be <tt>EqualityComparable</tt>, so that table is actually
referring to some ill-defined notion of equivalence when it uses ==.
</p>

<note>
2009 Santa Cruz:
</note>

<blockquote>
Move to "Open". Dave is right that this is a big issue. Paper D2987
("Defining Move Special Member Functions", Bjarne Stroustrup and
Lawrence Crowl) touches on this but does not solve it. This issue is
discussed in Elements of Programming.
</blockquote>


<note>
2010 Rapperswil:
</note>

<blockquote>
This issue is quite vague, so it is difficult to know if and when it has been resolved.

John Lakos wrote a paper covering this area a while back, and there is a real interest in providing some sort of clean-up in the future.

We need a more clearly draughted issues with an addressable set of concerns, ideally with a paper proposing a resolution, but for a future revision of the standard.

Move to Tentatively NAD Future.
</blockquote>

</discussion>

<resolution>
</resolution>

</issue>
