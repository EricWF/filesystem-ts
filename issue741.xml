<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="741" status="NAD">
<title>Const-incorrect <tt>get_deleter</tt> function for <tt>shared_ptr</tt></title>
<section><sref ref="[util.smartptr.getdeleter]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>27 Sep 2007</date>

<discussion>
<p>
The following issue was raised by Alf P. Steinbach in c.l.c++.mod:
</p>

<p>
According to the recent draft N2369, both the header memory synopsis
of <sref ref="[memory]"/> and <sref ref="[util.smartptr.getdeleter]"/> declare:
</p>

<blockquote><pre>
template&lt;class D, class T&gt; D* get_deleter(shared_ptr&lt;T&gt; const&amp; p);
</pre></blockquote>

<p>
This allows to retrieve the pointer to a mutable deleter of a <tt>const
shared_ptr</tt> (if that owns one) and therefore contradicts the usual
philosophy that associated functors are either read-only (e.g.
<tt>key_comp</tt> or <tt>value_comp</tt> of <tt>std::map</tt>) or do at least reflect
the mutability of the owner (as seen for the both overloads of
<tt>unique_ptr::get_deleter</tt>).
Even the next similar counter-part of <tt>get_deleter</tt> - the two
overloads of <tt>function::target</tt> in the class template function
synopsis <sref ref="[func.wrap.func]"/> or in <sref ref="[func.wrap.func.targ]"/> - do
properly mirror the const-state of the owner.
</p>

<b>Possible proposed resolutions:</b>

<p>
Replace the declarations of <tt>get_deleter</tt> in the header <tt>&lt;memory&gt;</tt>
synopsis of <sref ref="[memory]"/> and in <sref ref="[util.smartptr.getdeleter]"/> by one of the
following alternatives (A) or (B):
</p>

<ol type="A">
<li>
Provide <b>only</b> the immutable variant. This would reflect the
current praxis of <tt>container::get_allocator()</tt>, <tt>map::key_comp()</tt>, or
<tt>map::value_comp</tt>.

<blockquote><pre>
template&lt;class D, class T&gt; const D* get_deleter(shared_ptr&lt;T&gt; const&amp; p);
</pre></blockquote>
</li>
<li>
Just remove the function.
</li>
</ol>

<p>
Alberto Ganesh Barbati adds:
</p>

<ol type="A" start="3">
<li>
<p>
Replace it with two functions:
</p>
<blockquote><pre>
template &lt;class D, class T&gt; D get_deleter(shared_ptr&lt;T&gt; const&amp;);
template &lt;class D, class T&gt; bool has_deleter(shared_ptr&lt;T&gt; const&amp;);
</pre></blockquote>

<p>
The first one would throw if <tt>D</tt> is the wrong type, while the latter would
never throw. This approach would reflect the current praxis of
<tt>use_facet/has_facet</tt>, with the twist of returning the deleter by value as
<tt>container::get_allocator()</tt> do.
</p>
</li>
</ol>

<p>
Peter Dimov adds:
</p>

<blockquote>
<p>
My favorite option is "not a defect". A, B and C break useful code.
</p>
</blockquote>

<note>
Bellevue:
</note>

<blockquote>
Concern this is similar to confusing "pointer to const" with "a constant pointer".
</blockquote>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
