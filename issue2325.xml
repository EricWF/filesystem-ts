<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2325" status="New">
<title><tt>minmax_element()</tt>'s behavior differing from <tt>max_element()</tt>'s should be noted</title>
<section><sref ref="[alg.min.max]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>21 Sep 2013</date>

<discussion>
<p>
<sref ref="[alg.min.max]"/>/23 says that <tt>max_element()</tt> finds the <em>first</em> biggest element, while /25 says that 
<tt>minmax_element()</tt> finds the <em>last</em> biggest element. This significant difference is unusual &mdash; it means that 
<tt>minmax_element(args)</tt> is not equivalent to <tt>make_pair(min_element(args), max_element(args))</tt>, whereas the other 
major "two for one" algorithm <tt>equal_range(args)</tt> is equivalent to <tt>make_pair(lower_bound(args), upper_bound(args))</tt>.  
<tt>minmax_element()</tt>'s behavior is intentional &mdash; it is a fundamental consequence of the <tt>3N/2</tt> algorithm &mdash; 
but the Standardese does not draw attention to this in any way. This wording came from LWG <iref ref="715"/>'s resolution (which 
changed the semantics but didn't mention it), citing CLRS for the algorithm &mdash; but CLRS doesn't mention the behavior for 
equivalent elements! The wording here deeply confused me (as an STL maintainer fixing an incorrect implementation) until I walked 
through the algorithm by hand and figured out the fundamental reason. It would be really nice for the Standard to provide a hint 
that something magical is happening here.
</p>
</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Add a footnote to <sref ref="[alg.min.max]"/>/25 as indicated:</p>

<blockquote><pre>
template&lt;class ForwardIterator&gt;
  pair&lt;ForwardIterator, ForwardIterator&gt;
    minmax_element(ForwardIterator first, ForwardIterator last);
template&lt;class ForwardIterator, class Compare&gt;
  pair&lt;ForwardIterator, ForwardIterator&gt;
    minmax_element(ForwardIterator first, ForwardIterator last, Compare comp);
</pre><blockquote>
<p>
-25- <i>Returns:</i> <tt>make_pair(first, first)</tt> if <tt>[first,last)</tt> is empty, otherwise <tt>make_pair(m, M)</tt>, where
<tt>m</tt> is the first iterator in <tt>[first,last)</tt> such that no iterator in the range refers to a smaller element,
and where <tt>M</tt> is the last iterator <ins>[Footnote: This behavior intentionally differs from <tt>max_element()</tt>.]</ins> 
in <tt>[first,last)</tt> such that no iterator in the range refers to a larger element.
</p>
</blockquote></blockquote>
</li>

</ol>

</resolution>

</issue>
