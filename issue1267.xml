<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1267" status="C++11">
<title>Incorrect wording for <tt>condition_variable_any::wait_for</tt></title>
<section><sref ref="[thread.condition.condvarany]"/></section>
<submitter>Anthony Williams</submitter>
<date>17 Nov 2009</date>

<discussion>
<p>
<sref ref="[thread.condition.condvarany]"/>p18 and <sref
ref="[thread.condition.condvarany]"/>p27 specify incorrect preconditions for
<tt>condition_variable_any::wait_for</tt>. The stated preconditions require that
<tt>lock</tt> has a <tt>mutex()</tt> member function, and that this produces the
same result for all concurrent calls to <tt>wait_for()</tt>. This is
inconsistent with <tt>wait()</tt> and <tt>wait_until()</tt> which do not impose
such a requirement.
</p>

<note>
2009-12-24 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<p>
Remove <sref ref="[thread.condition.condvarany]"/>p18 and <sref
ref="[thread.condition.condvarany]"/>p27.
</p>
<blockquote>
<pre>
template &lt;class Lock, class Rep, class Period&gt;
  cv_status wait_for(Lock&amp; lock, const chrono::duration&lt;Rep, Period&gt;&amp; rel_time);
</pre>
<blockquote>
<p><del>
18 <i>Precondition:</i> lock is locked by the calling thread, and either
</del></p>
<ul>
<li><del>
no other thread is waiting on this <tt>condition_variable</tt> object or
</del></li>
<li><del>
<tt>lock.mutex()</tt> returns the same value for each of the lock arguments
supplied by all concurrently waiting (via <tt>wait</tt>, <tt>wait_for</tt>, or
<tt>wait_until</tt>) threads.
</del></li>
</ul>
</blockquote>

<p>...</p>

<pre>
template &lt;class Lock, class Rep, class Period, class Predicate&gt;
  bool wait_for(Lock&amp; lock, const chrono::duration&lt;Rep, Period&gt;&amp; rel_time, Predicate pred);
</pre>

<blockquote>

<p><del>
27 Precondition: lock is locked by the calling thread, and either
</del></p>
<ul>
<li><del>
no other thread is waiting on this <tt>condition_variable</tt> object or
</del></li>
<li><del>
<tt>lock.mutex()</tt> returns the same value for each of the lock arguments
supplied by all concurrently waiting (via <tt>wait</tt>, <tt>wait_for</tt>, or
<tt>wait_until</tt>) threads.
</del></li>
</ul>

</blockquote>

</blockquote>

</resolution>

</issue>
