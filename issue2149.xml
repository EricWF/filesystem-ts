<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2149" status="New">
<title>Concerns about 20.8/5</title>
<section><sref ref="[function.objects]"/></section>
<submitter>Scott Meyers</submitter>
<date>15 Feb 2012</date>

<discussion>

<p>
<sref ref="[function.objects]"/> p5 says:
</p>
<blockquote><p>
To enable adaptors and other components to manipulate function objects that take one or two arguments
it is required that the function objects correspondingly provide typedefs <tt>argument_type</tt> and 
<tt>result_type</tt> for function objects that take one argument and <tt>first_argument_type</tt>, 
<tt>second_argument_type</tt>, and <tt>result_type</tt> for function objects that take two arguments.
</p></blockquote>
<p>
I have two concerns about this paragraph.  First, the wording appears to prescribe a requirement for all 
function objects in valid C++ programs, but it seems unlikely that that is the intent.  As such, the scope 
of the requirement is unclear.  For example, there is no mention of these typedefs in the specification for 
closures (5.1.2), and Daniel Kr&uuml;gler has explained in the thread at 
<a href="http://tinyurl.com/856plkn">http://tinyurl.com/856plkn</a> that conforming implementations can 
detect the difference between closures with and without these typedefs.  (Neither gcc 4.6 nor VC10 appear 
to define typedefs such as <tt>result_type</tt> for closure types. I have not tested other compilers.)
<p/>
Second, the requirement appears to be unimplementable in some cases, notably for function objects returned 
from <tt>std::bind</tt>, as Howard Hinnant explains in the thread at <a href="http://tinyurl.com/6q5bos4">http://tinyurl.com/6q5bos4</a>.
<p/>
From what I can tell, the standard already defines which adaptability typedefs must be provided by various 
kinds of function objects in the specifications for those objects.  Examples include the function objects 
specified in <sref ref="[refwrap]"/>-<sref ref="[negators]"/>. I therefore suggest that 
<sref ref="[function.objects]"/>&#47;5 simply be removed from the standard. I don't think it adds anything 
except opportunities for confusion.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<p>Remove <sref ref="[function.objects]"/> p5:</p>

<blockquote><p><del>
To enable adaptors and other components to manipulate function objects that take one or two arguments
it is required that the function objects correspondingly provide typedefs <tt>argument_type</tt> and 
<tt>result_type</tt> for function objects that take one argument and <tt>first_argument_type</tt>, 
<tt>second_argument_type</tt>, and <tt>result_type</tt> for function objects that take two arguments.
</del></p></blockquote>
</resolution>

</issue>
