<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2001" status="Open">
<title>Class template <tt>basic_regex</tt> uses non existent <tt>string_type</tt></title>
<section><sref ref="[re.regex.assign]"/></section>
<submitter>Volker Lukas</submitter>
<date>21 Oct 2010</date>

<discussion>
<p>
In working draft N3126, subclause <sref ref="[re.regex.assign]"/>, paragraphs 12, 13 and 19, 
the name <tt>string_type</tt> is used. This is presumably a typedef for <tt>basic_string&lt;value_type&gt;</tt>, where 
<tt>value_type</tt> is the character type used by <tt>basic_regex</tt>. The <tt>basic_regex</tt> 
template however defines no such typedef, and neither does the <tt>&lt;regex&gt;</tt> 
header or the <tt>&lt;initializer_list&gt;</tt> header included by <tt>&lt;regex&gt;</tt>.
</p>

<note>
2010-11-03 Daniel comments and suggests alternative wording:
</note>
<blockquote><p>
The proposed resolution needs to use <tt>basic_string&lt;<strong>charT</strong>&gt;</tt> instead of <tt>basic_string&lt;char&gt;</tt>
</p></blockquote>

<p>
Previous Proposed Resolution:
<p/>
Make the following changes to [re.regex.assign]:
</p>
<blockquote>
<pre>
basic_regex&amp; assign(const charT* ptr, flag_type f = regex_constants::ECMAScript);
</pre>
<blockquote><p>
12 <i>Returns</i>: <tt>assign(<del>string_type</del><ins>basic_string&lt;charT&gt;</ins>(ptr), f)</tt>. 
</p></blockquote>

<pre>
basic_regex&amp; assign(const charT* ptr, size_t len,
  flag_type f = regex_constants::ECMAScript);
</pre>
<blockquote><p>
13 <i>Returns</i>: <tt>assign(<del>string_type</del><ins>basic_string&lt;charT&gt;</ins>(ptr, len), f)</tt>.
</p></blockquote>

<pre>
[..]

template &lt;class InputIterator&gt; 
  basic_regex&amp; assign(InputIterator first, InputIterator last, 
                          flag_type f = regex_constants::ECMAScript);
</pre>

<blockquote><p>
18 <i>Requires</i>: The type <tt>InputIterator</tt> shall satisfy the requirements for an Input Iterator (24.2.3).
</p></blockquote>

<blockquote><p>
19 <i>Returns</i>: <tt>assign(<del>string_type</del><ins>basic_string&lt;charT&gt;</ins>(first, last), f)</tt>.
</p></blockquote>

</blockquote>

<note>
2010 Batavia 
</note>

<p>
Unsure if we should just give <tt>basic_regex</tt> a <tt>string_type</tt> typedef. Looking for when <tt>string_type</tt> was 
introduced into <tt>regex</tt>. Howard to draft wording for <tt>typedef typename traits::string_type string_type</tt>, then move to Review. 
</p>

<note>
2011-02-16: Daniel comments and provides an alternative resolution.
</note>

<p>
I'm strongly in favour with the Batavia idea to provide a separate <tt>string_type</tt> within
<tt>basic_regex</tt>, but it seems to me that the issue resultion should add one more
important typedef, namely that of the traits type! Currently, <tt>basic_regex</tt> is the
<em>only</em> template that does not publish the type of the associated traits type. Instead
of opening a new issue, I added this suggestion as part of the proposed wording.
</p>

</discussion>

<resolution>
<p>
Change the class template <tt>basic_regex</tt> synopsis, <sref ref="[re.regex]"/> p. 3, as indicated:</p>

<blockquote><pre>
namespace std {
  template &lt;class charT,
            class traits = regex_traits&lt;charT&gt; &gt;
  class basic_regex {
  public:
    // types:
    typedef charT value_type;
    <ins>typedef traits traits_type;</ins>
    <ins>typedef typename traits::string_type string_type;</ins>
    typedef regex_constants::syntax_option_type flag_type;
    typedef typename traits::locale_type locale_type;

    [..]
  };
}
</pre></blockquote>

</resolution>

</issue>
