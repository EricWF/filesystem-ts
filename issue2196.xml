<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2196" status="New">
<title>Specification of <tt>is_*[copy/move]_[constructible/assignable]</tt> unclear for non-referencable types</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>6 Oct 2012</date>

<discussion>

<p>
The pre-conditions for the type <tt>is_copy_constructible</tt> allow for template argument types were the language forbids 
forming a reference, namely <tt>void</tt> types and function types that have <em>cv</em>-qualifiers or a <em>ref</em>-qualifier.
<p/>
But the current wording in Table 49 defining the predicate condition,
</p>
<blockquote><p>
<tt>is_constructible&lt;T, const T&amp;&gt;::value</tt> is <tt>true</tt>.
</p></blockquote>
<p>
leaves it open whether such argument types would (a) create a well-formed instantiation of the trait template or if so (b) what
the outcome of the trait evaluation would be, as an example consider <tt>std::is_copy_constructible&lt;void&gt;</tt>.
<p/>
Current implementations differ, e.g. gcc accepts the instantiation and returns a false result, VS 2012
also accepts the instantiation but returns true.
<p/>
I would suggest that the wording clarifies that the instantiation would be valid for these types and I also would strongly 
prefer the outcome that the trait would always return false for these types. The latter seems rather natural
to me, because there is no way to define a variable of <tt>void</tt> type or of function type at all, so it would be surprising
to return a positive result for copy or move construction if no other construction could succeed. It is also not 
possible to assign to a any of these values (because there is no way to form lvalues of them), so the same argumentation 
can be applied to the <tt>is_copy/move_assignable</tt> traits as well.
<p/>
To reduce the amount of wording changes and repetitions, I suggest to define the term <em>referenceable type</em> in 
sub-clause <sref ref="[definitions]"/> or alternatively in the core language to describe types to which references
can be created via a typedef name. This definition corresponds to what the support concept <tt>ReferentType</tt> intended 
to describe during concept time.
<p/>
In addition, LWG issue <iref ref="2101"/> can also take advantage of the definition of a <em>referenceable type</em>.
<p/>
If the proposed resolution for LWG issue <iref ref="2101"/> would be accepted, there is an alternative solution possible
with the same effects. Now we would be able to use the now always well-formed instantiation of 
<tt>std::add_lvalue_reference</tt> to modify the current definition of <tt>is_copy_constructible</tt> to
</p>
<blockquote><p>
<tt>is_constructible&lt;T,<br/> 
    typename add_lvalue_reference&lt;<br/> 
	typename add_const&lt;T&gt;::type&gt;::type&gt;::value</tt> is true.
</p></blockquote>
<p>
and similar changes for the other affected traits.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Add the following new definition to <sref ref="[definitions]"/> as indicated:</p>
<p><b>referenceable type</b> [defns.referenceable]</p>
<blockquote><p>
An object type, a function type that does not have <em>cv</em>-qualifiers or a <em>ref</em>-qualifier, or a reference type.
[<i>Note</i>: The term describes a type to which a reference can be created, including reference types. &mdash; <i>end note</i>]
</p></blockquote>
</li>

<li><p>Change Table 49 as indicated:</p>

<table border="1">
<caption>Table 49 &mdash; Type property predicates</caption>
<tr>
<th>Template</th>
<th>Condition</th>
<th>Preconditions</th>
</tr> 

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_copy_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_constructible&lt;T,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_move_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_constructible&lt;T,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_copy_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_assignable&lt;T&amp;,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_move_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_assignable&lt;T&amp;,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_trivially_copy_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_trivially_constructible&lt;T,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_trivially_move_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_trivially_constructible&lt;T,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_trivially_copy_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_trivially_assignable&lt;T&amp;,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_trivially_move_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_trivially_assignable&lt;T&amp;,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_nothrow_copy_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_nothrow_constructible&lt;T,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_nothrow_move_constructible;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_nothrow_constructible&lt;T,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_nothrow_copy_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_nothrow_assignable&lt;T&amp;,</tt><br/>
<tt>const T&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_nothrow_move_assignable;</tt>
</td>
<td>
<ins>For a referenceable type <tt>T</tt>, the same result as</ins><br/>
<tt>is_nothrow_assignable&lt;T&amp;,</tt><br/>
<tt>T&amp;&amp;&gt;::value</tt><del> is true</del><ins>, otherwise false</ins>.
</td>
<td>
<tt>T</tt> shall be a complete type,<br/>
(possibly <em>cv</em>-qualified) <tt>void</tt>, or an<br/> 
array of unknown bound.
</td>
</tr>

</table>

</li>
</ol>

</resolution>

</issue>
