<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="720" status="CD1">
<title>Omissions in constexpr usages</title>
<section><sref ref="[array]"/><sref ref="[template.bitset]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>25 Aug 2007</date>

<discussion>
<ol>
<li>
The member function <tt>bool array&lt;T,N&gt;::empty() const</tt> should be a
<tt>constexpr</tt> because this is easily to proof and to implement following it's operational
semantics defined by Table 87 (Container requirements) which says: <tt>a.size() == 0</tt>.
</li>
<li>
The member function <tt>bool bitset&lt;N&gt;::test() const</tt> must be a
<tt>constexpr</tt> (otherwise it would violate the specification of <tt>constexpr
bitset&lt;N&gt;::operator[](size_t) const</tt>, because it's return clause delegates to <tt>test()</tt>).
</li>
<li>
I wonder how the constructor <tt>bitset&lt;N&gt;::bitset(unsigned long)</tt> can
be declared as a <tt>constexpr</tt>. Current implementations usually have no such <tt>bitset</tt>
c'tor which would fulfill the requirements of a <tt>constexpr</tt> c'tor because they have a
non-empty c'tor body that typically contains for-loops or <tt>memcpy</tt> to compute the
initialisation. What have I overlooked here?
</li>
</ol>

<note>
Sophia Antipolis:
</note>

<blockquote>
<p>
We handle this as two parts
</p>
<ol>
<li>
The proposed resolution is correct; move to ready.
</li>
<li>
The issue points out a real problem, but the issue is larger than just
this solution. We believe a paper is needed, applying the full new
features of C++ (including extensible literals) to update <tt>std::bitset</tt>.
We note that we do not consider this new work, and that is should be
handled by the Library Working Group.
</li>
</ol>
<p>
In order to have a consistent working paper, Alisdair and Daniel produced a new wording for the resolution.
</p>
</blockquote>

</discussion>

<resolution>
<ol>
<li>
<p>In the class template definition of <sref ref="[array]"/>/p. 3 change</p>
<blockquote><pre>
<ins>constexpr</ins> bool empty() const;
</pre></blockquote>
</li>

<li>
<p>In the class template definition of <sref ref="[template.bitset]"/>/p. 1 change</p>
<blockquote><pre>
<ins>constexpr</ins> bool test(size_t pos ) const;
</pre></blockquote>

<p>
and in <sref ref="[bitset.members]"/> change
</p>

<blockquote><pre>
<ins>constexpr</ins> bool test(size_t pos ) const;
</pre></blockquote>

</li>
</ol>
</resolution>

</issue>
