<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1322" status="New">
<title>Explicit <tt>CopyConstructible</tt> requirements are insufficient</title>
<section><sref ref="[utility.arg.requirements]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>16 Feb 2010</date>

<discussion>
<p>
With the acceptance of library defect <iref ref="822"/> only
direct-initialization is supported, and not copy-initialization in the
requirement sets <tt>MoveConstructible</tt> and <tt>CopyConstructible</tt>. This
is usually a good thing, if only the library implementation needs to obey these
restrictions, but the Empire strikes back quickly:
</p>

<ol>
<li>
<p>
<em>Affects user-code</em>: <tt>std::exception_ptr</tt> is defined purely via
requirements, among them <tt>CopyConstructible</tt>. A strict reading of the
standard would make implementations conforming where <tt>std::exception_ptr</tt>
has an explicit copy-c'tor and user-code must code defensively. This is a very
unwanted effect for such an important component like
<tt>std::exception_ptr</tt>.
</p>
</li>

<li>
<p>
<em>Wrong re-use</em>: Recently proposed requirement sets
(<tt>NullablePointer</tt> as of
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3025.html">N3025</a>,
Hash) or cleanup of existing requirement sets (e.g. iterator requirements as of
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3046.html">N3046</a>)
tend to reuse existing requirement sets, so reusing <tt>CopyConstructible</tt>
is attempting, even in cases, where the intend is to support copy-initialization
as well.
</p>
</li>

<li>
<p>
<em>Inconsistency</em>: The current iterator requirements set Table 102 (output
iterator requirements) and Table 103 (forward iterator requirements) demonstrate
quite clearly a strong divergence of copy-semantics: The specified semantics of
</p>

<blockquote><pre>
X u(a);
X u = a;
</pre></blockquote>

<p>
are underspecified compared to the most recent clarifications of the
<tt>CopyConstructible</tt> requirements, c.f. issue <iref ref="1309"/> which is
very unsatisfactory. This will become worse for each further issue that involves
the <tt>CopyConstructible</tt> specification (for possible directions see <iref
ref="1173"/>).
</p>
</li>
</ol>

<p>
The suggested resolution is to define two further requirements
<tt>implicit-MoveConstructible</tt> and <tt>implicit-CopyConstructible</tt> (or
any other reasonable name like <tt>MoveConvertible</tt> and
<tt>CopyConvertible</tt>) each with a very succinct but precise meaning solving
all three problems mentioned above.
</p>

</discussion>

<resolution>
<ol>
<li>
<p>
Add the following new table ?? after Table 34 &mdash; <tt>MoveConstructible</tt>
requirements [moveconstructible]:
</p>

<blockquote>

<table border="1">
<caption><ins>Table ?? &mdash; <tt>Implicit MoveConstructible</tt> requirements
[implicit.moveconstructible] (in addition to
<tt>MoveConstructible</tt>)</ins></caption>

<tr>
<th><ins>Expression</ins></th>
<th><ins>Operational Semantics</ins></th>
</tr>

<tr>
<td><ins><tt>T u = rv;</tt></ins></td>
<td><ins>Equivalent to: <tt>T u(rv);</tt></ins></td>
</tr>

</table>
</blockquote>

</li>

<li>
<p>
Add the following new table ?? after Table 35 &mdash; <tt>CopyConstructible</tt>
requirements [copyconstructible]:
</p>

<blockquote>

<table border="1">
<caption><ins>Table ?? &mdash; <tt>Implicit CopyConstructible</tt> requirements
[implicit.copyconstructible] (in addition to
<tt>CopyConstructible</tt>)</ins></caption>

<tr>
<th><ins>Expression</ins></th>
<th><ins>Operational Semantics</ins></th>
</tr>

<tr>
<td><ins><tt>T u = v;</tt></ins></td>
<td><ins>Equivalent to: <tt>T u(v);</tt></ins></td>
</tr>

</table>
</blockquote>

</li>

<li>
<p>
Change <sref ref="[nullablepointer.requirements]"/>/1 as follows:
</p>

<blockquote>
<p>
A <tt>NullablePointer</tt> type is a pointer-like type that supports null
values. A type <tt>P</tt> meets the requirements of <tt>NullablePointer</tt> if:
</p>

<ul>
<li>
<tt>P</tt> satisfies the requirements of <tt>EqualityComparable</tt>,
<tt>DefaultConstructible</tt>, <tt><ins>implicit</ins> CopyConstructible</tt>,
<tt>CopyAssignable</tt>, and <tt>Destructible</tt>,
</li>

<li>[..]</li>
</ul>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[hash.requirements]"/>/1 as indicated: <i>[explicit
copy-constructible functors could not be provided as arguments
to any algorithm that takes these by value. Also a typo is fixed.]</i>
</p>

<blockquote>
<p>
1 A type <tt>H</tt> meets the <i>Hash</i> requirements if:
</p>
<ul>
<li>
it is a function object type (20.8),
</li>
<li>
it satis<ins>fies</ins><del>ifes</del> the requirements of
<tt><ins>implicit</ins> CopyConstructible</tt> and <tt>Destructible</tt>
(20.2.1),
</li>
<li>
[..]
</li>
</ul>

</blockquote>

</li>

<li>
<p>
Change <sref ref="[meta.rqmts]"/>/1+2 as indicated:
</p>

<blockquote>
<p>
1 A <i>UnaryTypeTrait</i> describes a property of a type. It shall be a class
template that takes one template type argument and, optionally, additional
arguments that help define the property being described. It shall be
<tt>DefaultConstructible</tt>, <tt><ins>implicit</ins> CopyConstructible</tt>,
[..]
</p>

<p>
2 A <tt>BinaryTypeTrait</tt> describes a relationship between two types. It
shall be a class template that takes two template type arguments and,
optionally, additional arguments that help define the relationship being
described. It shall be <tt>DefaultConstructible</tt>,
<tt><ins>implicit </ins>CopyConstructible</tt>, and [..]
</p>

</blockquote>

</li>

<li>
<p>
Change <sref ref="[func.require]"/>/4 as indicated: <i>[explicit
copy-constructible functors could not be provided as arguments to any algorithm
that takes these by value]</i>
</p>

<blockquote>
4 Every call wrapper (20.8.1) shall be <tt><ins>implicit</ins>
MoveConstructible</tt>. A simple call wrapper is a call wrapper that is
<tt><ins>implicit</ins> CopyConstructible</tt> and <tt>CopyAssignable</tt> and
whose copy constructor, move constructor, and assignment operator do not throw
exceptions. [..]
</blockquote>
</li>

<li>
<p>
Change <sref ref="[refwrap]"/>/1 as indicated:
</p>

<blockquote>
1 <tt>reference_wrapper&lt;T&gt;</tt> is a<ins>n <tt>implicit</tt></ins>
<tt>CopyConstructible</tt> and <tt>CopyAssignable</tt> wrapper around a
reference to an object or function of type <tt>T</tt>.
</blockquote>
</li>

<li>
<p>
Change <sref ref="[func.bind.bind]"/>/5+9 as indicated:
</p>

<blockquote>
<p>
5 <i>Remarks:</i> The return type shall satisfy the requirements of
<tt><ins>implicit</ins> MoveConstructible</tt>. If all of <tt>FD</tt> and
<tt>TiD</tt> satisfy the requirements of <tt>CopyConstructible</tt>, then the
return type shall satisfy the requirements of <tt><ins>implicit</ins>
CopyConstructible</tt>. [<i>Note:</i> this implies that all of <tt>FD</tt> and
<tt>TiD</tt> are <tt>MoveConstructible</tt>. &mdash; <i>end note</i>]
</p>

<p>
[..]
</p>

<p>
9 <i>Remarks:</i> The return type shall satisfy the requirements of
<tt><ins>implicit</ins> MoveConstructible</tt>. If all of <tt>FD</tt> and
<tt>TiD</tt> satisfy the requirements of <tt>CopyConstructible</tt>, then the
return type shall satisfy the requirements of <tt><ins>implicit</ins>
CopyConstructible</tt>. [<i>Note:</i> this implies that all of <tt>FD</tt> and
<tt>TiD</tt> are <tt>MoveConstructible</tt>. &mdash; <i>end note</i>]
</p>
</blockquote>

</li>

<li>
<p>
Change <sref ref="[func.bind.place]"/> as indicated:
</p>

<blockquote>
1 All placeholder types shall be <tt>DefaultConstructible</tt> and
<tt><ins>implicit</ins> CopyConstructible</tt>, and [..]
</blockquote>
</li>

<li>
<p>
Change <sref ref="[unique.ptr]"/>/5 as indicated:
</p>

<blockquote>
5 Each object of a type <tt>U</tt> instantiated form the <tt>unique_ptr</tt>
template specified in this subclause has the strict ownership semantics,
specified above, of a unique pointer. In partial satisfaction of these
semantics, each such <tt>U</tt> is <tt><ins>implicit</ins>
MoveConstructible</tt> and <tt>MoveAssignable</tt>, but is not
<tt>CopyConstructible</tt> nor <tt>CopyAssignable</tt>. The template parameter
<tt>T</tt> of <tt>unique_ptr</tt> may be an incomplete type.
</blockquote>
</li>

<li>
<p>
Change <sref ref="[util.smartptr.shared]"/>/2 as indicated:
</p>

<blockquote>
2 Specializations of <tt>shared_ptr</tt> shall be
<tt><ins>implicit</ins> CopyConstructible</tt>, <tt>CopyAssignable</tt>, and
<tt>LessThanComparable</tt>, [..]
</blockquote>
</li>

<li>
<p>
Change <sref ref="[util.smartptr.weak]"/>/2 as indicated:
</p>

<blockquote>
2 Specializations of <tt>weak_ptr</tt> shall be <tt><ins>implicit</ins>
CopyConstructible</tt> and <tt>CopyAssignable</tt>, allowing their use in
standard containers. The template parameter <tt>T</tt> of <tt>weak_ptr</tt> may
be an incomplete type.
</blockquote>
</li>

<li>
<p>
Change <sref ref="[iterator.iterators]"/>/2 as indicated: <i>[This fixes a
defect in the Iterator requirements. None of the usual algorithms accepting
iterators would be usable with iterators with explicit copy-constructors]</i>
</p>

<blockquote>
<p>
2 A type <tt>X</tt> satisfies the Iterator requirements if:
</p>

<ul>
<li>
<tt>X</tt> satisfies the <tt><ins>implicit</ins> CopyConstructible</tt>,
<tt>CopyAssignable</tt>, and <tt>Destructible</tt> requirements (20.2.1)
and lvalues of type <tt>X</tt> are swappable (20.2.2), and [..]
</li>
<li>...</li>
</ul>

</blockquote>

</li>

<li>
<p>
Change <sref ref="[auto.ptr]"/>/3 as indicated:
</p>

<blockquote>
3 [..] Instances of <tt>auto_ptr</tt> meet the requirements of
<tt><ins>implicit</ins> MoveConstructible</tt> and <tt>MoveAssignable</tt>, but
do not meet the requirements of <tt>CopyConstructible</tt> and
<tt>CopyAssignable</tt>. &mdash; <i>end note</i>]
</blockquote>
</li>

</ol>

</resolution>

</issue>
