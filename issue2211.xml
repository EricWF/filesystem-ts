<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2211" status="New">
<title>Replace ambiguous use of "Allocator" in container requirements</title>
<section><sref ref="[container.requirements.general]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>7 Nov 2012</date>

<discussion>

<p>
<sref ref="[container.requirements.general]"/>/7 says:
</p>
<blockquote><p>
All other constructors for these container types take an <tt>Allocator&amp;</tt> argument 
(<sref ref="[allocator.requirements]"/>), an allocator whose value type is the same as the
container's value type.
</p></blockquote>
<p>
This is a strange place to state the requirement on the allocator's
<tt>value_type</tt>, because the allocator is a property (and template
parameter) of the container type not of some of its constructors.
It's also unclear whether "<tt>Allocator&amp;</tt>" refers to the concept (as
implied by the cross-reference to the allocator requirements in Clause 17) 
or to the container's template parameter (as implied by the fact
it's shown as an lvalue-reference type.) I believe the latter is
intended, because those constructors can't take any model of the
allocator concept, they can only take the container's <tt>allocator_type</tt>.
<p/>
I think it would be clearer to move the value type requirement earlier
in the paragraph and to make it clear the constructor arguments are
the container's <tt>allocator_type</tt>. There is already a cross-reference to
the allocator requirements earlier in the paragraph, so it doesn't
need to be repeated in another place where it causes confusion.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3485.</p>

<ol>
<li><p>Edit <sref ref="[container.requirements.general]"/> paragraph 7:</p>

<blockquote>
<p>
Unless otherwise specified, all containers defined in this clause obtain memory using an allocator 
(see <sref ref="[allocator.requirements]"/>) <ins>and are instantiated with an allocator type whose 
value type is the same as the container's value type</ins>. Copy constructors for these container types obtain an 
allocator by calling <tt>allocator_traits&lt;allocator_type&gt;::select_on_container_copy_construction</tt> 
on their first parameters. Move constructors obtain an allocator by move construction from the allocator 
belonging to the container being moved. Such move construction of the allocator shall not exit via 
an exception. All other constructors for these container types take <del>an <tt>Allocator&amp;</tt> argument 
(<sref ref="[allocator.requirements]"/>), an allocator whose value type is the same as the container's value
type</del><ins>a <tt>const allocator_type&amp;</tt> argument</ins>. [<i>Note</i>: If an invocation of a 
constructor uses the default value of an optional allocator argument, then the <tt>Allocator</tt> type 
must support value initialization. &mdash; <i>end note</i>] A copy of this allocator is used for any
memory allocation performed, by these constructors and by all member functions, during the lifetime of each
container object or until the allocator is replaced. [&hellip;]
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
