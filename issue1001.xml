<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1001" status="NAD Concepts">
<title>Pointers, concepts and headers</title>
<section><sref ref="[library]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>10 Mar 2009</date>

<discussion>

<p><b>Addresses UK 78</b></p>

<p>
Related to <iref ref="1063"/>.
</p>

<p>
This is effectively an extension of LWG issue <iref ref="343"/>.
</p>
<p>
We know there is an increasing trend (encouraged by conformance testers and
some users) that each library header should supply no more than required to
satisfy the synopsis in the standard.  This is typically achieved by
breaking larger headers into smaller subsets, and judicious use of forward
declarations.
</p>
<p>
If we apply this policy to C++0x (per
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2800.pdf">N2800</a>)
it will be very surprising for
people using library algorithms over ranges defined by pointers that they
must <tt>#include &lt;iterator_concepts&gt;</tt> for their code to compile again.  That is
because pointers do not satisfy any of the iterator concepts without the
<tt>concept_map</tt> supplied in this header.
</p>
<p>
Therefore, I suggest we should require all library headers that make use of
iterator concepts are specifically required to <tt>#include &lt;iterator_concepts&gt;</tt>.
</p>
<p>
At a minimum, the list of headers would be: (assuming all are constrained by
concepts)
</p>
<blockquote><pre>
algorithm
array
deque
forward_list
initializer_list
iterator
locale
list
map
memory          // if <iref ref="1029"/> is adopted
memory_concepts
numeric
random
regex
set
string
tuple
unordered_map
unordered_set
utility
vector
</pre></blockquote>

<note>
Ganesh adds:
</note>

<blockquote>
<p>
The same problems exists for <tt>&lt;memory_concepts&gt;</tt> and
<tt>&lt;container_concepts&gt;</tt>.
</p>
<p>
In order to compile <tt>&lt;vector&gt;</tt> you just need the
definitions of the concepts in <tt>&lt;memory_concepts&gt;</tt>, the
concept maps defined there are not necessary. Yet, from the user point
of view, if the concept map template for <tt>AllocatableElement</tt> are
not in scope, <tt>&lt;vector&gt;</tt> is pretty useless. Same for
<tt>&lt;tuple&gt;</tt> and <tt>ConstructibleWithAllocator</tt>.
</p>
<p>
Similarly, <tt>&lt;queue&gt;</tt> is not very useful if the concept map
template for <tt>QueueLikeContainer</tt> is not in scope, although the
definition of concept alone is theoretically sufficient.
</p>
<p>
There's a pattern here: if a concept has concept maps "attached", they
should never be separated.
</p>
</blockquote>

<note>
Beman provided the proposed resolution for the May 2009 mailing. He 
comments:
</note>

<blockquote>

<p>Initially I tried to specify exactly what header should include what other 
headers. This was verbose, error prone, hard to maintain, and appeared to add 
little value compared to just stating the general rule.</p>

</blockquote>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Pete believes the proposed wording overconstrains implementers.
Instead of specifying the mechanism,
he prefers a solution that spells out what needs to be declared,
rather than how those declarations are to be provided,
e.g.,
</p>
<blockquote>
A C++ header shall provide the names
that are required to be defined in that header.
</blockquote>
<p>
Bill suggests approaching the wording from a programmer's perspective.
We may want to consider promising that certain widely-used headers
(e.g., the concept headers) are included when needed by other headers.
He feels, however, there is nothing broken now,
although we may want to consider "something nicer."
</p>
<p>
Move to Open status.
</p>

</blockquote>

<note>
2009-06-16 Beman updated the proposed resolution:
</note>

<blockquote>
  <ul>
    <li>The mechanism is no longer specified, as requested in Batavia.</li>
    <li>The footnote has been removed since it specified mechanism and also did 
    not reflect existing practice.</li>
    <li>A sentence was added that makes it clear that the existing practice is 
    permitted.</li>
  </ul>
</blockquote>

<note>
2009-07-15 Beman updated the proposed resolution:
</note>

<note>
2009-07-17 Beman updated the proposed resolution based on feedback from the LWG in Frankfurt:
</note>

<blockquote>
<ul>
<li>Strike two pieces of text considered unnecessary.</li>
<li>Change &quot;definitions&quot; to &quot;declarations and definitions&quot; in two places.</li>
<li>Wording tightened slightly.</li>
</ul>
</blockquote>

<note>
2009-07 Frankfurt:
</note>

<blockquote>
<p>
Revised Proposed Resolution:
</p>
<p>
A C++ header may include other C++ headers. A C++ header shall provide
the declarations and definitions that appear in its synopsis (3.2
[basic.def.odr]). A C++ header shown in its synopsis as including other
C++ headers shall provide the declarations and definitions that appear
in the synopses of those other headers.
</p>
<p>
Alisdair: Does this address the BSI comment?
</p>
<p>
Beman: There were several overlapping comments. I tried to handle them
all with one resolution.
</p>
<p>
Alisdair: I'd prefer to see this closed as NAD and have this resolution
be the subject of some other, new issue.
</p>
<p>
Move to NAD Concepts. Howard to open a new issue (<iref ref="1178"/>) in Ready state with the
Proposed Resolution above. Beman will write up a discussion for the new
issue.
</p>
</blockquote>

</discussion>

<resolution>
<p><i>Change <sref ref="[res.on.headers]"/>, Headers, paragraph 1, as indicated:</i></p>

<blockquote>

<p>
A C++ header may include other C++
headers.<del><sup>[footnote]</sup></del> <ins>A C++ header shall provide
the declarations and definitions that appear in its synopsis
(<sref ref="[basic.def.odr]"/>). A C++ header shown in its synopsis as including 
other C++ headers shall provide the same declarations and definitions as
if those other headers were included.</ins>
</p>

  <p><del><sup>[footnote]</sup> C++ headers must include a C++ header that contains 
  any needed definition (3.2).</del></p>
</blockquote>

</resolution>

</issue>
