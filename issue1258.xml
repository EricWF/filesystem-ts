<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1258" status="NAD Editorial">
<title>std::function Effects clause impossible to satisfy</title>
<section><sref ref="[func.wrap.func.mod]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>5 Nov 2009</date>

<discussion>
<p>
As of <sref ref="[func.wrap.func.mod]"/>/2+ we have the following
prototype description:
</p>

<blockquote><pre>
template&lt;class F, Allocator Alloc&gt;
  void assign(F, const Alloc&amp;);
</pre>
<blockquote>
<i>Effects:</i> <tt>function(f, a).swap(*this)</tt>
</blockquote>
</blockquote>

<p>
Two things: First the concept debris needs to be removed, second and
much more importantly, the effects clause is now impossible to satisfy,
because there is no constructor that would match the parameter sequence
(<tt>FunctionObject</tt>, <tt>Allocator</tt>) [plus the fact that no
<tt>f</tt> and no <tt>a</tt> is part of the signature]. The most
probable candidate is
</p>

<blockquote><pre>
template&lt;class F, class A&gt; function(allocator_arg_t, const A&amp;, F);
</pre></blockquote>

<p>
and the effects clause needs to be adapted to use this signature.
</p>

<note>
2009-11-13 Daniel brought wording up to date.
</note>

<note>
2009-11-15 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
2010-02-11 Moved to Tentatively NAD Editorial after 5 positive votes on
c++std-lib.  It was noted that this issue was in partial conflict with <iref
ref="1288"/>, and the two issues were merged in <iref ref="1288"/>.
</note>

<rationale>
<p>
Addressed by <iref ref="1288"/>.
</p>
</rationale>

</discussion>

<resolution>
<p>
Change in <sref ref="[func.wrap.func.mod]"/> the complete prototype description as
indicated
</p>
<note>
Question to
the editor: Shouldn't there a paragraph number in front of the Effects clause?
</note>

<blockquote><pre>
template&lt;class F, <del>Allocator Alloc</del><ins>class A</ins>>
  void assign(F <ins>f</ins>, const A<del>lloc</del>&amp; <ins>a</ins>);
</pre>
<blockquote>
<ins>3</ins> <i>Effects:</i> <tt>function(<del>f, a</del><ins>allocator_arg, a,
f</ins>).swap(*this)</tt>
</blockquote>
</blockquote>
</resolution>

</issue>
