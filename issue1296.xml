<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1296" status="NAD">
<title><tt>map</tt> and <tt>multimap value_compare</tt> overspecified</title>
<section><sref ref="[map]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>22 Dec 2009</date>

<discussion>
<p>
The container class templates <tt>map</tt> and <tt>multimap</tt> both contain a
nested type called <tt>value_compare</tt>, that is used to compare the
<tt>value_type pair</tt> elements, an adaptor of the user-supplied comparison
function-like object.
</p>

<p>
I believe these types are over-specified, as we require a distinct type for each
template, even though the allocator plays no part in the comparator, and
<tt>map</tt> and <tt>multimap value_compare</tt> classes could easily be shared.
 The benefits are similar to the SCARY iterator proposal (although on a much
smaller scale!) but unlike SCARY, this is not a QoI issue today but actively
prohibited.
</p>

<p>
If the <tt>value_compare</tt> classes were marked 'exposition only', a vendor
would be free to experiment with implementations that do not produce so many
template instantiations with negligible impact on conforming programs.  (There
is a minor risk that programs could no longer portably overload functions taking
<tt>value_compare</tt> types.  This scenario is extremely unlikely outside
conformance suites.)
</p>

<p>
(Note that there are no similar problems for unordered maps, nor any of the set
variants)
</p>

<note>
2010-01-31 Moved to Tentatively NAD after 5 positive votes on c++std-lib.
Rationale added below.
</note>

<rationale>
<p>
The <tt>value_compare</tt> specification is an unfortunate bit from the past
that we have to live with.  Fortunately vendors can work around the problems
mentioned in this issue.
</p>
</rationale>

</discussion>

<resolution>
<p>
p2 <sref ref="[map]"/>:
Above the declaration of class <tt>value_compare</tt> in the map synopsis, add:
</p>

<blockquote><pre>
template &lt;class Key, class T, class Compare = less&lt;Key&gt;,
          class Allocator = allocator&lt;pair&lt;const Key, T&gt; &gt; &gt;
class map {
public:
  // types:
  ...
  <ins>// exposition only.</ins>
  class value_compare
    : public binary_function&lt;value_type,value_type,bool&gt; {
    ...
</pre></blockquote>



<p>
p2 <sref ref="[multimap]"/>:
Above the declaration of class <tt>value_compare</tt> in the map synopsis, add:
</p>

<blockquote><pre>
template &lt;class Key, class T, class Compare = less&lt;Key&gt;,
          class Allocator = allocator&lt;pair&lt;const Key, T&gt; &gt; &gt;
class multimap {
public:
  // types:
  ...
  <ins>// exposition only.</ins>
  class value_compare
    : public binary_function&lt;value_type,value_type,bool&gt; {
    ...
</pre></blockquote>
</resolution>

</issue>
