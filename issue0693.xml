<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="693" status="CD1">
<title><code>std::bitset::all()</code> missing</title>
<section><sref ref="[template.bitset]"/></section>
<submitter>Martin Sebor</submitter>
<date>22 Jun 2007</date>

<discussion>
<p>
The  <code>bitset</code> class template  provides the  member function
<code>any()</code> to determine whether an  object of the type has any
bits  set, and  the member  function <code>none()</code>  to determine
whether all of an object's  bits are clear. However, the template does
not   provide  a   corresponding  function   to  discover   whether  a
<code>bitset</code>  object  has  all  its  bits  set.   While  it  is
possible,  even easy,  to  obtain this  information  by comparing  the
result of <code>count()</code>  with the result of <code>size()</code>
for  equality  (i.e.,  via  <code>b.count()  ==  b.size()</code>)  the
operation  is   less  efficient   than  a  member   function  designed
specifically  for that purpose  could be.   (<code>count()</code> must
count  all non-zero bits  in a  <code>bitset</code> a  word at  a time
while <code>all()</code> could stop counting as soon as it encountered
the first word with a zero bit).
</p>
</discussion>

<resolution>
<p>
Add  a declaration of the new  member function <code>all()</code> to the
defintion of the <code>bitset</code> template in <sref ref="[template.bitset]"/>, p1,
right above the declaration of <code>any()</code> as shown below:
</p>

<blockquote><pre>
bool operator!=(const bitset&lt;N&gt;&amp; rhs) const;
bool test(size_t pos) const;
<ins>bool all() const;</ins>
bool any() const;
bool none() const;
</pre></blockquote>

<p>
Add a description of the new member function to the end of <sref ref="[bitset.members]"/> with the following text:
</p>
<blockquote><p>
<code>bool all() const;</code>
</p>
<blockquote>
<i>Returns</i>: <code>count() == size()</code>.
</blockquote>
</blockquote>

<p>
In  addition,   change  the  description   of  <code>any()</code>  and
<code>none()</code>   for  consistency   with   <code>all()</code>  as
follows:
</p>
<blockquote><p>
<code>bool any() const;</code>
</p>
<blockquote>
<p>
<i>Returns</i>: <del><code>true</code> if any bit in <code>*this</code>
is one</del><ins><code>count() != 0</code></ins>.
</p>
</blockquote>
<p>
<code>bool none() const;</code>
</p>
<blockquote>
<p>
<i>Returns</i>: <del><code>true</code> if no bit in <code>*this</code>
is one</del><ins><code>count() == 0</code></ins>.
</p>
</blockquote>
</blockquote>
</resolution>

</issue>
