<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1117" status="Resolved">
<title><tt>tuple</tt> copy constructor</title>
<section><sref ref="[tuple.cnstr]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>23 May 2009</date>

<discussion>
<p>
The copy constructor for the <tt>tuple</tt> template is constrained.  This seems an
unusual strategy, as the copy constructor will be implicitly deleted if the
constraints are not met.  This is exactly the same effect as requesting an
<tt>=default;</tt> constructor.  The advantage of the latter is that it retains
triviality, and provides support for <tt>tuple</tt>s as literal types if issue
<iref ref="1116"/> is also accepted.
</p>
<p>
Actually, it might be worth checking with core if a constrained copy
constructor is treated as a constructor template, and as such does not
suppress the implicit generation of the copy constructor which would hide
the template in this case.
</p>

<note>
2009-05-27 Daniel adds:
</note>

<blockquote><p>
This would solve one half of the suggested changes in <iref ref="801"/>.
</p></blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
<del>NAD Editorial</del><ins>Resolved</ins>.  Solved by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2994.htm">N2994</a>.
</p></blockquote>
</discussion>

<resolution>
<p>
Change <sref ref="[tuple.tuple]"/> and <sref ref="[tuple.cnstr]"/> p4:
</p>

<blockquote><pre>
<del>requires CopyConstructible&lt;Types&gt;...</del> tuple(const tuple&amp;)<ins> = default</ins>;
</pre></blockquote>
</resolution>

</issue>
