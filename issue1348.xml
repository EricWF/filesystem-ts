<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1348" status="NAD">
<title>Exception safety of unspecified types</title>
<section><sref ref="[library]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-64</b></p>
<p>
There are a number of unspecified types used throughout
the library, such as the container iterators. Many of these
unspecified types have restrictions or expectations on
their behaviour in terms of exceptions. Are they permitted
or required to use exception specifications, more
specifically the new <tt>noexcept</tt> specification? For example,
if <tt>vector&lt;T>::iterator</tt> is implemented as a native pointer,
all its operations will have an (effective) <tt>noexcept</tt>
specification. If the implementation uses a class type to
implement this iterator, is it permitted or required to
support that same guarantee?
</p>

<note>
Resolution proposed by ballot comment
</note>
<p>
Clearly state the requirements for exception
specifications on all unspecified library types. For
example, all container iterator operations should
be conditionally <tt>noexcept</tt>, with the condition
matching the same operation applied to the
allocator's <tt>pointer_type</tt>, a certain subset of which
are already required not to throw.
</p>

<note>2011-03-24 Madrid meeting</note>

<p>Discussion:</p>
<p>Alisdair: Probably an NAD Future at least but could be NAD.
<p/>
Daniel K: Approach is not consistent with what we've decided with <tt>noexcept</tt>.
<p/>
Alisdair: Any objection to marking 1348 as NAD?
<p/>
No objections. 
</p>

</discussion>

<rationale><p>Standard is correct as written</p></rationale>
<resolution>
</resolution>

</issue>
