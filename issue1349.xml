<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1349" status="WP">
<title>[FCD] <tt>swap</tt> should not throw</title>
<section><sref ref="[library]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-65</b></p>
<p>
Nothrowing <tt>swap</tt> operations are key to many C++ idioms,
notably the common copy/swap idiom to provide the
strong exception safety guarantee.
</p>

<note>
Resolution proposed by ballot comment
</note>

<p>
Where possible, all library types should provide a
<tt>swap</tt> operation with an exception specification
guaranteeing no exception shall propagate.
Where <tt>noexcept(true)</tt> cannot be guaranteed to
not terminate the program, and the <tt>swap</tt> in
questions is a template, an exception specification
with the appropriate conditional expression could
be specified.
</p>

<note>2011-03-13: Daniel comments and drafts wording</note>

<p>During a survey of the library some main categories for
potential <tt>noexcept</tt> <tt>swap</tt> function could be isolated:</p>

<ol>
<li>Free <tt>swap</tt> functions that are specified in terms of already
<tt>noexcept</tt> <tt>swap</tt> member functions, like that of <tt>valarray</tt>.</li>

<li>Free <tt>swap</tt> of <tt>std::function</tt>, and member and free <tt>swap</tt> 
functions of stream buffers and streams where considered but rejected as good candidates, 
because of the danger to potentially impose requirements of existing implementations. 
These functions could be reconsidered as candidates in the future.</li>
</ol>

<p>Negative list:</p>

<ol>
<li>Algorithms related to swap, like <tt>iter_swap</tt>, have <em>not</em> been touched,
because there are no fundamental exceptions constraints on iterator operations in general
(only for specific types, like library container iterators)</li>
</ol>

<p>While evaluating the current state of <tt>swap</tt> functions 
of library components it was observed that several conditional <tt>noexcept</tt>
functions have turned into unconditional ones, e.g. in the
header <tt>&lt;utility&gt;</tt> synopsis:</p>

<blockquote><pre>
template&lt;class T&gt; void swap(T&amp; a, T&amp; b) noexcept;
</pre></blockquote>

<p>The suggested resolution shown below also attempts to fix
these cases.</p>

<note>2011-03-22 Daniel redrafts to satisfy new criteria for applying <tt>noexcept</tt>.
Parts resolved by N3263-v2 and D3267 are not added here.</note>

</discussion>

<resolution>
<ol>
<li><p>Edit <sref ref="[utility]"/> p. 2, header <tt>&lt;utility&gt;</tt> synopsis <em>and</em> 
<sref ref="[utility.swap]"/> before p. 1, as indicated (The intent is to fix an editorial
omission):</p>

<blockquote><pre>
template&lt;class T&gt; void swap(T&amp; a, T&amp; b) noexcept<ins>(<i>see below</i>)</ins>;
</pre></blockquote>
</li>

<li><p>Edit the prototype declaration in <sref ref="[pairs.pair]"/> before p. 34 as indicated (The intent 
is to fix an editorial omission):</p>

<blockquote><pre>
void swap(pair&amp; p) noexcept<ins>(<i>see below</i>)</ins>;
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[tuple.general]"/> p. 2 header <tt>&lt;tuple&gt;</tt> synopsis <em>and</em> 
<sref ref="[tuple.special]"/> before p. 1 as indicated (The intent is to fix an editorial omission):</p>

<blockquote><pre>
template &lt;class... Types&gt;
void swap(tuple&lt;Types...&gt;&amp; x, tuple&lt;Types...&gt;&amp; y) noexcept<ins>(<i>see below</i>)</ins>;
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[tuple.tuple]"/>, class template <tt>tuple</tt> synopsis <em>and</em>
<sref ref="[tuple.swap]"/> before p. 1 as indicated (The intent is to fix an editorial omission):</p>

<blockquote><pre>
void swap(tuple&amp;) noexcept<ins>(<i>see below</i>)</ins>;
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[memory.syn]"/> p. 1, header <tt>&lt;memory&gt;</tt> synopsis as indicated (The 
intent is to fix an editorial omission of the proposing paper N3195).</p>

<blockquote><pre>
template&lt;class T&gt; void swap(shared_ptr&lt;T&gt;&amp; a, shared_ptr&lt;T&gt;&amp; b) <ins>noexcept</ins>;
</pre></blockquote>
</li>

<li><p>Edit header <tt>&lt;valarray&gt;</tt> synopsis, <sref ref="[valarray.syn]"/> <em>and</em> 
<sref ref="[valarray.special]"/> before p. 1 as indicated 
<em>[Drafting comment: The corresponding member swap is already noexcept]</em>:</p>

<blockquote><pre>
template&lt;class T&gt; void swap(valarray&lt;T&gt;&amp;, valarray&lt;T&gt;&amp;) <ins>noexcept</ins>;
</pre></blockquote>
</li>

</ol>
</resolution>

</issue>
