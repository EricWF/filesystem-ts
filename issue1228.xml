<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1228" status="NAD">
<title>User-specialized nothrow type traits</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>7 Oct 2009</date>

<discussion>
<p>
According to p1 <sref ref="[meta.type.synop]"/>:
</p>

<blockquote>
The behavior of a program that adds specializations for any of the class
templates defined in this subclause is undefined unless otherwise
specified.
</blockquote>

<p>
I believe we should 'otherwise specify' for the nothrow traits, are
these are exactly the use cases where the end user actually has more
information than the compiler.
</p>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Moved to Open.  Definitely need to give the users the ability to ensure
that the traits give the right answers. Unsure we want to give them the
ability to say this in more than one way. Believes the noexcept proposal
already gives this.
</blockquote>

<note>
2010 Pittsburgh:  Moved to NAD, rationale added below.
</note>

</discussion>

<rationale>
<p>
We believe the solution offered by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html">N3050</a>
is superior.
</p>
</rationale>

<resolution>
<p>
Add the following comment:
</p>

<blockquote>
user specialization permitted to derive from <tt>std::true_type</tt> when the
operation is known not to throw.
</blockquote>

<p>
to the following traits in <sref ref="[meta.unary.prop]"/> Table 43 Type
property predicates.
</p>

<note>
This may require a new Comments column
</note>

<blockquote><pre>
has_nothrow_default_constructor
has_nothrow_copy_constructor
has_nothrow_assign
</pre></blockquote>
</resolution>

</issue>
