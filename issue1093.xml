<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1093" status="Resolved">
<title>Multiple definitions for <tt>random_shuffle</tt> algorithm</title>
<section><sref ref="[alg.random.shuffle]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>22 Mar 2009</date>

<discussion>

<p>
There are a couple of issues with the declaration of the <tt>random_shuffle</tt>
algorithm accepting a random number engine.
</p>

<ol style="list-style-type:lower-roman">
<li>
The Iterators must be shuffle iterators, yet this requirement is missing.
</li>
<li>
The <tt>RandomNumberEngine</tt> concept is now provided by the random number
library
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2836.pdf">n2836</a>)
and the placeholder should be removed.
</li>
</ol>

<note>
2009-05-02 Daniel adds:
</note>

<blockquote>
<p>
this issue completes adding necessary requirement to the
third new <tt>random_shuffle</tt> overload. The current suggestion is:
</p>

<blockquote><pre>
template&lt;RandomAccessIterator Iter, UniformRandomNumberGenerator Rand&gt;
requires ShuffleIterator&lt;Iter&gt;
void random_shuffle(Iter first, Iter last, Rand&amp;&amp; g);
</pre></blockquote>

<p>
IMO this is still insufficient and I suggest to add the requirement
</p>
<blockquote><pre>
Convertible&lt;Rand::result_type, Iter::difference_type&gt;
</pre></blockquote>
<p>
to the list (as the two other overloads already have).
</p>

<p>
Rationale:
</p>

<blockquote>
<p>
Its true that this third overload is somewhat different from the remaining
two. Nevertheless we know from <tt>UniformRandomNumberGenerator</tt>, that
it's <tt>result_type</tt> is an integral type and that it satisfies
<tt>UnsignedIntegralLike&lt;result_type&gt;</tt>.
</p>
<p>
To realize it's designated task, the algorithm has to invoke the
<tt>Callable</tt> aspect of <tt>g</tt> and needs to perform some algebra involving
it's <tt>min()/max()</tt> limits to compute another index value that
at this point is converted into <tt>Iter::difference_type</tt>. This is so,
because <sref ref="[random.access.iterators]"/> uses this type as argument
of it's algebraic operators. Alternatively consider the equivalent
iterator algorithms in <sref ref="[iterator.operations]"/> with the same result.
</p>
<p>
This argument leads us to the conclusion that we also need
<tt>Convertible&lt;Rand::result_type, Iter::difference_type&gt;</tt> here.
</p>
</blockquote>

</blockquote>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Alisdair notes that point (ii) has already been addressed.
</p>
<p>
We agree with the proposed resolution to point (i)
with Daniel's added requirement.
</p>
<p>
Move to Review.
</p>
</blockquote>

<note>
2009-06-05 Daniel updated proposed wording as recommended in Batavia.
</note>

<note>
2009-07-28 Alisdair adds:
</note>

<blockquote><p>
Revert to Open, with a note there is consensus on direction but the
wording needs updating to reflect removal of concepts.
</p></blockquote>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Leave Open, Walter to work on it.
</p></blockquote>

<note>
2010 Pittsburgh:  Moved to <del>NAD Editorial</del><ins>Resolved</ins>, addressed by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3056.pdf">N3056</a>.
</note>

</discussion>

<rationale>
<p>
Solved by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3056.pdf">N3056</a>.
</p>
</rationale>

<resolution>
<p>
Change in <sref ref="[algorithms.syn]"/> and <sref ref="[alg.random.shuffle]"/>:
</p>

<blockquote><pre>
<del>concept UniformRandomNumberGenerator&lt;typename Rand&gt; { }</del>
template&lt;RandomAccessIterator Iter, UniformRandomNumberGenerator Rand&gt;
  <ins>requires ShuffleIterator&lt;Iter&gt; &amp;&amp;
  Convertible&lt;Rand::result_type, Iter::difference_type&gt;</ins>
  void random_shuffle(Iter first, Iter last, Rand&amp;&amp; g);
</pre></blockquote>

</resolution>

</issue>
