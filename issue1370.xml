<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1370" status="Voting">
<title>[FCD] <tt>throw_with_nested</tt> should not use perfect forwarding</title>
<section><sref ref="[except.nested]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-84</b></p>
<p>
The <tt>throw_with_nested</tt> specification passes in its argument as
<tt>T&amp;&amp;</tt> (perfect forwarding pattern), but then discusses
requirements on <tt>T</tt> without taking into account that <tt>T</tt>
may be an lvalue-reference type. It is also not clear in the spec that
<tt>t</tt> is intended to be perfectly forwarded.
</p>

<note>
Resolution proposed by ballot comment
</note>
<p>
Patch [except.nested] p6-7 to match the intent with regards to
requirements on <tt>T</tt> and the use of
<tt>std::forward&lt;T&gt;(t)</tt>.
</p>

<note>
2010-10-24 Daniel adds:
</note>

<blockquote>
Accepting <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3144.html">n3144</a> would solve this issue.
</blockquote>

<note>2010-11-10 Batavia: LWG accepts Howard's updated wording with
corrected boo boos reported by Sebastian Gesemann and Pete Becker,
which is approved for Immediate adoption this meeting.</note>

</discussion>

<resolution> 
<p><i>Change 18.8.7 nested_exception [except.nested] as indicated:</i></p>
<blockquote>
  <pre>[[noreturn]] template &lt;class T&gt; void throw_with_nested(T&amp;&amp; t);
</pre>
  <blockquote>
    <p><ins>Let <tt>U</tt> be <tt>remove_reference&lt;T&gt;::type</tt> </ins></p>
    <p>6 <i>Requires:</i> <tt><del>T</del> <ins>U</ins></tt> shall be <tt>
    CopyConstructible</tt>. </p>
    <p>7 <i>Throws:</i> If <tt><del>T</del> <ins>U</ins></tt> is a non-union 
    class type not derived from <tt>nested_exception</tt>, an exception of 
    unspecified type that is publicly derived from both <tt><del>T</del> <ins>U</ins></tt> 
    and <tt>nested_exception</tt> <ins>and constructed from <tt>std::forward&lt;T&gt;(t)</tt></ins>, 
    otherwise <ins>throws</ins> <tt><ins>std::forward&lt;T&gt;(</ins>t<ins>)</ins></tt>.
    </p>
  </blockquote>
</blockquote>
</resolution>

</issue>
