<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2024" status="Tentatively Ready">
<title>Inconsistent implementation requirements for <tt>atomic&lt;<i>integral</i>&gt;</tt> and <tt>atomic&lt;T*&gt;</tt></title>
<section><sref ref="[atomics.types.generic]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>08 Dec 2010</date>

<discussion>
<p>
Paragraph 5 and 6 of <sref ref="[atomics.types.generic]"/> impose different requirements on implementations for
specializations of the <tt>atomic</tt> class template for integral types and for pointer types:
</p>
<blockquote><p>
5 The atomic integral specializations and the specialization <tt>atomic&lt;bool&gt;</tt> shall have standard layout. 
They shall each have a trivial default constructor and a trivial destructor. They shall each support aggregate
initialization syntax.
</p></blockquote>

<blockquote><p>
6 There are pointer partial specializations on the <tt>atomic</tt> class template. These specializations shall have 
trivial default constructors and trivial destructors.
</p></blockquote>

<p>
It looks like an oversight to me, that for pointer specializations the requirements for standard layout and
support for aggregate initialization syntax are omitted. In fact, this been confirmed by the 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3193.htm">N3193</a> proposal author. I suggest
to impose the same implementation requirements for pointer types as for integral types, this should not impose 
unrealistic requirements on implementations.
</p>

<note>2011-02-10 Reflector discussion</note>
<p>
Moved to Tentatively Ready after 5 votes.
</p>
</discussion>

<resolution>
<p>
The suggested wording changes are against the working draft N3225.
</p>

<ol>
<li>
<p>Change <sref ref="[atomics.types.generic]"/> p. 6 as indicated:</p>

<blockquote><p>
6 There are pointer partial specializations on the <tt>atomic</tt> class template. These specializations shall have 
<ins>standard layout,</ins> trivial default constructors<ins>,</ins> and trivial destructors. <ins> They shall each 
support aggregate initialization syntax.</ins>
</p></blockquote>

</li>
</ol>
</resolution>

</issue>
