<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2068" status="New">
<title><tt>std::pair</tt> not C++03-compatible with defaulted copy c'tor</title>
<section><sref ref="[pairs.pair]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>18 Jun 2011</date>

<discussion>
<p>
The specification of the copy semantics of the C++03 version of <tt>std::pair</tt>
is defined by the class synopsis in [lib.pairs]:
</p>
<blockquote><pre>
template &lt;class T1, class T2&gt;
struct pair {
  typedef T1 first_type;
  typedef T2 second_type;

  T1 first;
  T2 second;
  pair();
  pair(const T1&amp; x, const T2&amp; y);
  template&lt;class U, class V&gt; pair(const pair&lt;U, V&gt; &amp;p);
};
</pre></blockquote>
<p>
The effect of this specification is, that the copy constructor is compiler-declared
with the proper form depending on the contained member types. In particular, the
instantiation of <tt>pair</tt> is well-formed with an element type that has a
copy constructor with non-const first parameter type like specialzations of <tt>auto_ptr</tt>
or any user-defined type like the following one:
</p>
<blockquote><pre>
struct A {
  A(A&amp;){}
};
</pre></blockquote>
<p>
In contrast to container types which require <tt>CopyConstructible</tt> value types, the C++03 <tt>pair</tt> 
does support these, albeit unusual, element types.
<p/>
The FDIS version of the <tt>std::pair</tt> specification does specify the same semantics by 
defaulting the copy and move constructor in <sref ref="[pairs.pair]"/>:
</p>
<blockquote><pre>
template &lt;class T1, class T2&gt;
struct pair {
  typedef T1 first_type;
  typedef T2 second_type;

  T1 first;
  T2 second;
  <span style="color:#C80000">pair(const pair&amp;) = default;</span>
  <span style="color:#C80000">pair(pair&amp;&amp;) = default;</span>
  pair();
  [&hellip;]
};
</pre></blockquote>
<p>
But according to the current core rules this makes the instantiation of e.g. <tt>std::pair&lt;A, int&gt;</tt>
ill-formed, because of the <tt>const</tt> mismatch of the compiler-declared form of the copy constructor
with that of the defaulted declaration.
<p/>
Unfortunately there seems to be no simple library solution for this problem. If the defaulted declarations
were removed, both copy c'tor and move c'tor would be <b>deleted</b>, because there exist user-declared
copy assignment and move assignment operators in the FDIS. But these operations need to be user-defined 
to realize the wanted semantics of these operations for element types that are reference types. If core
rules would not be changed to fix that, I see the following options:
</p>
<ol>
<li>Intentionally decide to break the support for element types with non-const copy c'tors in <tt>pair</tt>.</li>
<li>User-declare both copy and move ctor to at least support the instantiation of the <tt>pair</tt> specializations, 
but this would still not allow to copy them by the copy constructor.</li>
<li>User-declare both the const and non-const copy ctors, the move ctor, and additionally the non-const copy assignment
operator to support the instantiation of the <tt>pair</tt> specializations and of these members. This would 
support all element types as it did in C++03, but all copy&#47;move members would be non-trivial.</li>
<li>Intentionally decide to give up support for element types that are references for <tt>pair</tt>, but
still keep the allocator support with the effect of removing all declarations of the special
copy&#47;move members. User code that needs to use <tt>tuple</tt> instead. But this would be a rather
drastic step requiring further corrections of the draft, e.g. a change of the signature of the algorithm
<tt>minmax</tt> (not the overload with the <tt>initializer_list</tt>) with a different return type.</li>
</ol>
<p>
This problem does <b>not</b> extend as backward-compatibility problem to <tt>tuple</tt>, because the TR1 
specification did explicitly declare copy constructor and copy assignment operator via the &quot;normal&quot; 
form:
</p>
<blockquote><pre>
tuple(const tuple&amp;);
tuple&amp; operator=(const tuple&amp;);
</pre></blockquote>
<p>
</p>
</discussion>

<resolution>
</resolution>

</issue>
