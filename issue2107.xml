<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2107" status="NAD">
<title>Some iterator category should guarantee the lifetime of references</title>
<section><sref ref="[iterator.requirements]"/></section>
<submitter>Jeffrey Yasskin</submitter>
<date>21 Nov 2011</date>

<discussion>

<p>
Many iterators guarantee that references and pointers returned from
their methods will outlive the iterator itself. Other useful iterators
can't guarantee this, leading to the rule in <sref ref="[iterator.requirements]"/> 
p9 that "Destruction of an iterator may invalidate pointers and references 
previously obtained from that iterator."
<p/>
Some algorithms can take advantage of long-lived references by
returning them, while they can adapt to short-lived references by
returning by value instead. However, there doesn't seem to be a way in
the standard to distinguish between these two types of iterators.
<p/>
The <tt>ForwardIterator</tt> requirements come close by saying "If <tt>a</tt> and <tt>b</tt> are
both dereferenceable, then <tt>a == b</tt> if and only if <tt>*a</tt> and <tt>*b</tt> are bound
to the same object." (<sref ref="[forward.iterators]"/> p6) However, there are some
subtle ways to satisfy this rule and still return a short-lived reference, meaning 
algorithms can't be guaranteed that <tt>forward_iterator_tag</tt> will imply 
long-lived references.
<p/>
On the other hand, defect <iref ref="198"/>, which added the invalidation wording
to iterator.requirements.general, refers to iterators with short-lived references 
being used as arguments to reverse_iterator, which requires <tt>BidirectionalIterator</tt>s. 
If <tt>ForwardIterator</tt> required long-lived references, this would be impossible.
<p/>
Either <tt>ForwardIterator</tt> should be clarified to require long-lived
references, or a new category should be added that does.
<p/>
See also the discussion around c++std-lib-31477.
<p/>
Daniel: Related to this issue is that when applying <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3066.html">N3066</a>
we unintentionally lost some forward iterator requirements from C++03, where we 
had the post-conditions <tt>a == X(a)</tt> of <tt>X(a)</tt>, and <tt>u == a</tt> 
of any copy operation from <tt>a</tt> to <tt>u</tt>. This wording must be restored as well.
</p>

<note>2012, Kona</note>
<p>
Move to NAD.
</p>
<p>
This issue affects only Input Iterators, as all other categories are required to return
a native reference, and are not (currently) allowed to return proxies.  The issue with
Input Iterators is known, and has been present since the original standard.  Any change
in this regard would be an extension requiring a more substantial paper than treatment
as a simple issue.
</p>

</discussion>

<resolution>
</resolution>

</issue>
