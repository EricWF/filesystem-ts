<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1197" status="WP">
<title>Can unordered containers have <tt>bucket_count() == 0</tt>?</title>
<section><sref ref="[unord.req]"/></section>
<submitter>Howard Hinnant</submitter>
<date>24 Aug 2009</date>

<discussion>
<p>
Table 97 "Unordered associative container requirements" in
<sref ref="[unord.req]"/> says:
</p>

<blockquote>
<table border="1">
<caption>Table 97 &mdash; Unordered associative container requirements
(in addition to container)</caption>

<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion/note pre-/post-condition</th>
<th>Complexity</th>
</tr>

<tr>
<td><tt>b.bucket(k)</tt></td>
<td><tt>size_type</tt></td>
<td>Returns the index of the bucket in which elements with keys 
equivalent to <tt>k</tt> would be found, 
if any such element existed. 
Post: the return value shall be 
in the range <tt>[0, 
b.bucket_count())</tt>.</td>
<td>Constant</td>
</tr>

</table>
</blockquote>

<p>
What should <tt>b.bucket(k)</tt> return if <tt>b.bucket_count() == 0</tt>?
</p>

<p>
I believe allowing <tt>b.bucket_count() == 0</tt> is important.  It is a
very reasonable post-condition of the default constructor, or of a moved-from
container.
</p>

<p>
I can think of several reasonable results from <tt>b.bucket(k)</tt> when
<tt>b.bucket_count() == 0</tt>:
</p>

<ol>
<li>
Return 0.
</li>
<li>
Return <tt>numeric_limits&lt;size_type&gt;::max()</tt>.
</li>
<li>
Throw a <tt>domain_error</tt>.
</li>
<li>
Requires: <tt>b.bucket_count() != 0</tt>.
</li>
</ol>

<note>
2009-08-26 Daniel adds:
</note>

<blockquote>
<p>
A forth choice would be to add the pre-condition "<tt>b.bucket_count() != 0</tt>"
and thus imply undefined behavior if this is violated.
</p>

<note>
Howard:  I like this option too, added to the list.
</note>

<p>
Further on here my own favorite solution (rationale see below):
</p>

<p><b>Suggested resolution:</b></p>

<p>
[Rationale: I suggest to follow choice (1). The main reason is
that all associative container functions which take a key argument,
are basically free of pre-conditions and non-disrupting, therefore
excluding choices (3) and (4). Option (2) seems a bit unexpected
to me. It would be more natural, if several similar functions
would exist which would also justify the existence of a symbolic
constant like npos for this situation. The value 0 is both simple
and consistent, it has exactly the same role as a past-the-end
iterator value. A typical use-case is:
</p>

<blockquote><pre>
size_type pos = m.bucket(key);
if (pos != m.bucket_count()) {
 ...
} else {
 ...
}
</pre></blockquote>

<p>&mdash; end Rationale]</p>

<p>
- Change Table 97 in <sref ref="[unord.req]"/> as follows (Row b.bucket(k), Column "Assertion/..."):
</p>

<blockquote>
<table border="1">
<caption>Table 97 &mdash; Unordered associative container requirements
(in addition to container)</caption>

<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion/note pre-/post-condition</th>
<th>Complexity</th>
</tr>

<tr>
<td><tt>b.bucket(k)</tt></td>
<td><tt>size_type</tt></td>
<td>Returns the index of the bucket in which elements with keys 
equivalent to <tt>k</tt> would be found, 
if any such element existed. 
Post: <ins>if b.bucket_count() != 0, </ins>the return value shall be 
in the range <tt>[0, 
b.bucket_count())</tt><ins>, otherwise 0</ins>.</td>
<td>Constant</td>
</tr>

</table>
</blockquote>

</blockquote>

<note>
2010-01-25 Choice 4 put into proposed resolution section.
</note>

<note>
2010-01-31 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<p>
Change Table 97 in <sref ref="[unord.req]"/> as follows (Row b.bucket(k), Column
"Assertion/..."):
</p>

<blockquote>
<table border="1">
<caption>Table 97 &mdash; Unordered associative container requirements
(in addition to container)</caption>

<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion/note pre-/post-condition</th>
<th>Complexity</th>
</tr>

<tr>
<td><tt>b.bucket(k)</tt></td>
<td><tt>size_type</tt></td>
<td><ins>Pre:  <tt>b.bucket_count() &gt; 0</tt></ins> Returns the index of the
bucket in which elements with keys equivalent to <tt>k</tt> would be found, if
any such element existed. Post: the return value shall be in the range <tt>[0,
b.bucket_count())</tt>.</td>
<td>Constant</td>
</tr>

</table>
</blockquote>

</resolution>

</issue>
