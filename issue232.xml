<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="232" status="CD1">
<title>&quot;depends&quot; poorly defined in 17.4.3.1</title>
<section><sref ref="[reserved.names]"/></section>
<submitter>Peter Dimov</submitter>
<date>18 Apr 2000</date>

<discussion>
<p>17.4.3.1/1 uses the term &quot;depends&quot; to limit the set of allowed
specializations of standard templates to those that &quot;depend on a
user-defined name of external linkage.&quot;</p>
<p>This term, however, is not adequately defined, making it possible to
construct a specialization that is, I believe, technically legal according to
17.4.3.1/1, but that specializes a standard template for a built-in type such as
'int'.</p>
<p>The following code demonstrates the problem:</p>
<blockquote>
  <pre>#include &lt;algorithm&gt;</pre>
  <pre>template&lt;class T&gt; struct X
{
 typedef T type;
};</pre>
  <pre>namespace std
{
 template&lt;&gt; void swap(::X&lt;int&gt;::type&amp; i, ::X&lt;int&gt;::type&amp; j);
}</pre>
</blockquote>
</discussion>

<resolution>
<p>Change &quot;user-defined name&quot; to &quot;user-defined
type&quot;.</p>
</resolution>

<rationale>
<p>This terminology is used in section 2.5.2 and 4.1.1 of <i>The C++
Programming Language</i>.  It disallows the example in the issue,
since the underlying type itself is not user-defined.  The only
possible problem I can see is for non-type templates, but there's no
possible way for a user to come up with a specialization for bitset,
for example, that might not have already been specialized by the
implementor?</p>

<note>Toronto: this may be related to issue <iref ref="120"/>.</note>

<note>post-Toronto: Judy provided the above proposed resolution and
rationale.</note>
</rationale>

</issue>
