<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1056" status="NAD">
<title>Must all Engines and Distributions be Streamable?</title>
<section><sref ref="[rand]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>12 Mar 2009</date>

<!-- <sref ref="[rand.concept.eng]"/> and <sref ref="[rand.concept.dist]"/> -->

<discussion>

<p>
Both the concepts <tt>RandomNumberEngine</tt> and <tt>RandomNumberDistribution</tt> have
requirements to be <tt>InputStreamable</tt> and <tt>OutputStreamable</tt>.
</p>
<p>
I have no problems leaving the WP in an inconsistent state on the best-faith
assumption these concepts will be provided later, however disagree with the
proposers that these constraints are not separable, orthogonal to the basic
concepts of generating random number distributions.
</p>
<p>
These constraints should be dropped, and applied to specific algorithms as
needed.
</p>
<p>
If a more refined concept (certainly deemed useful by the proposers) is
proposed there is no objection, but the basic concept should not require
persistence via streaming.
</p>

<note>
Batavia (2009-05):
</note>
<blockquote>
Move to Open.
</blockquote>

<note>
2009-05-31 Alisdair adds:
</note>

<blockquote>
<p>
Working on constraining the stream iterators, I have a few more observations
to make on the concepts proposed while constraining the random number
facility.
</p>
<p>
While I still believe the concerns are orthogonal, I don't believe the
existing constraints go far enough either!  The goal we want to achieve is
not that a <tt>RandomNumberEngine</tt> / <tt>RandomNumberDistribution</tt> supports the stream
operators, but that it is <tt>Serializable</tt>.  I.e. there is a relationship
between the insert and extract operations that guarantees to restore the
state of the original object.  This implies a coupling of the concepts
together in a broader concept (<tt>Serializable</tt>) with at least one axiom to
assert the semantics.
</p>
<p>
One problem is that <tt>istream</tt> and <tt>ostream</tt> may be fundamentally different
types, although we can hook a relation if we are prepared to drop down to
the <tt>char</tt> type and <tt>char_traits</tt> template parameters.  Doing so ties us to a
form of serialization that demands implementation via the std iostreams
framework, which seems overly prescriptive.  I believe the goal is generally
to support serialization without regard to how it is expressed - although
this is getting even more inventive in terms of concepts we do not have
today.
</p>
</blockquote>

<note>
2009-11-03 Alisdair adds:
</note>

<blockquote>
<p>
I can't find the record in the wiki minutes, but it was agreed at both
Frankfurt and Santa Cruz that this issue is NAD.
</p>
<p>
The agreement in SC was that I would provide you with the rationale (see
below) to include when moving to NAD.
</p>
</blockquote>

<note>
2009-11-03 Howard adds:
</note>

<blockquote>
Moved to Tentatively NAD after 5 positive votes on c++std-lib.
</blockquote>
</discussion>

<resolution>
</resolution>

<rationale>
<p>
The issue suggests a more refined concept should be used if we want to
require streaming, to separate concerns from the basic
<tt>RandomNumberEngine</tt> behaviour.  In Frankfurt it was observed
that <tt>RandomNumberEngine</tt> <em>is</em> that more refined concept,
and the basic concept used in the framework is
<tt>UniformRandomNumberGenerator</tt>, which it refines.
</p>

<p>
We concur, and expect this to have no repurcussions re-writing this
clause now concepts are removed.
</p>
</rationale>

</issue>
