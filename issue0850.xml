<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="850" status="CD1">
<title>Should <tt>shrink_to_fit</tt> apply to <tt>std::deque</tt>?</title>
<section><sref ref="[deque.capacity]"/></section>
<submitter>Niels Dekker</submitter>
<date>5 Jun 2008</date>

<discussion>
<p>
Issue <iref ref="755"/> added a <tt>shrink_to_fit</tt> function to <tt>std::vector</tt> and <tt>std::string</tt>.
It did not yet deal with <tt>std::deque</tt>, because of the fundamental
difference between <tt>std::deque</tt> and the other two container types. The
need for <tt>std::deque</tt> may seem less evident, because one might think that
for this container, the overhead is a small map, and some number of
blocks that's bounded by a small constant.
</p>
<p>
The container overhead can in fact be arbitrarily large (i.e. is not
necessarily O(N) where N is the number of elements currently held by the
<tt>deque</tt>).  As Bill Plauger noted in a reflector message, unless the map of
block pointers is shrunk, it must hold at least maxN&frasl;B pointers where
maxN is the maximum of N over the lifetime of the <tt>deque</tt> since its
creation.  This is independent of how the map is implemented
(<tt>vector</tt>-like circular buffer and all), and maxN bears no relation to N,
the number of elements it currently holds.
</p>
<p>
Herv&eacute; Br&ouml;nnimann reports a situation where a <tt>deque</tt> of requests grew very
large due to some temporary backup (the front request hanging), and the
map of the <tt>deque</tt> grew quite large before getting back to normal.  Just
to put some color on it, assuming a <tt>deque</tt> with 1K pointer elements in
steady regime, that held, at some point in its lifetime, maxN=10M
pointers, with one block holding 128 elements, the spine must be at
least (maxN &frasl; 128), in that case 100K.   In that case, shrink-to-fit
would allow to reuse about 100K which would otherwise never be reclaimed
in the lifetime of the <tt>deque</tt>.
</p>
<p>
An added bonus would be that it <em>allows</em> implementations to hang on to
empty blocks at the end (but does not care if they do or not).  A
<tt>shrink_to_fit</tt> would take care of both shrinks, and guarantee that at
most O(B) space is used in addition to the storage to hold the N
elements and the N&frasl;B block pointers.
</p>
</discussion>

<resolution>
<p>
To class template <tt>deque</tt> <sref ref="[deque]"/> synopsis, add:
</p>
<blockquote><pre>
void shrink_to_fit();
</pre></blockquote>

<p>
To deque capacity <sref ref="[deque.capacity]"/>, add:
</p>
<blockquote><pre>
void shrink_to_fit();
</pre>

<blockquote><p>
<i>Remarks:</i> <tt>shrink_to_fit</tt> is a non-binding request to reduce memory
use. [<i>Note:</i> The request is non-binding to allow latitude for
implementation-specific optimizations. &mdash; <i>end note</i>]
</p></blockquote>
</blockquote>
</resolution>

</issue>
