<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2096" status="New">
<title>Incorrect constraints of <tt>future::get</tt> in regard to <tt>MoveAssignable</tt></title>
<section><sref ref="[futures.unique_future]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>2 Nov 2011</date>

<discussion>

<p>
<sref ref="[futures.unique_future]"/> paragraph 15 says the following:
</p>
<blockquote><pre>
R future::get();
</pre></blockquote>
<p>
&hellip;
<p/>
-15- <i>Returns</i>:
</p>
<ul>
<li>
<p><tt>future::get()</tt> returns the value stored in the object’s shared state. If the type of the value is
<tt>MoveAssignable</tt> the returned value is moved, otherwise it is copied.
<p/>
&hellip;
</p>
</li>
</ul>
<p>
There are some problems with the description:
<p/>
"If the type of the value is <tt>MoveAssignable</tt> the returned value is moved, otherwise it is copied."
</p>
<ol>
<li>It seems to impose unrealistic constraints on implementations, because how could an implementor 
recognize whether a user-defined type satisfies the semantics of <tt>MoveAssignable</tt>? This should be
based solely on a pure expression-based requirement, if this is an requirement for implementations.
</li>
<li>
Reducing <tt>MoveAssignable</tt> to the plain expression part <tt>std::is_move_assignable</tt> 
would solvs (1), but raises another question, namely why a <em>move-assignment</em> should be relevant
for a function return based on the value stored in the future state? We would better fall back to
<tt>std::is_move_constructible</tt> instead.
</li>
<li><p>The last criticism I have is about the part
<p/>
"the returned value is moved, otherwise it is copied"
<p/>
because an implementation won't be able to recognize what the user-defined type 
will do during an expression that is prepared by the implementation. I think the 
wording is intended to <em>allow</em> a move by seeding with an rvalue expression via
<tt>std::move</tt> (or equivalent), else the result will be an effective
copy construction.
</p>
</li>
</ol>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<p>Change <sref ref="[futures.unique_future]"/> paragraph 15 as indicated:</p>

<blockquote><pre>
R future::get();
</pre></blockquote>
<p>
&hellip;
<p/>
-15- <i>Returns</i>:
</p>
<ul>
<li>
<p><tt>future::get()</tt> returns the value <ins><tt>v</tt></ins> stored in the object’s shared 
state <ins>as <tt>std::move(v)</tt></ins>. <del>If the type of the value is <tt>MoveAssignable</tt> 
the returned value is moved, otherwise it is copied.</del>
<p/>
&hellip;
</p>
</li>
</ul>

</resolution>

</issue>
