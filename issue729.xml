<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="729" status="NAD">
<title>Problem in [rand.req.eng]/3</title>
<section><sref ref="[rand.req.eng]"/></section>
<submitter>Stephan Tolksdorf</submitter>
<date>21 Sep 2007</date>

<discussion>
<p>
The 3rd table row in <sref ref="[rand.req.eng]"/>/3 requires random number engines to accept any 
arithmetic type as a seed, which is then casted to the engine's <tt>result_type</tt> and subsequently 
used for seeding the state of the engine. The requirement stated as "Creates an engine with 
initial state determined by <tt>static_cast&lt;X::result_type&gt;(s)</tt>" forces random number engines 
to either use a seeding method that completely depends on the <tt>result_type</tt> (see the discussion 
of seeding for the <tt>mersenne_twister_engine</tt> in point T2 above) or at least to throw away "bits 
of randomness" in the seed value if the <tt>result_type</tt> is smaller than the seed type. This seems 
to be inappropriate for many modern random number generators, in particular F2-linear or 
cryptographic ones, which operate on an internal bit array that in principle is independent of the 
type of numbers returned.
</p>

<p>
<b>Posible resolution:</b> I propose to change the wording to a version similar to "Creates an 
engine with initial state determined by <tt>static_cast&lt;UintType&gt;(s)</tt>, where <tt>UintType</tt> is an 
implementation specific unsigned integer type."
</p>

<p>
Additionally, the definition of s in <sref ref="[rand.req.eng]"/>/1 c) could be restricted to unsigned integer types.
</p>

<p>
Similarly, the type of the seed in <sref ref="[rand.req.adapt]"/>/3 e) could be left unspecified.
</p>

<p>
See <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf">N2424</a>
for further discussion.
</p>

<note>
Stephan Tolksdorf adds pre-Bellevue:
</note>

<blockquote>
<p>
In reply to the discussion in
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf">N2424</a>
regarding this issue:
</p>
<p>
The descriptions of all engines and engine adaptors given in sections
<sref ref="[rand.eng]"/> and <sref ref="[rand.adapt]"/> already specify the concrete
types of the integer arguments for seeding. Hence, relaxing the general
requirement in <sref ref="[rand.req.eng]"/> would not affect portability and
reproducibility of the standard library. Furthermore, it is not clear to
me what exactly the guarantee "with initial state determined by
<tt>static_cast&lt;X::result_type&gt;(s)</tt>" is useful for. On the other hand,
relaxing the requirement would allow developers to implement  other
random number engines that do not have to cast all arithmetic seed
arguments to their result_types.
</p>
</blockquote>

<note>
Bellevue:
</note>

<blockquote>
Propose close NAD for the reasons given in N2424.
</blockquote>


</discussion>

<resolution>
<p>
See <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf">N2424</a>
for further discussion.
</p>

<note>
Stephan Tolksdorf adds pre-Bellevue:
</note>

<blockquote>
<p>
Change row 3 of table 105 "Random number engine requirements" in <sref ref="[rand.req.eng]"/>/3
</p>

<blockquote>
Creates an engine with initial state determined by
<tt><del>static_cast&lt;X::result_type&gt;(</del>s<del>)</del></tt>
</blockquote>

<p>
Similarly, change <sref ref="[rand.req.adapt]"/>/3 e)
</p>

<blockquote>
When <tt>X::X</tt> is invoked with <del>an <tt>X::result_type</tt></del> value <tt>s</tt>
<ins>of arithmetic type (3.9.1)</ins>, ...
</blockquote>

</blockquote>

</resolution>

</issue>
