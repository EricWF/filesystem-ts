<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="893" status="C++11">
<title><tt>std::mutex</tt> issue</title>
<section><sref ref="[thread.mutex.class]"/></section>
<submitter>Peter Dimov</submitter>
<date>15 Sep 2008</date>

<discussion>
<p>
<sref ref="[thread.mutex.class]"/>/27 (in
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf">N2723</a>)
says that the behavior is undefined if:
</p>
<ul>
<li>a thread that owns a <tt>mutex</tt> object calls <tt>lock()</tt> or
<tt>try_lock()</tt> on that object</li>
</ul>
<p>
I don't believe that this is right. Calling <tt>lock()</tt> or <tt>try_lock()</tt> on a
locked <tt>mutex</tt> is well defined in the general case. <tt>try_lock()</tt> is required
to fail and return <tt>false</tt>. <tt>lock()</tt> is required to either throw an
exception (and is allowed to do so if it detects deadlock) or to block
until the <tt>mutex</tt> is free. These general requirements apply regardless of
the current owner of the <tt>mutex</tt>; they should apply even if it's owned by
the current thread.
</p>
<p>
Making double <tt>lock()</tt> undefined behavior probably can be justified (even
though I'd still disagree with the justification), but <tt>try_lock()</tt> on a
locked <tt>mutex</tt> must fail.
</p>

<note>
Summit:
</note>
<blockquote>
<p>
Move to open. Proposed resolution:
</p>
<ul>
<li>
In <sref ref="[thread.mutex.requirements]"/> paragraph 12, change the error
condition for <tt>resource_deadlock_would_occur</tt> to: "if the implementation
detects that a deadlock would occur"
</li>
<li>
Strike <sref ref="[thread.mutex.class]"/> paragraph 3 bullet 2 "a thread that owns a mutex object
calls <tt>lock()</tt> or <tt>try_lock()</tt> on that object, or"
</li>
</ul>
</blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote><p>
Move to Review. Alisdair to provide note.
</p></blockquote>

<note>
2009-07-31 Alisdair provided note.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Moved to Ready.
</p></blockquote>

<note>
2009-11-18 Peter Opens:
</note>

<blockquote>
<p>
I don't believe that the proposed note:
</p>

<blockquote><p>
[<i>Note:</i> a program may deadlock if the thread that owns a <tt>mutex</tt>
object calls <tt>lock()</tt> or <tt>try_lock()</tt> on that object. If the program can
detect the deadlock, a <tt>resource_deadlock_would_occur</tt> error condition may
be observed. &mdash; <i>end note</i>]
</p></blockquote>

<p>
is entirely correct. "or <tt>try_lock()</tt>" should be removed, because
<tt>try_lock</tt> is non-blocking and doesn't deadlock; it just returns
<tt>false</tt> when it fails to lock the mutex.
</p>

<note>
Howard: I've set to Open and updated the wording per Peter's suggestion.
</note>

</blockquote>

<note>
2009-11-18 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>
<p>
In <sref ref="[thread.mutex.requirements]"/> paragraph 12 change:
</p>

<blockquote>
<ul>
<li>...</li>
<li>
<tt>resource_deadlock_would_occur</tt> -- if the <del>current thread already owns the mutex and is able 
to detect it</del> <ins>implementation detects that a deadlock would occur</ins>.
</li>
<li>...</li>
</ul>
</blockquote>

<p>
Strike <sref ref="[thread.mutex.class]"/> paragraph 3 bullet 2:
</p>
<blockquote>
<p>
-3- The behavior of a program is undefined if:
</p>
<ul>
<li>...</li>
<li>
<del>a thread that owns a <tt>mutex</tt> object calls <tt>lock()</tt> or <tt>try_lock()</tt> on that object, or</del>
</li>
<li>...</li>
</ul>
</blockquote>

<p>
Add the following note after p3 <sref ref="[thread.mutex.class]"/>
</p>

<blockquote><p>
[<i>Note:</i> a program may deadlock if the thread that owns a <tt>mutex</tt>
object calls <tt>lock()</tt> on that object. If the implementation can detect the
deadlock, a <tt>resource_deadlock_would_occur</tt> error condition may be
observed. &mdash; <i>end note</i>]
</p></blockquote>

</resolution>

</issue>
