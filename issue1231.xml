<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1231" status="WP">
<title><tt>weak_ptr</tt> comparisons incompletely resolved</title>
<section><sref ref="[util.smartptr.weak.obs]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>10 Oct 2009</date>

<discussion>
<p>
The
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf">n2637</a>
paper suggested several updates of the ordering semantics of
<tt>shared_ptr</tt>
and <tt>weak_ptr</tt>, among those the explicit comparison operators of <tt>weak_ptr</tt> were
removed/deleted, instead a corresponding functor <tt>owner_less</tt> was added.
The problem
is that
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf">n2637</a>
did not clearly enough specify, how the previous wording
parts describing
the comparison semantics of <tt>weak_ptr</tt> should be removed.
</p>

<note>
2009-11-06 Howard adds:
</note>

<blockquote>
Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</blockquote>

</discussion>

<resolution>
<ol>
<li>
<p>
Change <sref ref="[util.smartptr.weak]"/>/2 as described, the intention is to fix
the now no longer valid
requirement that <tt>weak_ptr</tt> is <tt>LessComparable</tt> [Note the deleted comma]:
</p>

<blockquote>
Specializations of <tt>weak_ptr</tt> shall be <tt>CopyConstructible</tt><del>,</del>
<ins>and</ins> <tt>CopyAssignable</tt>,
<del>and <tt>LessThanComparable</tt>,</del> allowing their use in standard containers.
</blockquote>
</li>

<li>
<p>
In <sref ref="[util.smartptr.weak.obs]"/> remove the paragraphs 9-11 including prototype:
</p>

<blockquote>
<del>template&lt;class T, class U&gt; bool operator&lt;(const weak_ptr&lt;T&gt;&amp; a, const weak_ptr&lt;U&gt;&amp; b);</del>

<p>
<del><i>Returns:</i> an unspecified value such that</del>
</p>
<ul>
<li>
<del><tt>operator&lt;</tt> is a strict weak ordering as described in 25.4;</del>
</li>
<li>
<del>under the equivalence relation defined by <tt>operator&lt;</tt>, <tt>!(a
&lt; b) &amp;&amp; !(b &lt; a)</tt>, two <tt>weak_ptr</tt> instances are
equivalent if and only if they share ownership or are both empty.</del>
</li>
</ul>

<p>
<del><i>Throws:</i> nothing.</del>
</p>

<p>
<del>[<i>Note:</i> Allows <tt>weak_ptr</tt> objects to be used as keys in associative
containers. &mdash; <i>end note</i>]</del>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
