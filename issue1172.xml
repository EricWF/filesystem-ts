<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1172" status="Resolved">
<title><tt>select_on_container_(copy|move)_construction</tt> over-constrained</title>
<section><sref ref="[allocator.concepts.members]"/></section>
<submitter>Alberto Ganesh Barbati</submitter>
<date>8 Jul 2009</date>

<discussion>
<p>
I believe the two functions
<tt>select_on_container_(copy|move)_construction()</tt> are over-constrained. For
example, the return value of the "copy" version is (see
<sref ref="[allocator.concepts.members]"/>/21):
</p>
<blockquote><p>
<i>Returns:</i> <tt>x</tt> if the allocator should propagate from the existing
container to the new container on copy construction, otherwise <tt>X()</tt>.
</p></blockquote>
<p>
Consider the case where a user decides to provide an explicit concept
map for Allocator to adapt some legacy allocator class, as he wishes to
provide customizations that the <tt>LegacyAllocator</tt> concept map template
does not provide.  Now, although it's true that the legacy class is
required to have a default constructor, the user might have reasons to
prefer a different constructor to implement
<tt>select_on_container_copy_construction()</tt>. However, the current wording
requires the use of the default constructor.
</p>
<p>
Moreover, it's not said explicitly that <tt>x</tt> is supposed to be the
allocator of the existing container. A clarification would do no harm.
</p>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
<del>NAD Editorial</del><ins>Resolved</ins>.  Addressed by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2982.pdf">N2982</a>.
</p></blockquote>

</discussion>

<resolution>
<p>
Replace <sref ref="[allocator.concepts.members]"/>/21 with:
</p>

<blockquote><pre>
X select_on_container_copy_construction(const X&amp; x);
</pre>
<p>
-21- <i>Returns:</i> <del><tt>x</tt> if the allocator should propagate from the existing
container to the new container on copy construction, otherwise <tt>X()</tt>.</del>
<ins>an allocator object to be used by the new container on copy
construction. [<i>Note:</i> <tt>x</tt> is the allocator of the existing container that
is being copied. The most obvious choices for the return value are <tt>x</tt>, if
the allocator should propagate from the existing container, and <tt>X()</tt>.
<i>&mdash; end note</i>]</ins>
</p>
</blockquote>

<p>
Replace <sref ref="[allocator.concepts.members]"/>/25 with:
</p>

<blockquote><pre>
X select_on_container_move_construction(X&amp;&amp; x);
</pre>
<p>
-25- <i>Returns:</i> <del><tt>move(x)</tt> if the allocator should propagate from the existing
container to the new container on move construction, otherwise <tt>X()</tt>.</del>
<ins>an allocator object to be used by the new container on move
construction. [<i>Note:</i> <tt>x</tt> is the allocator of the existing container that
is being moved. The most obvious choices for the return value are <tt>move(x)</tt>, if
the allocator should propagate from the existing container, and <tt>X()</tt>.
<i>&mdash; end note</i>]</ins>
</p>
</blockquote>

</resolution>

</issue>
