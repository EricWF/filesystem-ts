<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1315" status="NAD Editorial">
<title>return type of <tt>async</tt></title>
<section><sref ref="[futures.async]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>9 Feb 2009</date>

<discussion>
<p>
Both overloads of <tt>async</tt> return <tt>future&lt;typename
F::result_type&gt;</tt> which requires that <tt>F</tt> has a nested type. This
prevents <tt>async</tt> being used with function pointers and makes the example
in <sref ref="[futures.async]"/> invalid. I believe this is unintentional.
</p>

<p>
The proposed resolution also addresses editorial issues with the
<tt>launch_policy</tt> function parameter.
</p>

<p>
For the first overload it is not sufficient to return <tt>future&lt;typename
result_of&lt;F(ArgTypes...)&gt;::type&gt;</tt>.  Calling <tt>async(launch::xxx,
foo, bar)</tt> performs argument deduction on both <tt>async</tt> overloads,
which for the first overload attempts to instantiate <tt>result_of&lt;launch(F,
ArgTypes...)&gt;</tt>, which is invalid. SFINAE must be used to prevent that.
</p>

<note>
2010-02-12 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
2010-02-12 Daniel opens:
</note>

<blockquote>
<p>
[..] if <tt>decay&lt;F&gt;::type</tt> is of type <tt>std::launch</tt>.
</p>
<p>
or
</p>
<p>
[..] if <tt>remove_cv&lt;remove_reference&lt;F&gt;::type&gt;::type</tt> is of
type <tt>std::launch</tt>.
</p>

<p>
The latter is the more specific form, but the former is equivalent to
the latter for all cases that can occur here. I suggest to use the
former for simplicity, but expect that implementations can effectively
use the latter.

</p>
</blockquote>

<note>
2010-02-12 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
2010 Pittsburgh:
</note>

<blockquote><p>
Moved to NAD Editorial.  Rationale added below.
</p></blockquote>

</discussion>

<rationale>
<p>
Solved by N3058.
</p>
</rationale>

<resolution>
<p>
In <sref ref="[futures.overview]"/> paragraph 1:
</p>

<blockquote><pre>
template &lt;class F, class... Args&gt;
  <del>future&lt;typename F::result_type&gt;</del>
  <ins>future&lt;typename result_of&lt;F(Args...)&gt;::type&gt;</ins>
  async(F&amp;&amp; f, Args&amp;&amp;... args);
template &lt;class F, class... Args&gt;
  <del>future&lt;typename F::result_type&gt;</del>
  <ins>future&lt;typename result_of&lt;F(Args...)&gt;::type&gt;</ins>
  async(launch policy, F&amp;&amp; f, Args&amp;&amp;... args);
</pre></blockquote>

<p>
In <sref ref="[futures.async]"/> before paragraph 1
</p>

<blockquote><pre>
template &lt;class F, class... Args&gt;
  <del>future&lt;typename F::result_type&gt;</del>
  <ins>future&lt;typename result_of&lt;F(Args...)&gt;::type&gt;</ins>
  async(F&amp;&amp; f, Args&amp;&amp;... args);
template &lt;class F, class... Args&gt;
  <del>future&lt;typename F::result_type&gt;</del>
  <ins>future&lt;typename result_of&lt;F(Args...)&gt;::type&gt;</ins>
  async(launch policy, F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>...</p>
<p><ins>
<i>Remarks:</i> The first signature shall not participate in overload resolution
if <tt>decay&lt;F&gt;::type</tt> is <tt>std::launch</tt>.
</ins></p>
</blockquote>
</blockquote>

</resolution>

</issue>
