<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2228" status="Review">
<title>Missing <em>SFINAE</em> rule in <tt>unique_ptr</tt> templated assignment</title>
<section><sref ref="[unique.ptr.single.asgn]"/></section>
<submitter>Geoffrey Romer</submitter>
<date>20 Dec 2012</date>

<discussion>

<p>
<sref ref="[unique.ptr.single.asgn]"/>/5 permits <tt>unique_ptr</tt>'s templated assignment operator to participate 
in overload resolution even when incompatibilities between <tt>D</tt> and <tt>E</tt> will render the result ill-formed, 
but the corresponding templated copy constructor is removed from the overload set in those situations (see the third 
bullet point of <sref ref="[unique.ptr.single.ctor]"/>/19). This asymmetry is confusing, and presumably unintended; 
it may lead to situations where constructing one <tt>unique_ptr</tt> from another is well-formed, but assigning from 
the same <tt>unique_ptr</tt> would be ill-formed.
<p/>
There is a slight coupling between this and LWG <iref ref="2118"/>, in that my PR for LWG <iref ref="2118"/> incorporates 
equivalent wording in the specification of the templated assignment operator for the array specialization; the two PRs 
are logically independent, but if my PR for <iref ref="2118"/> is accepted but the above PR is not, the discrepancy 
between the base template and the specialization could be confusing.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3485.</p>
<ol>
<li><p>Revise <sref ref="[unique.ptr.single.asgn]"/> p5 as follows:</p>

<blockquote><pre>
template &lt;class U, class E&gt; unique_ptr&amp; operator=(unique_ptr&lt;U, E&gt;&amp;&amp; u) noexcept;
</pre><blockquote>
<p>
-4- <i>Requires</i>: If <tt>E</tt> is not a reference type, assignment of the deleter from an rvalue of type <tt>E</tt> 
shall be well-formed and shall not throw an exception. Otherwise, <tt>E</tt> is a reference type and assignment of the
deleter from an lvalue of type <tt>E</tt> shall be well-formed and shall not throw an exception.
<p/>
-5- <i>Remarks</i>: This operator shall not participate in overload resolution unless:
</p>
<ul>
<li><p><tt>unique_ptr&lt;U, E&gt;::pointer</tt> is implicitly convertible to <tt>pointer</tt> and</p></li>
<li><p><tt>U</tt> is not an array type<del>.</del><ins>, and</ins></p></li>
<li><p><ins>either <tt>D</tt> is a reference type and <tt>E</tt> is the same type as <tt>D</tt>, or <tt>D</tt> is 
not a reference type and <tt>E</tt> is implicitly convertible to <tt>D</tt>.</ins></p></li>
</ul>
<p>
-6- <i>Effects</i>: Transfers ownership from <tt>u</tt> to <tt>*this</tt> as if by calling <tt>reset(u.release())</tt> 
followed by an assignment from <tt>std::forward&lt;E&gt;(u.get_deleter())</tt>.
<p/>
-7- <i>Returns</i>: <tt>*this</tt>.
</p>
</blockquote></blockquote>

</li>
</ol>
</resolution>

</issue>
