<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2163" status="New">
<title><tt>nth_element</tt> requires inconsistent post-conditions</title>
<section><sref ref="[alg.nth.element]"/></section>
<submitter>Peter Sommerlad</submitter>
<date>6 Jul 2012</date>

<discussion>

<p>
The specification of nth_element refers to <tt>operator&lt;</tt> whereas all sorting without a compare function is based on 
<tt>operator&lt;</tt>. While it is true that for all regular types both operators should be defined accordingly, all other 
sorting algorithms only rely on existence of <tt>operator&lt;</tt>. So I guess the paragraph p1
</p>
<blockquote><p>
After <tt>nth_element</tt> the element in the position pointed to by <tt>nth</tt> is the element that would be in that
position if the whole range were sorted. Also for any iterator <tt>i</tt> in the range <tt>[first,nth)</tt> and any
iterator <tt>j</tt> in the range <tt>[nth,last)</tt> it holds that: <tt>!(*i &gt; *j)</tt> or <tt>comp(*j, *i) == false</tt>.
</p></blockquote>
<p>
should read
</p>
<blockquote><p>
After <tt>nth_element</tt> the element in the position pointed to by <tt>nth</tt> is the element that would be in that
position if the whole range were sorted. Also for any iterator <tt>i</tt> in the range <tt>[first,nth)</tt> and any
iterator <tt>j</tt> in the range <tt>[nth,last)</tt> it holds that: <tt>!(*j &lt; *i)</tt> or <tt>comp(*j, *i) == false</tt>.
</p></blockquote>
<p>
Note only "<tt>!(*i &gt; *j)</tt>" was changed to "<tt>!(*j &lt; *i)</tt>" and it would be more symmetric with 
<tt>comp(*j, *i)</tt> as well.
<p/>
In theory this might be a semantic change to the spec, but I believe the mistake is unintended.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Change <sref ref="[alg.nth.element]"/> p1 as indicated:</p>

<blockquote><pre>
template&lt;class RandomAccessIterator&gt;
void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                 RandomAccessIterator last);
template&lt;class RandomAccessIterator, class Compare&gt;
void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                 RandomAccessIterator last, Compare comp);
</pre><blockquote>
<p>
-1- After <tt>nth_element</tt> the element in the position pointed to by <tt>nth</tt> is the element that would be in that
position if the whole range were sorted. Also for any iterator <tt>i</tt> in the range <tt>[first,nth)</tt> and any
iterator <tt>j</tt> in the range <tt>[nth,last)</tt> it holds that: <tt><del>!(*i &gt; *j)</del><ins>!(*j &lt; *i)</ins></tt> 
or <tt>comp(*j, *i) == false</tt>.
</p>
</blockquote></blockquote>
</li>
</ol>

</resolution>

</issue>
