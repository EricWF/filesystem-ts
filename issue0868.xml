<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="868" status="Voting">
<title>default construction and value-initialization</title>
<section><sref ref="[containers]"/></section>
<submitter>Alberto Ganesh Barbati</submitter>
<date>22 Jul 2008</date>

<discussion>
<p>
The term "default constructed" is often used in wording that predates
the introduction of the concept of value-initialization. In a few such
places the concept of value-initialization is more correct than the
current wording (for example when the type involved can be a built-in)
so a replacement is in order. Two of such places are already covered by
issue <iref ref="867"/>. This issue deliberately addresses the hopefully
non-controversial changes in the attempt of being approved more quickly.
A few other occurrences (for example in <tt>std::tuple</tt>,
<tt>std::reverse_iterator</tt> and <tt>std::move_iterator</tt>) are left to separate
issues. For <tt>std::reverse_iterator</tt>, see also issue <iref ref="408"/>. This issue is
related with issue <iref ref="724"/>.
</p>

<note>
San Francisco:
</note>

<blockquote>
<p>
The list provided in the proposed resolution is not complete. James
Dennett will review the library and provide a complete list and will
double-check the vocabulary.
</p>
<p>
This issue relates to Issue <iref ref="886"/> tuple construction
</p>
</blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote>
<p>
The proposed resolution is incomplete.
</p>
<p>
Move to Tentatively NAD Future. Howard will contact Ganesh for wording.
If wording is forthcoming, Howard will move it back to Review.
</p>
</blockquote>

<note>
2009-07-18 Ganesh updated the proposed wording.
</note>

<blockquote>
<p>
Howard:  Moved back to Review.  Note that <sref ref="[utility.arg.requirements]"/>
refers to a section that is not in the current working paper, but does refer to
a section that we expect to reappear after the de-concepts merge.  This was a
point of confusion we did not recognize when we reviewed this issue in Frankfurt.
</p>
<p>
Howard:  Ganesh also includes a survey of places in the WP surveyed for changes
of this nature and purposefully <em>not</em> treated:
</p>

<blockquote>
<p>
Places where changes are <u>not</u> being
proposed
</p>
<p>
In the following paragraphs, we are not proposing changes because
it's not clear whether we actually prefer value-initialization over
default-initialization (now partially covered by <iref "1012"/>):
</p>
<ul>
    <li><p><sref ref="[unique.ptr.single.ctor]"/> para 3 e 7</p></li>
    <li><p><sref ref="[reverse.iter.cons]"/> para 1</p></li>
    <li><p><sref ref="[move.iter.op.const]"/> para 1</p></li>
</ul>
<p>In the following paragraphs, the expression "default
constructed" need not be changed, because the relevant type does
not depend on a template parameter and has a user-provided
constructor:</p>
<ul>
    <li><p><sref ref="[func.referenceclosure.invoke]"/> para 12, type:
    reference_closure</p></li>
    <li><p><sref ref="[thread.thread.constr]"/> para 30, type: thread</p></li>
    <li><p><sref ref="[thread.thread.member]"/> para 52, type: thread_id</p></li>
    <li><p><sref ref="[thread.thread.this]"/>, para 1, type: thread_id</p></li>
</ul>
</blockquote>

</blockquote>

<note>
2009-08-18 Daniel adds:
</note>

<blockquote>
<p>
I have no objections against the currently suggested changes, but I
also cross-checked
with the list regarding intentionally excluded changes, and from this
I miss the discussion
of
</p>

<ol>
<li>
<p>
<sref ref="[string.require]"/>/2:
</p>

<blockquote>
"[..] The <tt>Allocator</tt> object used shall be a copy of the <tt>Allocator></tt>
object passed to the <tt>basic_string</tt> object's
constructor or, if the constructor does not take an <tt>Allocator</tt>
argument, a copy of a default-constructed
<tt>Allocator</tt> object."
</blockquote>
</li>

<li>
<p>
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf">N2723</a>,
<sref ref="[rand.req.eng]"/>, Table 109, expression "<tt>T()</tt>":
</p>
<blockquote>
Pre-/post-condition: "Creates an engine with the same initial state as
all other default-constructed engines of type <tt>X</tt>."
</blockquote>

<p>
as well as in <sref ref="[rand.predef]"/>/1-9 (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf">N2914</a>), <sref
ref="[rand.util.seedseq]"/>/3, <sref ref="[istream.cons]"/>/3, <sref
ref="[ostream.cons]"/>/9 (<a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"
>N2914</a>), <sref ref="[re.grammar]"/>/2, <sref
ref="[thread.thread.assign]"/>/1 (<a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"
>N2914</a>),
</p>
<note>
Candidates for the "the expression "default constructed" need not be
changed" list
</note>

<p>
I'm fine, if these would be added to the intentionally exclusion list,
but mentioning them makes it
easier for other potential reviewers to decide on the relevance or
not-relevance of them for this issue.
</p>
</li>

<li>
<p>
I suggest to remove the reference of <sref ref="[func.referenceclosure.invoke]"/>
in the "it's not clear" list, because
this component does no longer exist.
</p>
</li>

<li>
<p>
I also suggest to add a short comment that all paragraphs in the
resolution whether they refer to <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf"
>N2723</a> or to <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"
>N2914</a> numbering, because e.g. "Change <sref
ref="[deque.cons]"/> para 5" is an <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf"
>N2723</a> coordinate, while "Change <sref
ref="[deque.capacity]"/> para 1" is an <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"
>N2914</a> coordinate. Even better would be to use one default document
for the numbering (probably <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"
>N2914</a>) and mention special cases (e.g. "Change <sref
ref="[utility.arg.requirements]"/> para 2" as referring to <a
href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf"
>N2723</a> numbering).
</p>
</li>
</ol>

</blockquote>

<note>
2009-08-18 Alisdair adds:
</note>

<blockquote>
<p>
I strongly believe the term "default constructed" should not appear in
the library clauses unless we very clearly define a meaning for it, and
I am not sure what that would be.
</p>

<p>
In those cases where we do not want to replace "default constructed"
with "vale initialized" we should be using "default initialized".  If we
have a term that could mean either, we reduce portability of programs.
</p>

<p>
I have not done an exhaustive review to clarify if that is a vendor
freedom we have reason to support (e.g. value-init in debug,
default-init in release) so I may yet be convinced that LWG has reason
to define this new term of art, but generally C++ initialization is
confusing enough without supporting further ill-defined terms.
</p>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Move to Ready.
</blockquote>

<note>
2010 Pittsburgh:
</note>

<blockquote>
Moved to review in order to enable conflict resolution with <iref ref="704"/>.
</blockquote>

<note>
2010-03-26 Daniel harmonized the wording with the upcoming FCD.
</note>


<note>
2010 Rapperswil:
</note>

<blockquote>
Move to Ready.
</blockquote>


</discussion>

<resolution>
<p>
Change <sref ref="[utility.arg.requirements]"/> para 2:
</p>

<blockquote>
2 In general, a default constructor is
not required. Certain container class member function signatures
specify <del>the default constructor</del><ins>T()</ins>
as a default argument. T() shall be a well-defined expression (8.5)
if one of those signatures is called using the default argument
(8.3.6).
</blockquote>

<p>
Change <sref ref="[deque.cons]"/> para 3:
</p>

<blockquote>
3 <i>Effects:</i> Constructs a deque with n
<del>default constructed</del><ins>value-initialized</ins>
elements. 
</blockquote>

<p>
Change <sref ref="[deque.capacity]"/> para 1:
</p>

<blockquote>
1 <i>Effects:</i> If sz &lt; size(), equivalent
to erase(begin() + sz, end());. If size() &lt; sz, appends sz -
size() <del>default
constructed</del><ins>value-initialized</ins>
elements to the sequence.
</blockquote>

<p>
Change <sref ref="[forwardlist.cons]"/> para 3:
</p>

<blockquote>
3 <i>Effects:</i> Constructs a forward_list object with n <del>default
constructed</del><ins>value-initialized</ins>
elements.
</blockquote>

<p>
Change <sref ref="[forwardlist.modifiers]"/> para 22:
</p>

<blockquote>
22 <i>Effects:</i> [...] For the first signature
the inserted elements are <del>default
constructed</del><ins>value-initialized</ins>,
and for the second signature they are copies of c.
</blockquote>

<p>
Change <sref ref="[list.cons]"/> para 3:
</p>

<blockquote>
3 <i>Effects:</i> Constructs a list with n <del>default
constructed</del><ins>value-initialized</ins>
elements. 
</blockquote>

<p>
Change <sref ref="[list.capacity]"/> para 1:
</p>

<blockquote>
1 <i>Effects:</i> If sz &lt; size(), equivalent
to list&lt;T&gt;::iterator it = begin(); advance(it, sz); erase(it,
end());. If size() &lt; sz, appends sz - size() <del>default
constructed</del><ins>value-initialized</ins>
elements to the sequence.
</blockquote>

<p>
Change <sref ref="[vector.cons]"/> para 3:
</p>

<blockquote>
3 <i>Effects:</i> Constructs a vector with n
<del>default constructed</del><ins>value-initialized</ins>
elements. 
</blockquote>

<p>
Change <sref ref="[vector.capacity]"/> para 9:
</p>

<blockquote>
9 <i>Effects:</i> If sz &lt; size(), equivalent
to erase(begin() + sz, end());. If size() &lt; sz, appends sz -
size() <del>default
constructed</del><ins>value-initialized</ins>
elements to the sequence.
</blockquote>

</resolution>

</issue>
