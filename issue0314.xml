<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="314" status="NAD">
<title>Is the stack unwound when terminate() is called?</title>
<section><sref ref="[terminate]"/></section>
<submitter>Detlef Vollmann</submitter>
<date>11 Apr 2001</date>

<discussion>

<p>
The standard appears to contradict itself about whether the stack is
unwound when the implementation calls terminate().
</p>

<p>From 18.7.3.3p2:</p>
<blockquote><p>
    Calls the terminate_handler function in effect immediately
    after evaluating the throw-expression (lib.terminate.handler),
    if called by the implementation [...]
</p></blockquote>

<p>So the stack is guaranteed not to be unwound.</p>

<p>But from 15.3p9:</p>
<blockquote><p>
    [...]whether or not the stack is unwound before this call
    to terminate() is implementation-defined (except.terminate).
</p></blockquote>

<p>
And 15.5.1 actually defines that in most cases the stack is unwound.
</p>
</discussion>

<resolution>
</resolution>

<rationale>
<p>There is definitely no contradiction between the core and library
clauses; nothing in the core clauses says that stack unwinding happens
after <tt>terminate</tt> is called.  18.7.3.3p2 does not say anything
about when terminate() is called; it merely specifies which
<tt>terminate_handler</tt> is used.</p>
</rationale>

</issue>
