<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2274" status="New">
<title>Does <tt>map::operator[]</tt> value-initialize or default-insert a missing element?</title>
<section><sref ref="[map.access]"/>, <sref ref="[unord.map.elem]"/></section>
<submitter>Andrzej Krzemie&#324;ski</submitter>
<date>16 Jul 2013</date>

<discussion>
<p>
Suppose that I provide a custom allocator for type <tt>int</tt>, that renders value 1 rather than 0 in default-insertion:
</p>
<blockquote>
<pre>
struct Allocator1 : std::allocator&lt;int&gt;
{
  using super = std::allocator&lt;int&gt;;

  template&lt;typename Up, typename... Args&gt;
  void construct(Up* p, Args&amp;&amp;... args)
  { super::construct(p, std::forward&lt;Args&gt;(args)...); }

  template&lt;typename Up&gt;
  void construct(Up* p)
  { ::new((void*)p) Up(1); }
};
</pre>
</blockquote>

<p>
Now, if I use this allocator with <tt>std::map</tt>, and I use <tt>operator[]</tt> to access a not-yet-existent value, 
what value of the <tt>mapped_type</tt> should be created? 0 (value-initialization) or 1 (default-insertion):
</p>

<blockquote>
<pre>
map&lt;string, int, less&lt;string&gt;, Allocator1&gt; map;
cout &lt;&lt; map["cat"];
</pre>
</blockquote>

<p>
N3960 is not very clear. <sref ref="[map.access]"/> in para 1 says:
</p>
<blockquote>
<p>
"If there is no key equivalent to <tt>x</tt> in the map, inserts <tt>value_type(x, T())</tt> into the map."
</p>
</blockquote>
<p>
So, it requires value-initialization.
<p/>
But para 2 says:
</p>
<blockquote>
<p>
"<tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> into <tt>*this</tt>."
</p>
</blockquote>
<p>
This implies default-insertion, because if not, why the requirement. Also similar functions like 
<tt>vector::resize</tt> already require default-insertion wherever they put <tt>DefaultInsertable</tt> requirements.
<p/>
Not to mention that default-insertion is more useful, because it allows custom allocators to "override" the 
default value of <tt>mapped_type</tt>.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Change <sref ref="[map.access]"/> p1+p5 as indicated:</p>

<blockquote>
<pre>
T&amp; operator[](const key_type&amp; x);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> If there is no key equivalent to <tt>x</tt> in the map, inserts <del><tt>value_type(x, T())</tt> 
into the map</del><ins>into the map a value with <tt>key_type</tt> initialized using expression <tt>x</tt> and <tt>mapped_type</tt> 
initialized by default-insertion</ins>.
<p/>
-2- <i>Requires:</i> <tt>key_type</tt> shall be <tt>CopyInsertable</tt> and <tt>mapped_type</tt> shall be 
<tt>DefaultInsertable</tt> into <tt>*this</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
T&amp; operator[](key_type&amp;&amp; x);
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> If there is no key equivalent to <tt>x</tt> in the map, inserts 
<del><tt>value_type(std::move(x), T())</tt> into the map</del><ins>into the map a value with <tt>key_type</tt> 
initialized using expression <tt>std::move(x)</tt> and <tt>mapped_type</tt> initialized by default-insertion</ins>.
<p/>
-6- <i>Requires:</i> <tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> into <tt>*this</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[unord.map.elem]"/> p2 as indicated:</p>

<blockquote>
<pre>
mapped_type&amp; operator[](const key_type&amp; k);
mapped_type&amp; operator[](key_type&amp;&amp; k);
</pre>
<blockquote>
<p>
-1- <i>Requires:</i> <tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> into <tt>*this</tt>. 
For the first operator, <tt>key_type</tt> shall be <tt>CopyInsertable</tt> into <tt>*this</tt>. For the second 
operator, <tt>key_type</tt> shall be <tt>MoveConstructible</tt>.
<p/>
-2- <i>Effects:</i> If the <tt>unordered_map</tt> does not already contain an element whose key is equivalent to 
<tt>k</tt>, the first operator inserts <del>the value <tt>value_type(k, mapped_type())</tt></del><ins>a value with 
<tt>key_type</tt> initialized using expression <tt>x</tt> and <tt>mapped_type</tt> initialized by default-insertion</ins> 
and the second operator inserts <del>the value <tt>value_type(std::move(k), mapped_type())</tt></del><ins>a value 
with <tt>key_type</tt> initialized using expression <tt>std::move(x)</tt> and <tt>mapped_type</tt> initialized by 
default-insertion</ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
