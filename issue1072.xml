<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1072" status="NAD Concepts">
<title>Is std::hash a constrained template or not?</title>
<section><sref ref="[unord.hash]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>19 Mar 2009</date>

<discussion>

<p>
Is <tt>std::hash</tt> a constrained template or not?
</p>
<p>
According to Class template hash <sref ref="[unord.hash]"/>, the definition is:
</p>

<blockquote><pre>
template &lt;class T&gt;
struct hash : public std::unary_function&lt;T, std::size_t&gt; {
  std::size_t operator()(T val) const;
};
</pre></blockquote>

<p>
And so unconstrained.
</p>
<p>
According to the <tt>&lt;functional&gt;</tt> synopsis in p2 Function objects
<sref ref="[function.objects]"/> the template is declared as:
</p>

<blockquote><pre>
template &lt;ReferentType T&gt; struct hash;
</pre></blockquote>

<p>
which would make hash a constrained template.
</p>

<note>
2009-03-22 Daniel provided wording.
</note>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Alisdair is not certain that Daniel's proposed resolution is sufficient,
and recommends we leave the hash template unconstrained for now.
</p>
<p>
Recommend that the Project Editor make the constrained declaration consistent
with the definition in order to make the Working Paper internally consistent,
and that the issue then be revisited.
</p>
<p>
Move to Open.
</p>
</blockquote>
</discussion>

<resolution>

<p>
[To the editor: This resolution is merge-compatible to the
resolution of <iref ref="1078"/>]
</p>

<ol>
<li>
<p>
In <sref ref="[function.objects]"/>/2, header <tt>&lt;functional&gt;</tt> synopsis, change as indicated:
</p>

<blockquote><pre>
// 20.6.17, hash function base template:
template &lt;ReferentType T&gt; struct hash; <ins>// undefined</ins>
</pre></blockquote>
</li>
<li>
<p>
In <sref ref="[unord.hash]"/>/1 change as indicated:
</p>
<blockquote><pre>
namespace std {
 <del>template &lt;class T&gt;
 struct hash : public std::unary_function&lt;T, std::size_t&gt; {
 std::size_t operator()(T val) const;
 };</del>
 <ins>template &lt;ReferentType T&gt; struct hash; // undefined</ins>
}
</pre></blockquote>
</li>
<li>
<p>
In <sref ref="[unord.hash]"/>/2 change as indicated:
</p>

<blockquote>
-2-  <ins>For all library-provided specializations, the template
instantiation <tt>hash&lt;T&gt;</tt>
  shall provide a public <tt>operator()</tt> with return type <tt>std::size_t</tt> to
satisfy the concept
  requirement <tt>Callable&lt;const hash&lt;T&gt;, const T&amp;&gt;</tt>. If <tt>T</tt> is an object
type or reference to
  object, <tt>hash&lt;T&gt;</tt> shall be publicly derived from
<tt>std::unary_function&lt;T, std::size_t&gt;</tt>.
  </ins> The return value of <tt>operator()</tt> is unspecified, except that
equal arguments
  shall yield the same result. <tt>operator()</tt> shall not throw exceptions.
</blockquote>
</li>
<li>
<p>
In <sref ref="[support.rtti]"/>/1, header <tt>&lt;typeinfo&gt;</tt> synopsis change as indicated:
</p>
<blockquote><pre>
namespace std {
  class type_info;
  class type_index;
  template &lt;<del>class</del><ins>ReferentType</ins> T&gt; struct hash;
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
