<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1375" status="Dup">
<title>[FCD] <tt>reference_type</tt> should not have been removed from the
allocator requirements</title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<duplicate><iref ref="1318"/></duplicate>
<p><b>Addresses US-87</b></p>
<p>
<tt>reference_type</tt> should not have been removed from the
allocator requirements. Even if it is always the same as
<tt>value_type&amp;</tt>, it is an important customization point for
extensions and future features.
</p>
</discussion>

<resolution>
<p>
In [allocator.requirements] Table 42 - Allocotor Requirements, 
Add a row (after <tt>value_type</tt>) with columns:
</p>
<blockquote>
Expression: <ins><tt>X::reference_type</tt></ins><BR/>
Return type: <ins><tt>T&amp;</tt></ins><BR/>
Assertion/note...: (empty)<BR/>
Default: <ins><tt>T&amp;</tt></ins><BR/>
</blockquote>
<p>
[allocator.traits]:
</p> 
<blockquote><pre>
namespace std {
  template &lt;class Alloc> struct allocator_traits {
    typedef Alloc allocator_type;
    
    typedef typename Alloc::value_type value_type;

    typedef <i>see below</i>   pointer;
    typedef <i>see below</i>   const_pointer;
    typedef <i>see below</i>   void_pointer;
    typedef <i>see below</i>   const_void_pointer;
    <ins>typedef value_type&amp; reference_type;</ins>
</pre></blockquote>

Add <tt>reference_type</tt> to
allocator_traits template, defaulted to
value_type&amp;.
</resolution>

</issue>
