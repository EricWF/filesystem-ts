<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1494" status="Tentatively Voting">
<title>[FCD] Term "are serialized" not defined</title>
<section><sref ref="[thread.once.callonce]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-190</b></p>
<p>
The term "are serialized" is never defined (<sref ref="[thread.once.callonce]"/> p. 2).
</p>
<note>
Resolution proposed by ballot comment:
</note>
<p>
Remove the sentence with "are serialized" from
paragraph 2. Add "Calls to <tt>call_once</tt> on the same
<tt>once_flag</tt> object shall not introduce data races
(17.6.4.8)." to paragraph 3.
</p>

<note>
2010-11-01 Daniel translates NB comment into wording
</note>
<!--
<p>Change <sref ref="[thread.once.callonce]"/> p.2+3 as indicated:</p>

<blockquote><pre>
template&lt;class Callable, class ...Args&gt;
void call_once(once_flag&amp; flag, Callable&amp;&amp; func, Args&amp;&amp;... args);
</pre><blockquote>
<p>
[..]
<p/>
2 <em>Effects</em>: <del>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object are serialized.</del>
If there has been a prior effective call to <tt>call_once</tt> on the same <tt>once_flag object</tt>, 
the call to <tt>call_once</tt> returns without invoking <tt>func</tt>. If there has been no prior 
effective call to <tt>call_once</tt> on the same <tt>once_flag</tt> object,
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt>
is executed. The call to <tt>call_once</tt> is effective if and only if 
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt> 
returns without throwing an exception. If an exception is thrown it is propagated to the caller.
<p/>
3 <em>Synchronization</em>: The completion of an effective call to <tt>call_once</tt> on a <tt>once_flag</tt> 
object synchronizes with (1.10) all subsequent calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object.
<ins>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object shall not introduce data races ([res.on.data.races]).</ins>
</p>
</blockquote></blockquote>
-->

<note>
2011-02-17: Hans proposes an alternative resolution
</note>

<note>
2011-02-25: Hans, Clark, and Lawrence update the suggested wording
</note>

<note>2011-02-26 Reflector discussion</note>
<p>
Moved to Tentatively Ready after 5 votes.
</p> 
</discussion>

<resolution>
<p>Change <sref ref="[thread.once.callonce]"/> p.2+3 as indicated:</p>

<blockquote><pre>
template&lt;class Callable, class ...Args&gt;
void call_once(once_flag&amp; flag, Callable&amp;&amp; func, Args&amp;&amp;... args);
</pre><blockquote><p>
[..]
<p/>
2 <em>Effects</em>: <del>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object are serialized.
If there has been a prior effective call to <tt>call_once</tt> on the same <tt>once_flag object</tt>, the call to <tt>call_once</tt> 
returns without invoking <tt>func</tt>. If there has been no prior effective call to <tt>call_once</tt> 
on the same <tt>once_flag</tt> object, <tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), 
decay_copy(std::forward&lt;Args&gt;(args))...)</tt> is executed. The call to <tt>call_once</tt> is effective 
if and only if <tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt> 
returns without throwing an exception. If an exception is thrown it is propagated to the caller.</del>
<ins>An execution of <code>call_once</code> that does not call its <code>func</code> is a passive execution.
An execution of <code>call_once</code> that calls its <code>func</code> is an active execution.
An active execution shall call <code><var>INVOKE</var>(decay_copy(std::forward&lt;Callable&gt;(func)),
decay_copy(std::forward&lt;Args&gt;(args))...)</code>. If such a call to <code>func</code> throws an exception,
the execution is exceptional, otherwise it is returning.
An exceptional execution shall propagate the exception to the caller of <code>call_once</code>.
Among all executions of <code>call_once</code> for any given <code>once_flag</code>: at most one shall be a 
returning execution; if there is a returning execution, it shall be the last active execution; and
there are passive executions only if there is a returning execution.
[<i>Note:</i> Passive executions allow other threads to reliably observe the results produced by the 
earlier returning execution. &mdash; <i>end note</i>]</ins>
<p/>
3 <em>Synchronization</em>: <del>The completion of an effective call to <tt>call_once</tt> on a <tt>once_flag</tt> 
object <em>synchronizes with</em> (<sref ref="[intro.multithread]"/>) all subsequent calls to <tt>call_once</tt> 
on the same <tt>once_flag</tt> object.</del><ins>For any given <code>once_flag</code>: all active executions occur in a total 
order; completion of an active execution synchronizes with (<sref ref="[intro.multithread]"/>) the start of 
the next one in this total order; and the returning execution synchronizes with the return from all passive 
executions.</ins>
</p></blockquote></blockquote>

</resolution>

</issue>
