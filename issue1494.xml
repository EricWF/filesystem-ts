<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1494" status="Open">
<title>[FCD] Term "are serialized" not defined</title>
<section><sref ref="[thread.once.callonce]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-190</b></p>

The term "are serialized" is never defined (<sref ref="[thread.once.callonce]"/> p. 2).

<note>
Resolution proposed by ballot comment:
</note>
<p>
Remove the sentence with "are serialized" from
paragraph 2. Add "Calls to <tt>call_once</tt> on the same
<tt>once_flag</tt> object shall not introduce data races
(17.6.4.8)." to paragraph 3.
</p>

<note>
2010-11-01 Daniel translates NB comment into wording
</note>

<p>Change <sref ref="[thread.once.callonce]"/> p.2+3 as indicated:</p>

<blockquote><pre>
template&lt;class Callable, class ...Args&gt;
void call_once(once_flag&amp; flag, Callable&amp;&amp; func, Args&amp;&amp;... args);
</pre><blockquote>
[..]
<p/>
2 <em>Effects</em>: <del>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object are serialized.</del>
If there has been a prior effective call to <tt>call_once</tt> on the same <tt>once_flag object</tt>, 
the call to <tt>call_once</tt> returns without invoking <tt>func</tt>. If there has been no prior 
effective call to <tt>call_once</tt> on the same <tt>once_flag</tt> object,
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt>
is executed. The call to <tt>call_once</tt> is effective if and only if 
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt> 
returns without throwing an exception. If an exception is thrown it is propagated to the caller.
<p/>
3 <em>Synchronization</em>: The completion of an effective call to <tt>call_once</tt> on a <tt>once_flag</tt> 
object synchronizes with (1.10) all subsequent calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object.
<ins>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object shall not introduce data races ([res.on.data.races]).</ins>
</blockquote></blockquote>

<note>
2011-02-17: Hans proposes an alternative resolution
</note>

</discussion>

<resolution>
<p>Change <sref ref="[thread.once.callonce]"/> p.2+3 as indicated:</p>

<blockquote><pre>
template&lt;class Callable, class ...Args&gt;
void call_once(once_flag&amp; flag, Callable&amp;&amp; func, Args&amp;&amp;... args);
</pre><blockquote>
[..]
<p/>
2 <em>Effects</em>: <del>Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> object are serialized.</del><ins>If there are 
one or more calls to <tt>call_once</tt> on the same <tt>once_flag</tt>, some number of these are effective, and the
rest are ineffective.
Exactly one of the effective calls returns normally. None of the ineffective calls may happen before (<sref ref="[intro.multithread]"/>) 
the effective one.  The normally returning effective call may not happen before those that throw an exception.</ins>
<del>If there has been a prior effective call to <tt>call_once</tt> on the same <tt>once_flag object</tt>, the call to <tt>call_once</tt> 
returns</del><ins>Ineffective calls to <tt>call_once</tt> return</ins> without invoking <tt>func</tt>.<del> If there 
has been no prior effective call to <tt>call_once</tt> on the same <tt>once_flag</tt> object,
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt>
is executed</del><ins>Effective calls to <tt>call_once</tt> execute 
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt></ins>. <del>The call 
to <tt>call_once</tt> is effective if and only if 
<tt>INVOKE(decay_copy( std::forward&lt;Callable&gt;(func)), decay_copy(std::forward&lt;Args&gt;(args))...)</tt> 
returns without throwing an exception</del>. If an exception is thrown it is propagated to the caller.
<p/>
3 <em>Synchronization</em>: <ins>All effective calls on the same <tt>once_flag</tt> object occur in a total order consistent with the
happens before order, and such that the normally returning call occurs last. Each completion of an effective call 
<em>synchronizes with</em> the start of the next one in this total order.</ins> The completion of <del>an</del><ins>the last</ins> 
effective call <del>to <tt>call_once</tt> on a <tt>once_flag</tt> object</del> <em>synchronizes with</em> 
(<sref ref="[intro.multithread]"/>) all <del>subsequent</del><ins>ineffective</ins> calls 
to <tt>call_once</tt> on the same <tt>once_flag</tt> object.<ins> Calls to <tt>call_once</tt> on the same <tt>once_flag</tt> 
object shall not introduce data races ([res.on.data.races]).</ins>
</blockquote></blockquote>

</resolution>

</issue>
