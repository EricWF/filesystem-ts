<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1377" status="Open">
<title>[FCD] Ballot Comment US-90</title>
<section><sref ref="[utility]"/></section>
<submitter>ANSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-90</b></p>

In n3090, at variance with previous iterations of the idea
discussed in papers and incorporated in WDs,
std::forward is constrained via std::is_convertible, thus is
not robust wrt access control. This causes problems in
normal uses as implementation detail of member
functions. For example, the following snippet leads to a
compile time failure, whereas that was not the case for an
implementation along the lines of n2835 (using enable_ifs
instead of concepts for the constraining, of course)
<PRE>
#include &lt;utility&gt;
struct Base { Base(Base&amp;&amp;); };
struct Derived
: private Base
{
Derived(Derived&amp;&amp; d)
: Base(std::forward&lt;Base&gt;(d)) { }
};
</PRE>
In other terms, LWG 1054 can be resolved in a better
way, the present status is not acceptable.
</discussion>

<resolution>
</resolution>

</issue>
