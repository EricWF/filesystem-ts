<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1193" status="C++11">
<title><tt>default_delete</tt> cannot be instantiated with incomplete types</title>
<section><sref ref="[unique.ptr.dltr]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>18 Aug 2009</date>

<discussion>
<p>
According to the general rules of <sref ref="[res.on.functions]"/> p 2 b 5 the effects
are undefined, if an incomplete type is used to instantiate a library template. But neither in
<sref ref="[unique.ptr.dltr]"/> nor
in any other place of the standard such explicit allowance is given.
Since this template is intended to be instantiated with incomplete
types, this must be fixed.
</p>

<note>
2009-11-15 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
2009-11-17 Alisdair Opens:
</note>

<blockquote>
<p>
LWG 1193 tries to support <tt>unique_ptr</tt> for incomplete types.  I believe the
proposed wording goes too far:
</p>

<blockquote><p>
The template parameter <tt>T</tt> of <tt>default_delete</tt> may be an
incomplete type.
</p></blockquote>

<p>
Do we really want to support <tt>cv-void</tt>?  Suggested ammendment:
</p>

<blockquote><p>
The template parameter <tt>T</tt> of <tt>default_delete</tt> may be an
incomplete type <ins>other than <tt>cv-void</tt></ins>.
</p></blockquote>

<p>
We might also consider saying something about arrays of incomplete types.
</p>

<p>
Did we lose support for <tt>unique_ptr&lt;function-type&gt;</tt> when the
concept-enabled work was shelved?  If so, we might want a
<tt>default_delete</tt> partial specialization for function types that does
nothing.  Alternatively, function types should <em>not</em> be supported by
default, but there is no reason a user cannot support them via their own
deletion policy.
</p>

<p>
Function-type support might also lead to conditionally supporting a
function-call operator in the general case, and that seems way too inventive at
this stage to me, even if we could largely steal wording directly from
<tt>reference_wrapper</tt>.  <tt>shared_ptr</tt> would have similar problems
too.
</p>

</blockquote>

<note>
2010-01-24 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>
<p>
Add two new paragraphs directly to <sref ref="[unique.ptr.dltr]"/> (before
<sref ref="[unique.ptr.dltr.dflt]"/>) with the following
content:
</p>

<blockquote>
<p><ins>
The class template <tt>default_delete</tt> serves as the default deleter (destruction policy) for
the class template <tt>unique_ptr</tt>.
</ins></p>

<p><ins>
The template parameter <tt>T</tt> of <tt>default_delete</tt> may be an incomplete type.
</ins></p>
</blockquote>
</resolution>

</issue>
