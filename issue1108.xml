<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1108" status="C++11">
<title>thread.req.exception overly constrains implementations</title>
<section><sref ref="[thread.req.exception]"/></section>
<submitter>Christopher Kohlhoff</submitter>
<date>25 Apr 2009</date>

<discussion>
<p>
The current formulation of <sref ref="[thread.req.exception]"/>/2 reads:
</p>
<blockquote><p>
The <tt>error_category</tt> of the <tt>error_code</tt> reported by such an
exception's <tt>code()</tt> member function is as specified in the error
condition Clause.
</p></blockquote>
<p>
This constraint on the code's associated <tt>error_categor</tt> means an
implementation must perform a mapping from the system-generated
error to a <tt>generic_category()</tt> error code. The problems with this
include:
</p>

<ul>
<li>
The mapping is always performed, even if the resultant value is
 never used.
</li>
<li>
<p>
The original error produced by the operating system is lost.
</p>
</li>
</ul>
<p>
The latter was one of Peter Dimov's main objections (in a private
email discussion) to the original <tt>error_code</tt>-only design, and led to
the creation of <tt>error_condition</tt> in the first place. Specifically,
<tt>error_code</tt> and <tt>error_condition</tt> are intended to perform 
the following roles:
</p>
<ul>
<li>
<tt>error_code</tt> holds the original error produced by the operating
 system.
</li>
<li>
<tt>error_condition</tt> and the generic category provide a set of well
 known error constants that error codes may be tested against.
</li>
</ul>
<p>
Any mapping determining correspondence of the returned error code to
the conditions listed in the error condition clause falls under the
"latitude" granted to implementors in <sref ref="[syserr.errcat.objects]"/>.
(Although obviously their latitude is restricted a little by the
need to match the right error condition when returning an error code
from a library function.)
</p>
<p>
It is important that this <tt>error_code&#47;error_condition</tt> usage is done
correctly for the thread library since it is likely to set the pattern for future 
TR libraries that interact with the operating system.
</p>

<note>
Batavia (2009-05):
</note>
<blockquote><p>
Move to Open, and recommend the issue be deferred until after the next
Committee Draft is issued.
</p></blockquote>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Move to Tentatively Ready.
</p></blockquote>

</discussion>

<resolution>
<p>
Change <sref ref="[thread.req.exception]"/> p.2:
</p>

<blockquote>
<p>
-2- <del>The <tt>error_category</tt> (19.5.1.1) of the <tt>error_code</tt> reported by
such an exception's <tt>code()</tt> member function 
is as specified in the error condition Clause.</del>
<ins>
The <tt>error_code</tt> reported by such an exception's <tt>code()</tt> member
function shall compare equal to one of the conditions specified in
the function's error condition Clause. [<i>Example:</i> When the thread
constructor fails:
</ins>
</p>
<blockquote><pre><ins>
ec.category() == implementation-defined // probably system_category
ec == errc::resource_unavailable_try_again // holds true
</ins></pre></blockquote>

<p><ins>
&mdash; <i>end example</i>]
</ins></p>

</blockquote>

</resolution>

</issue>
