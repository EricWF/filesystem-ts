<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1295" status="New">
<title>Contradictory call wrapper requirements</title>
<section><sref ref="[func.require]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>22 Dec 2009</date>

<discussion>
<p>
<sref ref="[func.require]"/>/3 b 1 says
</p>

<blockquote>
<p>
3 If a call wrapper (<sref ref="[func.def]"/>) has a <i>weak result type</i> the
type of its member type <tt>result_type</tt> is based on the type <tt>T</tt> of
the wrapper's target object (<sref ref="[func.def]"/>):
</p>

<ul>
<li>
if <tt>T</tt> is a function, reference to function, or pointer to function type,
<tt>result_type</tt> shall be a synonym for the return type of <tt>T</tt>;
</li>
<li>
[..]
</li>
</ul>
</blockquote>

<p>
The first two enumerated types (function and reference to function)
can never be valid types for <tt>T</tt>, because
</p>

<p>
<sref ref="[func.def]"/>/7
</p>

<blockquote>
7 A <i>target object</i> is the callable object held by a call wrapper.
</blockquote>

<p>
and <sref ref="[func.def]"/>/3
</p>

<blockquote>
3 A <i>callable type</i> is a pointer to function, a pointer to member function,
a pointer to member data, or a class type whose objects can appear immediately
to the left of a function call operator.
</blockquote>

<p>
exclude functions and references to function as "target objects".
</p>
</discussion>

<resolution>
<p>
Change <sref ref="[func.require]"/>/3 b 1 as indicated:
</p>

<blockquote>
<p>
3 If a call wrapper (<sref ref="[func.def]"/>) has a <i>weak result type</i> the
type of its member type <tt>result_type</tt> is based on the type <tt>T</tt> of
the wrapper's target object (<sref ref="[func.def]"/>):
</p>

<ul>
<li>
if <tt>T</tt> is a <del>function, reference to function, or</del> pointer to
function type, <tt>result_type</tt> shall be a synonym for the return type of
<tt>T</tt>;
</li>
<li>
[..]
</li>
</ul>
</blockquote>

</resolution>

</issue>
