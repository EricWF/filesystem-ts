<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="746" status="CD1">
<title>current_exception may fail with bad_alloc</title>
<section><sref ref="[propagation]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>10 Oct 2007</date>

<discussion>
<p>
I understand that the attempt to copy an exception may run out of memory,
but I believe this is the only part of the standard that mandates failure
with specifically <tt>bad_alloc</tt>, as opposed to allowing an
implementation-defined type derived from <tt>bad_alloc</tt>.  For instance, the Core
language for a failed new expression is:
</p>
<blockquote>
<p>
Any other allocation function that fails to allocate storage shall indicate
failure only by throwing an exception of a type that would match a handler
(15.3) of type <tt>std::bad_alloc</tt> (18.5.2.1).
</p>
</blockquote>
<p>
I think we should allow similar freedom here (or add a blanket
compatible-exception freedom paragraph in 17)
</p>
<p>
I prefer the clause 17 approach myself, and maybe clean up any outstanding
wording that could also rely on it.
</p>
<p>
Although filed against a specific case, this issue is a problem throughout
the library. 
</p>

<note>
Bellevue:
</note>

<blockquote>
<p>
Is issue bigger than library?
</p>
<p>
No - Core are already very clear about their wording, which is inspiration for the issue.
</p>
<p>
While not sold on the original 18.7.5 use case, the generalised 17.4.4.8 wording is the real issue.
</p>
<p>
Accept the broad view and move to ready
</p>
</blockquote>
</discussion>

<resolution>
<p>
Add the following exemption clause to <sref ref="[res.on.exception.handling]"/>:
</p>

<blockquote>
A function may throw a type not listed in its <i>Throws</i> clause so long as it is
derived from a class named in the <i>Throws</i> clause, and would be caught by an
exception handler for the base type.
</blockquote>
</resolution>

</issue>
