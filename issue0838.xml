<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="838" status="WP">
 <title>
   Can an <i>end-of-stream</i> iterator become a <i>non-end-of-stream</i> one?
 </title>
 <section><sref ref="[istream.iterator]"/></section>
 <submitter>Martin Sebor</submitter>
 <date>17 May 2008</date>
 <discussion>
   <p>

From message c++std-lib-20003...

   </p>
   <p>

The description of <code>istream_iterator</code> in
<sref ref="[istream.iterator]"/>, p. 1 specifies that objects of the
class become the <i>end-of-stream</i> (EOS) iterators under the
following condition (see also issue <iref ref="788"/> another problem
with this paragraph):

   </p>
   <blockquote><p>

If the end of stream is reached (<code>operator void*()</code> on the
stream returns <code>false</code>), the iterator becomes equal to
the <i>end-of-stream</i> iterator value.

   </p></blockquote>
   <p>

One possible implementation approach that has been used in practice is
for the iterator to set its <code>in_stream</code> pointer to 0 when
it reaches the end of the stream, just like the default ctor does on
initialization. The problem with this approach is that
the <i>Effects</i> clause for <code>operator++()</code> says the
iterator unconditionally extracts the next value from the stream by
evaluating <code>*in_stream &gt;&gt; value</code>, without checking
for <code>(in_stream == 0)</code>.

   </p>
   <p>

Conformance to the requirement outlined in the <i>Effects</i> clause
can easily be verified in programs by setting <code>eofbit</code>
or <code>failbit</code> in <code>exceptions()</code> of the associated
stream and attempting to iterate past the end of the stream: each
past-the-end access should trigger an exception. This suggests that
some other, more elaborate technique might be intended.

   </p>
   <p>

Another approach, one that allows <code>operator++()</code> to attempt
to extract the value even for EOS iterators (just as long
as <code>in_stream</code> is non-0) is for the iterator to maintain a
flag indicating whether it has reached the end of the stream. This
technique would satisfy the presumed requirement implied by
the <i>Effects</i> clause mentioned above, but it isn't supported by
the exposition-only members of the class (no such flag is shown). This
approach is also found in existing practice.

   </p>
   <p>

The inconsistency between existing implementations raises the question
of whether the intent of the specification is that a non-EOS iterator
that has reached the EOS become a non-EOS one again after the
stream's <code>eofbit</code> flag has been cleared? That is, are the
assertions in the program below expected to pass?

   </p>
   <blockquote>
     <pre>
   sstream strm ("1 ");
   istream_iterator eos;
   istream_iterator it (strm);
   int i;
   i = *it++
   assert (it == eos);
   strm.clear ();
   strm &lt;&lt; "2 3 ";
   assert (it != eos);
   i = *++it;
   assert (3 == i);
     </pre>
   </blockquote>
   <p>

Or is it intended that once an iterator becomes EOS it stays EOS until
the end of its lifetime?

   </p>
 
 <note>
San Francisco:
</note>

<blockquote>
<p>
We like the direction of the proposed resolution. We're not sure about
the wording, and we need more time to reflect on it,
</p>
<p>
Move to Open. Detlef to rewrite the proposed resolution in such a way
that no reference is made to exposition only members of
<tt>istream_iterator</tt>.
</p>
</blockquote>

<note>
2009-07 Frankfurt:
</note>

<blockquote><p>
Move to Ready.
</p></blockquote>

</discussion>

 <resolution>
   <p>

The discussion of this issue on the reflector suggests that the intent
of the standard is for an <code>istreambuf_iterator</code> that has
reached the EOS to remain in the EOS state until the end of its
lifetime. Implementations that permit EOS iterators to return to a
non-EOS state may only do so as an extension, and only as a result of
calling <code>istream_iterator</code> member functions on EOS
iterators whose behavior is in this case undefined.

   </p>
   <p>

To this end we propose to change <sref ref="[istream.iterator]"/>, p1,
as follows:

   </p>
   <blockquote><p>

The result of operator-&gt; on an end<ins>-</ins>of<ins>-</ins>stream
is not defined. For any other iterator value a <code>const T*</code>
is returned.<ins> Invoking <code>operator++()</code> on
an <i>end-of-stream</i> iterator is undefined.</ins> It is impossible
to store things into istream iterators...

   </p></blockquote>
   <p>

Add pre/postconditions to the member function descriptions of <code>istream_iterator</code> like so:

   </p>
   <blockquote>

<pre>istream_iterator();</pre>
<p>
<i>Effects</i>: Constructs the <i>end-of-stream</i> iterator.<br/>
<ins><i>Postcondition</i>: <code>in_stream == 0</code>.</ins>
</p>
<pre>istream_iterator(istream_type &amp;s);</pre>
<p>
<i>Effects</i>: Initializes <code>in_stream</code> with &amp;s. value
may be initialized during construction or the first time it is
referenced.<br/>
<ins><i>Postcondition</i>: <code>in_stream == &amp;s</code>.</ins>
</p>
<pre>istream_iterator(const istream_iterator &amp;x);</pre>
<p>
<i>Effects</i>: Constructs a copy of <code>x</code>.<br/>
<ins><i>Postcondition</i>: <code>in_stream == x.in_stream</code>.</ins>
</p>
<pre>istream_iterator&amp; operator++();</pre>
<p>
<ins><i>Requires</i>: <code>in_stream != 0</code>.</ins><br/>
<i>Effects</i>: <code>*in_stream &gt;&gt; value</code>.
</p>
<pre>istream_iterator&amp; operator++(int);</pre>
<p>
<ins><i>Requires</i>: <code>in_stream != 0</code>.</ins><br/>
<i>Effects</i>:
</p>
<blockquote><pre>
istream_iterator tmp (*this);
*in_stream &gt;&gt; value;
return tmp;
     </pre>
     </blockquote>
   </blockquote>
 </resolution>
</issue>
