<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2056" status="New">
<title><tt>future_errc</tt> enums start with value 0 (invalid value for <tt>broken_promise</tt>)</title>
<section><sref ref="[futures.overview]"/></section>
<submitter>Nicolai Josuttis</submitter>
<date>18 May 2011</date>

<discussion>
<p>
In <sref ref="[futures.overview]"/> <tt>enum class future_errc</tt> is defined as follows:
</p><blockquote><pre>
enum class future_errc {
  broken_promise,
  future_already_retrieved,
  promise_already_satisfied,
  no_state
};
</pre></blockquote><p>
With this declaration <tt>broken_promise</tt> has value 0, which means that
for a <tt>future_error f</tt> with this code
</p><blockquote><pre>
f.code().operator bool()
</pre></blockquote><p>
yields false, which makes no sense. 0 has to be reserved for "no error".
So, the enums defined here have to start with 1.
<p/>
Howard and Anthony have no objections.
</p>
</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>
<ol>
<li><p>In <sref ref="[futures.overview]"/>, header <tt>&lt;future&gt;</tt> synopsis, fix 
the declaration of <tt>future_errc</tt> as follows:</p>
<blockquote><pre>
namespace std {
  enum class future_errc {
    <del>broken_promise,</del>
    future_already_retrieved<ins> = 1</ins>,
    promise_already_satisfied,
    no_state<ins>,
    broken_promise</ins>
  };
  [&hellip;]
}
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
