<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="794" status="Resolved">
<title><tt>piecewise_constant_distribution</tt> missing constructor</title>
<section><sref ref="[rand.dist.samp.pconst]"/></section>
<submitter>P.J. Plauger</submitter>
<date>9 Feb 2008</date>

<discussion>
<p>
<tt>piecewise_constant_distribution</tt> should have a constructor like:
</p>

<blockquote><pre>
template&lt;class _Fn&gt;
   piecewise_constant_distribution(size_t _Count,
            _Ty _Low, _Ty _High, _Fn&amp; _Func);
</pre></blockquote>

<p>
(Makes it easier to fill a histogram with function values over a range.
The two (reference <iref ref="793"/>) make a sensible replacement for
<tt>general_pdf_distribution</tt>.)
</p>

<note>
Sophia Antipolis:
</note>

<blockquote>
<p>
Marc: uses variable width of bins and weight for each bin. This is not
giving enough flexibility to control both variables.
</p>
<p>
Add a library issue to provide an constructor taking an
<tt>initializer_list&lt;double&gt;</tt> and <tt>_Fn</tt> for <tt>piecewise_constant_distribution</tt>.
</p>
<p>
Daniel to draft wording.
</p>
</blockquote>

<note>
Pre San Francisco, Daniel provided wording.
</note>

<blockquote>
The here proposed changes of the WP refer to the current state of
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2691.pdf">N2691</a>.
For reasons explained in <iref ref="793"/>, the author decided to propose a function
argument that is provided by value. The issue proposes a c'tor signature,
that does not take advantage of the full flexibility of
<tt>piecewise_constant_distribution</tt>,
because it restricts on a constant bin width, but the use-case seems to
be popular enough to justify it's introduction.
</blockquote>

</discussion>

<resolution>

<p><b>Non-concept version of the proposed resolution</b></p>

<ol>
<li>
<p>
In <sref ref="[rand.dist.samp.pconst]"/>/1, class <tt>piecewise_constant_distribution</tt>,
just <em>before</em> the member declaration
</p>

<blockquote><pre>
explicit piecewise_constant_distribution(const param_type&amp; parm);
</pre></blockquote>
<p>
insert:
</p>
<blockquote><pre>
template&lt;typename Func&gt;
piecewise_constant_distribution(size_t nf, RealType xmin, RealType xmax, Func fw);
</pre></blockquote>
</li>

<li>
<p>
Between p.4 and p.5 insert a new sequence of paragraphs nominated
below as [p5_1], [p5_2],
[p5_3], and [p5_4] as part of the new member description:
</p>

<blockquote><pre>
template&lt;typename Func&gt;
piecewise_constant_distribution(size_t nf, RealType xmin, RealType xmax, Func fw);
</pre>
<blockquote>
<p>
[p5_1] <i>Complexity:</i> Exactly <tt>nf</tt> invocations of <tt>fw</tt>.
</p>
<p>
[p5_2] <i>Requires:</i>
</p>
<ol type="a">
<li><tt>fw</tt> shall be callable with one argument of type <tt>RealType</tt>, and shall
return values of a type convertible to double;
</li>
<li>
For all sample values <tt><i>x<sub>k</sub></i></tt> defined below, fw(<tt><i>x<sub>k</sub></i></tt>) shall return a weight
value <tt><i>w<sub>k</sub></i></tt> that is non-negative, non-NaN, and non-infinity;
</li>
<li>
The following relations shall hold: <tt><i>x<sub>min</sub></i></tt> &lt; <tt><i>x<sub>max</sub></i></tt>, and
0 &lt; S = <tt><i>w<sub>0</sub></i></tt>+. . .+<tt><i>w<sub>n-1</sub></i></tt>.
</li>
</ol>
<p>
[p5_3] <i>Effects:</i>
</p>
<ol type="a">
<li>
<p>If nf == 0,</p>
 <ol type="a">
 <li>
sets deltax = <tt><i>x<sub>max</sub></i></tt> - <tt><i>x<sub>min</sub></i></tt>, and</li>
<li> lets the sequence <tt>w</tt> have length <tt>n = 1</tt> and consist of the single
    value <tt><i>w<sub>0</sub></i></tt> = 1, and</li>
<li> lets the sequence <tt>b</tt> have length <tt>n+1</tt> with <tt><i>b<sub>0</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> and 
              <tt><i>b<sub>1</sub></i></tt> = <tt><i>x<sub>max</sub></i></tt>
</li>
</ol>
</li>
<li>
<p>Otherwise,</p>
<ol type="a">
<li> sets <tt>n = nf</tt>, <tt>deltax = </tt>(<tt><i>x<sub>max</sub></i></tt> - <tt><i>x<sub>min</sub></i></tt>)/n,
                 <tt><i>x<sub>cent</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> + 0.5 * deltax, and
</li>
<li><p>lets the sequences <tt>w</tt> and <tt>b</tt> have length <tt>n</tt> and <tt>n+1</tt>, resp. and</p>
<blockquote><pre>
for each k = 0, . . . ,n-1, calculates:
  <tt><i>dx<sub>k</sub></i></tt> = k * deltax
  <tt><i>b<sub>k</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> + <tt><i>dx<sub>k</sub></i></tt>
  <tt><i>x<sub>k</sub></i></tt> = <tt><i>x<sub>cent</sub></i></tt> + <tt><i>dx<sub>k</sub></i></tt>
  <tt><i>w<sub>k</sub></i></tt> = fw(<tt><i>x<sub>k</sub></i></tt>),
</pre></blockquote> 
<p> and</p>
</li>
<li> sets <tt><i>b<sub>n</sub></i></tt> = <tt><i>x<sub>max</sub></i></tt></li>
</ol>
</li>
<li>
<p>
Constructs a <tt>piecewise_constant_distribution</tt> object with
the above computed sequence <tt>b</tt> as the interval boundaries
and with the probability densities:
</p>
<blockquote><pre>
<tt><i>&rho;<sub>k</sub></i></tt> = <tt><i>w<sub>k</sub></i></tt>/(S * deltax)  for k = 0, . . . , n-1.
</pre></blockquote> 
</li>
</ol>
<p>
[p5_4] [<i>Note:</i> In this context, the subintervals [<tt><i>b<sub>k</sub></i></tt>, <tt><i>b<sub>k+1</sub></i></tt>) are commonly
 known as the <i>bins</i> of a histogram. <i>-- end note</i>]
 </p>
</blockquote>
</blockquote>
</li>
</ol>

<p><b>Concept version of the proposed resolution</b></p>

<ol>
<li>
<p>
In <sref ref="[rand.dist.samp.pconst]"/>/1, class <tt>piecewise_constant_distribution</tt>,
just <em>before</em> the member declaration
</p>

<blockquote><pre>
explicit piecewise_constant_distribution(const param_type&amp; parm);
</pre></blockquote>
<p>
insert:
</p>
<blockquote><pre>
template&lt;Callable&lt;auto, RealType&gt; Func&gt;
 requires Convertible&lt;Func::result_type, double&gt;
piecewise_constant_distribution(size_t nf, RealType xmin, RealType xmax, Func fw);
</pre></blockquote>
</li>

<li>
<p>
Between p.4 and p.5 insert a new sequence of paragraphs nominated
below as [p5_1], [p5_2],
[p5_3], and [p5_4] as part of the new member description:
</p>

<blockquote><pre>
template&lt;Callable&lt;auto, RealType&gt; Func&gt;
 requires Convertible&lt;Func::result_type, double&gt;
piecewise_constant_distribution(size_t nf, RealType xmin, RealType xmax, Func fw);
</pre>
<blockquote>
<p>
[p5_1] <i>Complexity:</i> Exactly <tt>nf</tt> invocations of <tt>fw</tt>.
</p>
<p>
[p5_2] <i>Requires:</i>
</p>
<ol type="a">
<li>
For all sample values <tt><i>x<sub>k</sub></i></tt> defined below, fw(<tt><i>x<sub>k</sub></i></tt>) shall return a weight
value <tt><i>w<sub>k</sub></i></tt> that is non-negative, non-NaN, and non-infinity;
</li>
<li>
The following relations shall hold: <tt><i>x<sub>min</sub></i></tt> &lt; <tt><i>x<sub>max</sub></i></tt>, and
0 &lt; S = <tt><i>w<sub>0</sub></i></tt>+. . .+<tt><i>w<sub>n-1</sub></i></tt>.
</li>
</ol>
<p>
[p5_3] <i>Effects:</i>
</p>
<ol type="a">
<li>
<p>If nf == 0,</p>
 <ol type="a">
 <li>
sets deltax = <tt><i>x<sub>max</sub></i></tt> - <tt><i>x<sub>min</sub></i></tt>, and</li>
<li> lets the sequence <tt>w</tt> have length <tt>n = 1</tt> and consist of the single
    value <tt><i>w<sub>0</sub></i></tt> = 1, and</li>
<li> lets the sequence <tt>b</tt> have length <tt>n+1</tt> with <tt><i>b<sub>0</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> and 
              <tt><i>b<sub>1</sub></i></tt> = <tt><i>x<sub>max</sub></i></tt>
</li>
</ol>
</li>
<li>
<p>Otherwise,</p>
<ol type="a">
<li> sets <tt>n = nf</tt>, <tt>deltax = </tt>(<tt><i>x<sub>max</sub></i></tt> - <tt><i>x<sub>min</sub></i></tt>)/n,
                 <tt><i>x<sub>cent</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> + 0.5 * deltax, and
</li>
<li><p>lets the sequences <tt>w</tt> and <tt>b</tt> have length <tt>n</tt> and <tt>n+1</tt>, resp. and</p>
<blockquote><pre>
for each k = 0, . . . ,n-1, calculates:
  <tt><i>dx<sub>k</sub></i></tt> = k * deltax
  <tt><i>b<sub>k</sub></i></tt> = <tt><i>x<sub>min</sub></i></tt> + <tt><i>dx<sub>k</sub></i></tt>
  <tt><i>x<sub>k</sub></i></tt> = <tt><i>x<sub>cent</sub></i></tt> + <tt><i>dx<sub>k</sub></i></tt>
  <tt><i>w<sub>k</sub></i></tt> = fw(<tt><i>x<sub>k</sub></i></tt>),
</pre></blockquote> 
<p> and</p>
</li>
<li> sets <tt><i>b<sub>n</sub></i></tt> = <tt><i>x<sub>max</sub></i></tt></li>
</ol>
</li>
<li>
<p>
Constructs a <tt>piecewise_constant_distribution</tt> object with
the above computed sequence <tt>b</tt> as the interval boundaries
and with the probability densities:
</p>
<blockquote><pre>
<tt><i>&rho;<sub>k</sub></i></tt> = <tt><i>w<sub>k</sub></i></tt>/(S * deltax)  for k = 0, . . . , n-1.
</pre></blockquote> 
</li>
</ol>
<p>
[p5_4] [<i>Note:</i> In this context, the subintervals [<tt><i>b<sub>k</sub></i></tt>, <tt><i>b<sub>k+1</sub></i></tt>) are commonly
 known as the <i>bins</i> of a histogram. <i>-- end note</i>]
 </p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

<rationale>
Addressed by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2836.pdf">N2836</a> "Wording Tweaks for Concept-enabled Random Number Generation in C++0X".
</rationale>

</issue>
