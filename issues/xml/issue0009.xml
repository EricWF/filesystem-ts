<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="9" status="WP">
<title>[PDTS] Unclear why range-based-for functions return different types</title>
<section><sref ref="6 [fs.filesystem.synopsis]"/></section>
<submitter>FI-2</submitter>
<date>20 Jan 2014</date>

<discussion>
<p>It is unclear why the range-for support functions (begin()/end()) for
<tt>directory_iterator</tt> and <tt>recursive_directory_iterator</tt> return different types for <tt>begin()</tt>
and <tt>end()</tt>, namely that <tt>begin()</tt> returns a reference to <tt>const</tt> and <tt>end()</tt> returns a value.</p>

  <p>
    <i>[2014-02-07: Beman Dawes provides comments from the Boost implementation:]</i>
  </p>


  <pre>
  //  begin() and end() are only used by a range-based for statement in the context of
  //  auto - thus the top-level const is stripped - so returning const is harmless and
  //  emphasizes begin() is just a pass through.</pre>

  <note>2014-02-08: Daniel responds to Beman</note>
  
  <p>
  The difference in return types becomes relevant, when testing whether e.g. <tt>directory_iterator</tt>
  would satisfy the <tt>Traversable</tt> requirements as currently specified in 
  <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3763.html">N3763</a>. Expressed in
  code form these requirements impose that the following assertion holds:
  </p>
  <blockquote><pre>
  static_assert(std::is_same&lt;
      decltype(std::range_begin(std::declval&lt;directory_iterator&gt;())),
      decltype(std::range_end(std::declval&lt;directory_iterator&gt;()))
    &gt;::value, "No Traversable type");
  </pre></blockquote>
  <p>
  Both <tt>directory_iterator</tt> and <tt>recursive_directory_iterator</tt> won't satisfy this requirement
  currently.
  </p>
  <note>
    2014-02-11 Issaquah: Change begin() argument and return to pass-by-value. See wiki notes for rationale.
    Beman to provide wording for review next meeting.
  </note>

  <note>2014-02-13 LWG/SG-3 Issaquah: Proposed wording accepted.</note>

</discussion>

<resolution>
<ol>
<li>
  <p><i>Change 6 [fs.filesystem.synopsis]:</i></p>
  
  <pre>
  class directory_iterator;

  // enable directory_iterator range-based for statements
  <del>const</del> directory_iterator<del>&amp;</del> begin(<del>const</del> directory_iterator<del>&amp;</del> iter) noexcept;
  directory_iterator end(const directory_iterator&amp;) noexcept;

  class recursive_directory_iterator;

  // enable recursive_directory_iterator range-based for statements
  <del>const</del> recursive_directory_iterator<del>&amp;</del> begin(<del>const</del> recursive_directory_iterator<del>&amp;</del> iter) noexcept;
  recursive_directory_iterator end(const recursive_directory_iterator&amp;) noexcept;
  </pre>
</li>
<li>
  <p><i>
    Change 13.2 [directory_iterator.nonmembers]:
  </i></p>
  <p>
    These functions enable use of <code>directory_iterator</code> with C++11
    range-based for statements.
  </p>
  <pre><del>const</del> directory_iterator<del>&amp;</del> begin(<del>const</del>directory_iterator<del>&amp;</del> iter) noexcept;</pre>
  <blockquote>
    <p>
      <i>Returns: </i><code>iter</code>.
    </p>
  </blockquote>
  <pre>directory_iterator end(const directory_iterator&amp;) noexcept;</pre>
  <blockquote>
    <p>
      <i>Returns: </i><code>directory_iterator()</code>.
    </p>
  </blockquote>
</li>
<li>
  <p><i>
    Change 14.2 [rec.dir.itr.nonmembers]:
  </i></p>
  <p>
    These functions enable use of <code>recursive_directory_iterator</code>
    with C++11 range-based for statements.
  </p>
  <pre><del>const</del> recursive_directory_iterator<del>&amp;</del> begin(<del>const</del>recursive_directory_iterator<del>&amp;</del> iter) noexcept;</pre>
  <blockquote>
    <p>
      <i>Returns: </i><code>iter</code>.
    </p>
  </blockquote>
  <pre>recursive_directory_iterator end(const recursive_directory_iterator&amp;) noexcept;</pre>
  <blockquote>
    <p>
      <i>Returns: </i><code>recursive_directory_iterator()</code>.
    </p>
  </blockquote>
</li>
</ol>


</resolution>

</issue>
