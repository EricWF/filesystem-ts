<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="38" status="New">
<title>[PDTS] Make certain functions <tt>noexcept</tt> and drop <tt>error_code</tt> version</title>
<section>
  <sref ref="12.3 [directory_entry.obs]"/>,
  <sref ref="15.12 [fs.op.exists]"/>,
  <sref ref="15.16 [fs.op.is_block_file]"/>,
  <sref ref="15.17 [fs.op.is_char_file]"/>,
  <sref ref="15.18 [fs.op.is_directory]"/>,
  <sref ref="15.19 [fs.op.is_empty]"/>,
  <sref ref="15.20 [fs.op.is_fifo]"/>,
  <sref ref="15.21 [fs.op.is_other]"/>,
  <sref ref="15.22 [fs.op.is_regular_file]"/>,
  <sref ref="15.23 [fs.op.is_socket]"/>,
  <sref ref="15.24 [fs.op.is_symlink]"/>,  
  <sref ref="15.33 [fs.op.status]"/>,
  <sref ref="15.35 [fs.op.symlink_status]"/>,  
  <sref ref="15.38 [fs.op.unique_path]"/>
</section>
<submitter>P.J. Plauger</submitter>
<date>30 Jan 2014</date>

<discussion>
<p>
<tt>exists(const path&amp;)</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>is_*(const path&amp;)</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>status(const path&amp;)</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>symlink_status(const path&amp;)</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>file_status::status()</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>file_status::symlink_status()</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).<br/>
<tt>unique_path(const path&amp;)</tt> should be <tt>noexcept</tt> (drop <tt>error_code</tt> version).
</p>

<note>2014-02-08: Daniel comments</note>
<p>
<tt>unique_path(const path&amp;)</tt> cannot be declared as <tt>noexcept</tt>, because it returns an object
during whose construction a memory allocation request may fail, see the rationale provided in <iref ref="37"/>.
<p/>
<tt>exists(const path&amp;)</tt> and the <tt>is_*(const path&amp;)</tt> functions cannot be <tt>noexcept</tt>, because 
they are specified in terms of <tt>status(const path&amp;)</tt>, which again may throw an exception, which is explicitly 
described in the Effects (<tt>filesystem_error</tt>), because the non-throwing function (<tt>status(const path&amp;, error_code&amp;)</tt>) 
may fail to satisfy the request.
<p/>
<tt>symlink_status(const path&amp;)</tt> may throw an exception for similar reasons that <tt>status(const path&amp;)</tt>
could fail.
<p/>
The reference to <tt>file_status::status()/symlink_status()</tt> looks like a typo to me (there are no such functions
in <tt>file_status</tt>), presumably <tt>directory_entry::status()/symlink_status()</tt> was meant. In this case I see 
no reason how these could be marked as <tt>noexcept</tt>, because these functions all may fail and may throw an exception.
<p/>
Based on this interpretation of the issue discussion I recommend to resolve this issue as NAD.
</p>

<note>Beman Dawes 2014-02-27</note>

<p/>Issues <a href="sg3-active.html#37">37</a>,
<a href="sg3-active.html#38">38</a>,
<a href="sg3-active.html#41">41</a>,
and <a href="sg3-active.html#49">49</a> are concerned with signatures which should or should not
be <tt>noexcept</tt>. I will provide unified proposed wording for these issues, possibly in a separate paper.

</discussion>

<resolution>
<p></p>
</resolution>

</issue>
