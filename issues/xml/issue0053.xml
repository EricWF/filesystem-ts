<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="53" status="Open">
<title>[PDTS] <tt>directory_entry</tt> multithreading concerns</title>
<section><sref ref="12 [class.directory_entry]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>3 Feb 2014</date>

<discussion>
<p>12 [class.directory_entry] depicts <tt>directory_entry</tt> as having <tt>mutable m_status</tt> and
<tt>m_symlink_status</tt> data members.  This is problematic because of C++11's multithreading
guarantees, which say that <tt>const</tt> member functions are simultaneously callable.
As a result, <tt>mutable</tt> data members must be protected with synchronization, which was
probably not considered during this design.  The complexity and expense may be acceptable
in <tt>directory_entry</tt> (since it can save filesystem queries, apparently) but it would be
very very nice to have a note about this.</p>

  <note>2014-02-13 LWG/SG-3 discussed in Issaquah: Beman and STL will work together to better
  understand the concerns, and to formulate a solution. This is not a blocking issue for
  finishing the TS, but is a blocking issue for merging into the IS</note>
  
  <note>2014-04-17 Beman provides proposed wording</note>

</discussion>

<resolution>
<p><i>No changes to 12 Class directory_entry [class.directory_entry]:</i></p>
<blockquote>
<pre>private:
path                 m_path;           // for exposition only
mutable file_status  m_status;         // for exposition only; stat()-like
mutable file_status  m_symlink_status; // for exposition only; lstat()-like</pre>

<p>...</p>

<p>A <code>directory_entry</code> object stores a <code>path object</code>, 
a <code>file_status</code> object for non-symbolic link status, and a <code>file_status</code> object for symbolic link status.
The <code>file_status</code> objects act as value caches.</p>
<p>[<i>Note:</i> Because <code>status()</code>on a pathname may be a relatively expensive operation, 
some operating systems provide status information as a byproduct of directory 
iteration. Caching such status information can result in significant time savings. Cached and 
non-cached results may differ in the presence of file system races. <i>&mdash;end note</i>]</p>
</blockquote>

<p><i>Change 12.3 directory_entry observers [directory_entry.obs]:</i></p>

<blockquote>
<pre>file_status status() const;
file_status status(error_code&amp; ec) const noexcept;</pre>
<p><i>Effects:</i> As if,</p>
  <blockquote>
    <pre>if (!status_known(m_status))
{
  if (status_known(m_symlink_status) &amp;&amp; !is_symlink(m_symlink_status))
    { m_status = m_symlink_status; }
  else { m_status = status(m_path<i>[, ec]</i>); }
}</pre>
  </blockquote>
  <p><i>Returns:</i> <code>m_status</code></p>
  
  <p><ins><i>Remarks:</i> These functions shall not introduce
     a data race (C++std 17.6.5.9).</ins></p>
  
  <p><i>Throws:</i> As specified in <a href="#Error-reporting">Error reporting (7)</a>.</p>
  
</blockquote>
<pre>file_status  symlink_status() const;
file_status  symlink_status(error_code&amp; ec) const noexcept;</pre>
<blockquote>
<p>
  <i>Effects:</i> As if,</p>
  <blockquote>
    <pre>if (!status_known(m_symlink_status))
{
  m_symlink_status = symlink_status(m_path<i>[, ec]</i>);
}</pre>
  </blockquote>
  <p><i>Returns:</i> <code>m_symlink_status</code></p>
  
  <p><ins><i>Remarks:</i> These functions shall not introduce
     a data race (C++std 17.6.5.9).</ins></p>
  
  <p><i>Throws:</i> As specified in <a href="#Error-reporting">Error reporting (7)</a>.</p>
  
</blockquote>

</resolution>

</issue>
