<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2333" status="Deferred">
<title>Hashing disengaged <tt>optional&lt;T&gt;</tt> objects</title>
<section><sref ref="[optional.hash]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>3 Oct 2013</date>

<discussion>
<p>
The spec for <tt>hash&lt;optional&lt;T&gt;&gt;</tt> doesn't say anything about disengaged
objects, so <sref ref="[defns.undefined]"/> would imply it's undefined behaviour,
but that's very unhelpful to users.
<p/>
If hashing disengaged optional objects is undefined there should be a <i>Requires</i>, otherwise 
there should be some statement saying it's OK.
<p/>
It would be possible to specify the value, e.g. saying it returns the
same value as something like <tt>std::hash&lt;void*&gt;()(nullptr)</tt>, but leaving
it unspecified would permit users to specialize <tt>hash&lt;optional&lt;UserDefinedType&gt;&gt;</tt> so 
that the hash value for a disengaged object is distinct from any value returned by
<tt>hash&lt;UserDefinedType&gt;</tt>.
</p>
</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Add to <sref ref="[optional.hash]"/>/3</p>

<blockquote><pre>
template &lt;class T&gt; struct hash&lt;optional&lt;T&gt;&gt;;
</pre><blockquote>
<p>
[&hellip;]
<p/>
-3- For an object <tt>o</tt> of type <tt>optional&lt;T&gt;</tt>, if <tt>bool(o) == true</tt>, 
<tt>hash&lt;optional&lt;T&gt;&gt;()(o)</tt> shall evaluate to the same value as 
<tt>hash&lt;T&gt;()(*o)</tt> <ins>otherwise it evaluates to an unspecified value</ins>.
</p>
</blockquote></blockquote>
</li>

</ol>
</resolution>

</issue>
