<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2100" status="Review">
<title>timed waiting functions cannot timeout if <tt>launch::async</tt> policy used</title>
<section><sref ref="[futures.async]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>14 Nov 2011</date>

<discussion>

<p>
<sref ref="[futures.async]"/> p5 says
</p>

<blockquote>
<p>
If the implementation chooses the <tt>launch::async</tt> policy,
</p>
<ul><li>a call to a waiting function on an asynchronous return object that shares the 
shared state created by this <tt>async</tt> call shall block until the associated thread has
completed, as if joined (<sref ref="[thread.thread.member]"/>);</li>
</ul>
</blockquote>

<p>
That should say a non-timed waiting function, otherwise, calling a timed waiting function 
can block indefinitely waiting for the associated thread to complete, rather than timing 
out after the specified time.
<p/>
Since <tt>std::thread</tt> does not provide a <tt>timed_join()</tt> function (nor does
Pthreads, making it impossible on many platforms) there is no way for a timed waiting 
function to try to join but return early due to timeout, therefore timed waiting 
functions either cannot guarantee to timeout or cannot be used to meet the requirement 
to block until the thread is joined.  In order to allow timed waiting functions to
timeout the requirement should only apply to non-timed waiting functions.
</p>

<note>2012, Portland: move to Review</note>
<p>
Detlef: Do we actually need this fix -- is it detectable?
</p>
<p>
Yes - you will never get a timeout. Should we strike the whole paragraph?
</p>
<p>
Hans: issue with thread local destruction. 
</p>
<p>
Niklas: I have a strong expectation that a timed wait will respect the timeout
</p>
<p>
_agreed_
</p>
<p>
Detlef: we want a timed wait that does not time out to reurn like a non-timed wait; but is this implementable?
</p>
<p>
Pablo: Could we simply append ", or else time out"
</p>
<p>
Detlef: the time out on the shared state needs implementing anyway, even if the underlying O/S does not support a timed join.
</p>
<p>
Hans. the net effect is the timeout does not cover the thread local destruction... ah, I see what yuo're doing
</p>
<p>
Detlef: happy with Pablo's proposal
</p>
<p>
Wording proposed is to append after the word "joined" add ", or else time out"
</p>
<p>
Moved to review with this wording.
</p>

</discussion>

<resolution>
<note>This wording is relative to the FDIS.</note>

<p>Change <sref ref="[futures.async]"/> p5 as indicated:</p>

<blockquote>
<p>
If the implementation chooses the <tt>launch::async</tt> policy,
</p>
<ul><li>a call to a <ins>non-timed</ins> waiting function on an asynchronous return object 
that shares the shared state created by this <tt>async</tt> call shall block until the 
associated thread has completed, as if joined<ins>, or else time out</ins>
(<sref ref="[thread.thread.member]"/>);</li>
</ul>
</blockquote>

</resolution>

</issue>
