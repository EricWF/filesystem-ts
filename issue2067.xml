<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2067" status="WP">
<title><tt>packaged_task</tt> should have deleted copy c'tor with const parameter</title>
<section><sref ref="[futures.task]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>16 Jun 2011</date>

<discussion>
<p>
Class template <tt>packaged_task</tt> is a move-only type with the following form of the
deleted copy operations:
</p>
<blockquote><pre>
packaged_task(packaged_task&amp;) = delete;
packaged_task&amp; operator=(packaged_task&amp;) = delete;
</pre></blockquote>
<p>
Note that the argument types are non-const. This does not look like a typo to me,
this form seems to exist from the very first proposing paper on 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2276.html">N2276</a>.
Using either of form of the copy-constructor did not make much difference before the 
introduction of defaulted special member functions, but it makes now an observable 
difference. This was brought to my attention by a question on a German C++ newsgroup 
where the question was raised why the following code does not compile on a recent
gcc:
</p>
<blockquote><pre>
#include &lt;utility&gt;
#include &lt;future&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

int main(){
  std::packaged_task&lt;void()&gt; someTask([]{ std::cout &lt;&lt; std::this_thread::get_id() &lt;&lt; std::endl; });
  std::thread someThread(std::move(someTask)); // <span style="color:#C80000">Error here</span>
  // Remainder omitted
}
</pre></blockquote>
<p>
It turned out that the error was produced by the instantiation of some return type
of <tt>std::bind</tt> which used a defaulted copy-constructor, which leads to a
const declaration conflict with [class.copy] p8.
<p/>
Some aspects of this problem are possibly core-language related, but I consider it
more than a service to programmers, if the library would declare the usual form of
the copy operations (i.e. those with const first parameter type) as deleted for
<tt>packaged_task</tt> to prevent such problems.
<p/>
A similar problem exists for class template <tt>basic_ostream</tt> in <sref ref="[ostream]"/>:
</p>
<blockquote><pre>
namespace std {
  template &lt;class charT, class traits = char_traits&lt;charT&gt; &gt;
  class basic_ostream : virtual public basic_ios&lt;charT,traits&gt; {
    [&hellip;]

    // 27.7.3.3 Assign/swap
    basic_ostream&amp; operator=(basic_ostream&amp; rhs) = delete;
    basic_ostream&amp; operator=(const basic_ostream&amp;&amp; rhs);
    void swap(basic_ostream&amp; rhs);
};
</pre></blockquote>
<p>
albeit this could be considered as an editorial swap of copy and move
assignment operator, I suggest to fix this as part of this issue as well.
</p>

<note>
2011 Bloomington.
</note>

<p>
Move to Ready.
</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>
<ol>
<li><p>Modify the class template <tt>basic_ostream</tt> synopsis in <sref ref="[ostream]"/>
as indicated (Note: The prototype signature of the move assignment operator in <sref ref="[ostream.assign]"/>
is fine):</p>

<blockquote><pre>
namespace std {
  template &lt;class charT, class traits = char_traits&lt;charT&gt; &gt;
  class basic_ostream : virtual public basic_ios&lt;charT,traits&gt; {
    [&hellip;]

    // 27.7.3.3 Assign/swap
    basic_ostream&amp; operator=(<ins>const</ins> basic_ostream&amp; rhs) = delete;
    basic_ostream&amp; operator=(<del>const</del> basic_ostream&amp;&amp; rhs);
    void swap(basic_ostream&amp; rhs);
};
</pre></blockquote>
</li>

<li><p>Modify the class template <tt>packaged_task</tt> synopsis in <sref ref="[futures.task]"/> p2
as indicated:</p>

<blockquote><pre>
namespace std {
  template&lt;class&gt; class packaged_task; <i>// undefined</i>

  template&lt;class R, class... ArgTypes&gt;
  class packaged_task&lt;R(ArgTypes...)&gt; {
  public:
    [&hellip;]
  
    <i>// no copy</i>
    packaged_task(<ins>const</ins> packaged_task&amp;) = delete;
    packaged_task&amp; operator=(<ins>const</ins> packaged_task&amp;) = delete;
    
    [&hellip;]
  };
  [&hellip;]
}
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
