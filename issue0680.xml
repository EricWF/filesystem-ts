<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="680" status="CD1">
<title>move_iterator operator-&gt; return</title>
<section><sref ref="[move.iterator]"/></section>
<submitter>Howard Hinnant</submitter>
<date>11 Jun 2007</date>

<discussion>
<p>
<tt>move_iterator</tt>'s <tt>operator-&gt;</tt> return type <tt>pointer</tt>
does not consistently match the type which is returned in the description
in <sref ref="[move.iter.op.ref]"/>.
</p>

<blockquote><pre>
template &lt;class Iterator&gt;
class move_iterator {
public:
    ...
    typedef typename iterator_traits&lt;Iterator&gt;::pointer pointer;
    ...
    pointer operator-&gt;() const {return current;}
    ...
private: 
    Iterator current; // exposition only
};
</pre></blockquote>
</discussion>

<p>
There are two possible fixes.
</p>

<ol>
<li><tt>pointer operator-&gt;() const {return &amp;*current;}</tt></li>
<li><tt>typedef Iterator pointer;</tt></li>
</ol>

<p>
The first solution is the one chosen by <tt>reverse_iterator</tt>.  A potential
disadvantage of this is it may not work well with iterators which return a
proxy on dereference and that proxy has overloaded <tt>operator&amp;()</tt>.  Proxy
references often need to overloaad <tt>operator&amp;()</tt> to return a proxy
pointer.  That proxy pointer may or may not be the same type as the iterator's
<tt>pointer</tt> type.
</p>

<p>
By simply returning the <tt>Iterator</tt> and taking advantage of the fact that
the language forwards calls to <tt>operator-&gt;</tt> automatically until it
finds a non-class type, the second solution avoids the issue of an overloaded
<tt>operator&amp;()</tt> entirely.
</p>

<resolution>
<p>
Change the synopsis in <sref ref="[move.iterator]"/>:
</p>

<blockquote><pre>
typedef <del>typename iterator_traits&lt;</del>Iterator<del>&gt;::pointer</del> pointer;
</pre></blockquote>

</resolution>

</issue>
