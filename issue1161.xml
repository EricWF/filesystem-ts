<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1161" status="Resolved">
<title>Unnecessary <tt>unique_future</tt> limitations</title>
<section><sref ref="[futures.unique_future]"/></section>
<submitter>LWG</submitter>
<date>28 Jun 2009</date>

<discussion>

<p><b>Addresses UK 336</b></p>

<p><b>Description</b></p>

        <p>It is possible
        to transfer ownership of the asynchronous result from one
        unique_future instance to another via the move-constructor.
        However, it is not possible to transfer it back, and nor is
        it possible to create a default-constructed unique_future
        instance to use as a later move target. This unduly limits
        the use of <tt>unique_future</tt> in code. Also, the lack of a
        move-assignment operator restricts the use of <tt>unique_future</tt>
        in containers such as <tt>std::vector</tt> - <tt>vector::insert</tt> requires
        move-assignable for example.</p>
<p><b>Suggestion</b></p>
        <p>Add a default constructor with the
        semantics that it creates a <tt>unique_future</tt> with no
        associated asynchronous result. Add a move-assignment
        operator which transfers ownership.</p>
<p><b>Notes</b></p>
<p>Create an issue. Detlef will look into it.</p>

<note>
2009-07 Frankfurt
</note>

<blockquote>
Pending a paper from Anthony Williams / Detlef Vollmann.
</blockquote>

<note>
2009-10-14 Pending paper:
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2967.html">N2967</a>.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
<del>NAD Editorial</del><ins>Resolved</ins>.  Addressed by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2997.htm">N2997</a>.
</blockquote>

</discussion>

<resolution>
</resolution>

</issue>
