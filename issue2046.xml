<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2046" status="Pending NAD">
<title><tt>shared_future(future&lt;R&gt;&amp;&amp;)</tt> should be allowed to throw</title>
<section><sref ref="[futures.shared_future]"/></section>
<submitter>Peter Sommerlad</submitter>
<date>4 Apr 2011</date>

<discussion>

<p>
Requiring the constructor <tt>shared_future(future&lt;R&gt;&amp;&amp; rhs)</tt> not to throw 
is a pessimisation of the case where a future is returned from a call to 
<tt>async(function,launch::deferred)</tt> and possible other cases.
<p/>
Such a future not dealing with multiple threads only needs to keep (a copy of) the function 
to be called it later. However, creating a <tt>shared_future</tt> from that future will require more 
infrastructure, like space for the value of type <tt>R</tt>, an <tt>exception_ptr</tt>, and a synchronized 
reference counter for the <tt>shared_future</tt>'s instances.
<p/>
Enforcing the constructor <tt>shared_future(future&lt;R&gt;&amp;&amp; rhs)</tt> not to throw, 
implies that any implementation of <tt>future</tt> will need to pre-allocate space for <tt>shared_future</tt>'s 
infrastructure, that also requires an operating system resource for synchronization, regardless 
if is ever needed.
<p/>
All this came up when discussing D&#47;N3267 and Concurrency Working Group decided that the constructor 
<tt>shared_future(future&lt;R&gt;&amp;&amp; rhs)</tt> should be allowed to throw. 
</p>

<note>
2011 Bloomington
</note>

<p>
Closed as NAD.  Rationale to follow by email...
</p>
</discussion>

<resolution>

<p>Apply the proposed resolution of <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3269.htm">n3269</a></p>

</resolution>

</issue>
