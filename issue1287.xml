<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1287" status="WP">
<title><tt>std::function</tt> requires <tt>CopyConstructible</tt> target object</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>13 Dec 2009</date>

<discussion>
<p>
I think <tt>std::function</tt> should require <tt>CopyConstructible</tt> for the
target object.
</p>

<p>
I initially thought that <tt>MoveConstructible</tt> was enough, but it's not. If
<tt>F</tt> is move-only then function's copy constructor cannot be called, but
because function uses type erasure, <tt>F</tt> is not known and so the copy
constructor cannot be disabled via <tt>enable_if</tt>.  One option would be to
throw an exception if you try to copy a function with a non-copyable target
type, but I think that would be a terrible idea.
</p>

<p>
So although the constructors require that the target be initialised by
<tt>std::move(f)</tt>, that's only an optimisation, and a copy constructor is
required.
</p>

<note>
2009-12-24 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>
<p>
Add to <sref ref="[func.wrap.func.con]"/> paragraph 9:
</p>

<blockquote><pre>
template&lt;class F&gt; function(F f);
template &lt;class F, class A&gt; function(allocator_arg_t, const A&amp; a, F f);
</pre>

<blockquote><p>
9  <i>Requires:</i> <ins><tt>F</tt> shall be <tt>CopyConstructible</tt>.</ins>
<tt>f</tt> shall be callable for argument types <tt>ArgTypes</tt> and return
type <tt>R</tt>. The copy constructor and destructor of <tt>A</tt> shall not
throw exceptions.
</p></blockquote>
</blockquote>

</resolution>

</issue>
