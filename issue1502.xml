<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1502" status="Resolved">
<title>[FCD] Specification of [futures.state]</title>
<section><sref ref="[futures.state]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-195</b></p>

<p>The intent and meaning of <sref ref="[futures.state]"/> p10 is not apparent.</p>

<blockquote><p>
10 Accesses to the same shared state conflict (1.10).
</p></blockquote>

<note>
2011-03-07 Jonathan Wakely adds:
</note>
<blockquote><p>
It's not clear which paragraph this refers to, I had to go to the
ballot comments where US-195 reveals it's para 8, which in the FCD
(N3092) says:
</p><blockquote><p>
 Accesses to the same associated asynchronous state conflict (1.10).
</p></blockquote>
<p>This is now para 10 in N3242:</p>
<blockquote><p>
 Accesses to the same shared state conflict (1.10).
</p></blockquote>
</blockquote>

<note>2011-03-07: Lawrence comments and drafts wording</note>

<p>The intent of this paragraph is to deal with operations,
such as <code>shared_future::get()</code>, that return a reference
to a value held in the shared state.  User code could potentially
conflict when accessing that value.</p>

<p>Lawrence proposed resolution:</p>

<p>Modify <sref ref="[futures.state]"/> p10 as follows:</p>

<blockquote><p>
10 <del>Accesses to the same shared state conflict (<sref ref="[intro.multithread]"/>).</del><ins>Some 
  operations, e.g. <code>shared_future::get()</code>
 (<sref ref="[futures.shared_future]"/>), may return a reference to a
 value held in their shared state. Accesses and modifications through
 those references by concurrent threads to the same 
 shared state may potentially conflict (<sref ref="[intro.multithread]"/>).
 [<i>Note:</i> As a consequence, accesses must either use
 read-only operations or provide additional synchronization.
 &mdash; <i>end note</i>]</ins>
</p></blockquote>

<note>2011-03-19: Detlef suggests an alternative resolution, shown below.</note>

<note>
<p>Proposed Resolution</p>
<p>Modify <sref ref="[futures.state]"/> p10 as follows:</p>

<blockquote><p>
10 Accesses to the same shared state conflict (<sref ref="[intro.multithread]"/>). <ins>[<i>Note</i>: 
This explicitely specifies that the shared state is visible in the objects that reference this state 
in the sense of data race avoidance <sref ref="[res.on.data.races]"/>. &mdash; <i>end note</i>]</ins>
</p></blockquote>
</note>
</discussion>

<resolution>
Resolved 2011-03 Madrid meeting by paper <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3278">N3278</a>
</resolution>

</issue>
