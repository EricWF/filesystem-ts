<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="849" status="NAD">
<title>missing type traits to compute root class and derived class of types in a class hierachy</title>
<section><sref ref="[meta.trans.other]"/></section>
<submitter>Thorsten Ottosen</submitter>
<date>5 Jun 2008</date>

<discussion>
<p>
The type traits library contains various traits to dealt with
polymorphic types, e.g. <tt>std::has_virtual_destructor</tt>, <tt>std::is_polymorphic</tt>
and <tt>std::is_base_of</tt>. However, there is no way to compute the unique
public base class of a type  if such  one exists.  Such a trait could be
very useful if one needs to instantiate a specialization made for the
root class whenever a derived class is passed as parameter. For example,
imagine that you wanted to specialize <tt>std::hash</tt> for a class
hierarchy---instead of specializing each class, you could specialize the
<tt>std::hash&lt;root_class&gt;</tt> and provide a partial specialization that worked
for all derived classes.
</p>

<p>
This ability---to specify operations in terms of their equivalent in the
root class---can be done with e.g. normal functions, but there is,
AFAIK, no way to do it for class templates. Being able to access
compile-time information about the type-hierachy can be very powerful,
and I therefore also suggest traits that computes the directly derived
class whenever that is possible.
</p>

<p>
If the computation can not be done, the traits should fall back on an
identity transformation. I expect this gives the best overall usability.
</p>
</discussion>

<resolution>
<p>
Add the following to the synopsis in <sref ref="[meta.type.synop]"/> under "other transformations":
</p>

<blockquote><pre>
template&lt; class T &gt; struct direct_base_class;
template&lt; class T &gt; struct direct_derived_class;
template&lt; class T &gt; struct root_base_class;
</pre></blockquote>

<p>
Add three new entries to table 51 (<sref ref="[meta.trans.other]"/>) with the following content
</p>

<blockquote>
<table border="1">
<tr>
<th>Template</th><th>Condition</th><th>Comments</th>
</tr>
<tr>
<td><tt>template&lt; class T &gt; struct direct_base_class;</tt></td>
<td><tt>T</tt> shall be a complete type.</td>
<td>The member typedef <tt>type</tt> shall equal the accessible unambiguous direct base class of <tt>T</tt>.
If no such type exists, the member typedef <tt>type</tt> shall equal <tt>T</tt>.</td>
</tr>
<tr>
<td><tt>template&lt; class T &gt; struct direct_derived_class;</tt></td>
<td><tt>T</tt> shall be a complete type.</td>
<td>The member typedef <tt>type</tt> shall equal the unambiguous type which has <tt>T</tt>
as an accessible unambiguous direct base class. If no such type exists, the member typedef
<tt>type</tt> shall equal <tt>T</tt>.</td>
</tr>
<tr>
<td><tt>template&lt; class T &gt; struct root_base_class;</tt></td>
<td><tt>T</tt> shall be a complete type.</td>
<td>The member typedef <tt>type</tt> shall equal the accessible unambiguous most indirect base class of
<tt>T</tt>. If no such type exists, the member typedef type shall equal <tt>T</tt>.</td>
</tr>
</table>
</blockquote>

</resolution>

<rationale><p>
2008-9-16 San Francisco:  Issue pulled by author prior to being reviewed by the LWG.
</p></rationale>

</issue>
