<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1288" status="WP">
<title><tt>std::function</tt> assignment from rvalues</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>13 Dec 2009</date>

<discussion>
<p>
In <sref ref="[func.wrap.func.con]"/>
</p>

<blockquote><pre>
template&lt;class F&gt; function&amp; operator=(F f);
</pre>
<blockquote>
<p>
20        <i>Effects:</i> <tt>function(f).swap(*this);</tt>
</p>
<p>
21        <i>Returns:</i> <tt>*this</tt>
</p>
</blockquote>
</blockquote>

<p>
This assignment operator can be called such that <tt>F</tt> is an rvalue-reference e.g.
</p>

<blockquote><pre>
func.operator=&lt;F&amp;&amp;&gt;(f);
</pre></blockquote>

<p>
There are two issues with this.
</p>

<ol>
<li>
the effects mean that <tt>f</tt> is passed as an lvalue and so there will be an
unnecessary copy. The argument should be forwarded, so that the copy can be
avoided.
</li>
<li>
It should not be necessary to use that syntax to pass an rvalue. As <tt>F</tt>
is a deduced context it can be made to work with either lvalues or rvalues.
</li>
</ol>

<p>
The same issues apply to <tt>function::assign</tt>.
</p>

<p>
N.B. this issue is not related to <iref ref="1287"/> and applies whether that
issue is resolved or not. The wording below assumes the resolution of LWG <iref
ref="1258"/> has been applied.
</p>

<note>
2009-12-16 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
201002-11 Opened by Alisdair for the purpose of merging <iref ref="1258"/> into
this issue as there is a minor conflict.
</note>

<note>
2010-02-11 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>
<p>
In <sref ref="[func.wrap.func.con]"/>
</p>

<blockquote><pre>
template&lt;class F&gt; function&amp; operator=(F<ins>&amp;&amp;</ins> f);
</pre>
<blockquote>
<p>
20 <i>Effects:</i>
<tt>function(<ins>std::forward&lt;F&gt;(</ins>f<ins>)</ins>).swap(*this);</tt>
</p>
<p>
21        <i>Returns:</i> <tt>*this</tt>
</p>
</blockquote>
</blockquote>

<p>
In <sref ref="[func.wrap.func.mod]"/>
</p>

<blockquote><pre>
template&lt;class F, <del>Allocator Alloc</del><ins>class A</ins>&gt;
  void assign(F<ins>&amp;&amp; f</ins>, const A<del>lloc</del>&amp; a);
</pre>
<blockquote>
<p>
<ins>3</ins> <i>Effects:</i> <tt>function(<del>f, a</del><ins>allocator_arg, a,
std::forward&lt;F&gt;(f)</ins>).swap(*this);</tt>
</p>
</blockquote>
</blockquote>

<p>
Update member function signature for class template in <sref
ref="[func.wrap.func]"/>
</p>

<blockquote><pre>
template&lt;class F&gt; function&amp; operator=(F<ins>&amp;&amp;</ins>);

template&lt;class F, class A&gt; void assign(F<ins>&amp;&amp;</ins>, const A&amp;);
</pre></blockquote>


</resolution>

</issue>
