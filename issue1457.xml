<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1457" status="Resolved">
<title>Splitting lock-free properties</title>
<section><sref ref="[atomics.syn]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-130</b></p>

<p>
The synopsis for the <tt>&lt;atomic&gt;</tt> header lists the macros
<tt>ATOMIC_INTEGRAL_LOCK_FREE</tt> and <tt>ATOMIC_ADDRESS_LOCK_FREE</tt>.
</p>
<p>
The <tt>ATOMIC_INTEGRAL_LOCK_FREE</tt> macro has been replaced with a set of macros 
for each integral type, as listed in <sref ref="[atomics.lockfree]"/>.
</p>

<note>Proposed resolution as of comment</note>

<blockquote>
<p>
Against FCD, N3092:
</p>
<p>
In [atomics.syn], header <tt>&lt;atomic&gt;</tt> synopsis replace as indicated:
</p>
<blockquote><pre>
// 29.4, lock-free property
<del>#define ATOMIC_INTEGRAL_LOCK_FREE <em>unspecified</em></del>
<ins>#define ATOMIC_CHAR_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_CHAR16_T_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_CHAR32_T_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_WCHAR_T_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_SHORT_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_INT_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_LONG_LOCK_FREE <em>implementation-defined</em></ins>
<ins>#define ATOMIC_LLONG_LOCK_FREE <em>implementation-defined</em></ins>
#define ATOMIC_ADDRESS_LOCK_FREE <em>unspecified</em>
</pre></blockquote>
</blockquote>

<note>
2010-10-26: Daniel adds:
</note>

<p>
The proposed resolution below is against the FCD working draft. After application
of the editorial issues <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3162.html#US144">US-144</a>
and <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3162.html#US146">US-146</a> the remaining difference
against the working draft is the usage of <em>implementation-defined</em> instead of <em>unspecified</em>, effectively
resulting in this delta:
</p>

<blockquote><pre>
// 29.4, lock-free property
#define ATOMIC_CHAR_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_CHAR16_T_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_CHAR32_T_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_WCHAR_T_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_SHORT_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_INT_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_LONG_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_LLONG_LOCK_FREE <del><em>unspecified</em></del><ins><em>implementation-defined</em></ins>
#define ATOMIC_ADDRESS_LOCK_FREE <em>unspecified</em>
</pre></blockquote>

<p>
It is my understanding that the intended wording should be <em>unspecified</em> as for <tt>ATOMIC_ADDRESS_LOCK_FREE</tt>
but if this is right, we need to use the same wording in <sref ref="[atomics.lockfree]"/>, which consequently uses
the term <em>implementation-defined</em>. I recommend to keep <sref ref="[atomics.syn]"/> as it currently is and to
fix <sref ref="[atomics.lockfree]"/> instead as indicated:
</p>

<note>2011-02-24 Reflector discussion</note>
<p>
Moved to Tentatively Ready after 5 votes.
</p> 

<note>2011-02-20: Daniel adapts the proposed wording to N3225 and fixes an editorial omission of
applying <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3193.htm">N3193</a></note>

<note>2011-03-06: Daniel adapts the wording to N3242</note>

<note>Proposed Resolution</note>
<blockquote>
<p>
Change <sref ref="[atomics.lockfree]"/> as indicated:
</p>
<blockquote><pre>
#define ATOMIC_CHAR_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_CHAR16_T_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_CHAR32_T_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_WCHAR_T_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_SHORT_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_INT_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_LONG_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
#define ATOMIC_LLONG_LOCK_FREE <del><em>implementation-defined</em></del><ins><em>unspecified</em></ins>
</pre></blockquote>
</blockquote>
    
</discussion>

    
<resolution><p>
Resolved 2011-03 Madrid meeting by paper <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3278">N3278</a>
</p></resolution>

</issue>
