<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1095" status="WP">
<title><i>Shared objects and the library</i> wording unclear</title>
<section><sref ref="[res.on.objects]"/></section>
<submitter>Beman Dawes</submitter>
<date>27 Mar 2009</date>

<discussion>
<p>
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2775.htm">N2775</a>,
<i>Small library thread-safety revisions</i>, among other changes, removed a note from
<sref ref="[res.on.objects]"/> that read:
</p>

<blockquote>
[<i>Note:</i> This prohibition against concurrent non-const access means that
modifying an object of a standard library type shared between threads
without using a locking mechanism may result in a data race. <i>--end note</i>.]
</blockquote>

<p>
That resulted in wording which is technically correct but can only be
understood by reading the lengthy and complex <sref ref="[res.on.data.races]"/>
Data race avoidance. This has the effect of making
<sref ref="[res.on.objects]"/> unclear, and has already resulted in a query
to the LWG reflector. See c++std-lib-23194.
</p>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
The proposed wording seems to need a bit of tweaking
("really bad idea" isn't quite up to standardese).
We would like feedback
as to whether the original Note's removal was intentional.
</p>
<p>
Change the phrase "is a really bad idea"
to "risks undefined behavior" and
move to Review status.
</p>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Note: Change to read: "Modifying...", Delete 'thus', move to Ready
</blockquote>

</discussion>

<resolution>
<p>
Change <sref ref="[res.on.objects]"/> as indicated:
</p>

<blockquote>
<p>
The behavior of a program is undefined if calls to standard library
functions from different threads may introduce a data race. The
conditions under which this may occur are specified in 17.6.4.7.
</p>
<p><ins>
[<i>Note:</i> Modifying an object of a standard library type shared between
threads risks undefined behavior unless objects of the type are explicitly
specified as being sharable without data races or the user supplies a
locking mechanism. <i>--end note</i>]
</ins></p>
</blockquote>
</resolution>

</issue>
