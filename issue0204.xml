<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="204" status="NAD">
<title>distance(first, last) when &quot;last&quot; is before &quot;first&quot;</title>
<section><sref ref="[iterator.operations]"/></section>
<submitter>Rintala Matti</submitter>
<date>28 Jan 2000</date>

<discussion>
<p>Section 24.3.4 describes the function distance(first, last) (where first and
last are iterators) which calculates &quot;the number of increments or
decrements needed to get from 'first' to 'last'&quot;.</p>
<p>The function should work for forward, bidirectional and random access
iterators, and there is a requirement 24.3.4.5 which states that &quot;'last'
must be reachable from 'first'&quot;.</p>
<p>With random access iterators the function is easy to implement as &quot;last
- first&quot;.</p>
<p>With forward iterators it's clear that 'first' must point to a place before
'last', because otherwise 'last' would not be reachable from 'first'.</p>
<p>But what about bidirectional iterators? There 'last' is reachable from
'first' with the -- operator even if 'last' points to an earlier position than
'first'. However, I cannot see how the distance() function could be implemented
if the implementation does not know which of the iterators points to an earlier
position (you cannot use ++ or -- on either iterator if you don't know which
direction is the &quot;safe way to travel&quot;).</p>
<p>The paragraph 24.3.4.1 states that &quot;for ... bidirectional iterators they
use ++ to provide linear time implementations&quot;. However, the ++ operator is
not mentioned in the reachability requirement. Furthermore 24.3.4.4 explicitly
mentions that distance() returns the number of increments _or decrements_,
suggesting that it could return a negative number also for bidirectional
iterators when 'last' points to a position before 'first'.</p>
<p>Is a further requirement is needed to state that for forward and
bidirectional iterators &quot;'last' must be reachable from 'first' using the ++
operator&quot;. Maybe this requirement might also apply to random access
iterators so that distance() would work the same way for every iterator
category?</p>
</discussion>

<rationale>
<p>&quot;Reachable&quot; is defined in the standard in <sref ref="[iterator.concepts]"/> paragraph 6.
The definition is only in terms of operator++(). The LWG sees no defect in
the standard.</p>
</rationale>
</issue>
