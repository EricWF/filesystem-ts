<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="823" status="Resolved">
<title><tt>identity&lt;void&gt;</tt> seems broken</title>
<section><sref ref="[forward]"/></section>
<submitter>Walter Brown</submitter>
<date>9 Apr 2008</date>

<discussion>
<p>
N2588 seems to have added an <tt>operator()</tt> member function to the
<tt>identity&lt;&gt;</tt> helper in <sref ref="[forward]"/>.  I believe this change makes it no
longer possible to instantiate <tt>identity&lt;void&gt;</tt>, as it would require
forming a reference-to-<tt>void</tt> type as this <tt>operator()</tt>'s parameter type.
</p>

<p>
Suggested resolution:  Specialize <tt>identity&lt;void&gt;</tt> so as not to require
the member function's presence.
</p>

<note>
Sophia Antipolis:
</note>

<blockquote>
<p>
Jens: suggests to add a requires clause to avoid specializing on <tt>void</tt>.
</p>
<p>
Alisdair: also consider cv-qualified <tt>void</tt>.
</p>
<p>
Alberto provided proposed wording.
</p>
</blockquote>

<note>
2009-07-30 Daniel reopens:
</note>

<blockquote>
<p>
This issue became closed, because the <tt>ReferentType</tt> requirement
fixed the problem - this is no longer the case. In retrospective it seems
to be that the root of current issues around <tt>std::identity</tt> (823, <iref ref="700"/>,
<iref ref="939"/>)
is that it was standardized as something very different (an unconditional
type mapper) than traditional usage indicated (a function object that should
derive from <tt>std::unary_function)</tt>, as the SGI definition does. This issue could
be solved, if <tt>std::identity</tt> is removed (one proposal of <iref ref="939"/>), but until this
has been decided, this issue should remain open. An alternative for
removing it, would be, to do the following:
</p>

<ol type="a">
<li>
<p>
Let <tt>identity</tt> stay as a <em>real</em> function object, which would
now properly
derive from <tt>unary_function</tt>:
</p>

<blockquote><pre>
template &lt;class T&gt; struct identity : unary_function&lt;T, T&gt; {
  const T&amp; operator()(const T&amp;) const;
};
</pre></blockquote>
</li>

<li>
<p>
Invent (if needed) a generic type wrapper (corresponding to concept
<tt>IdentityOf</tt>),
e.g. <tt>identity_of</tt>, and move it's prototype description back to <sref ref="[forward]"/>:
</p>

<blockquote><pre>
template &lt;class T&gt; struct identity_of {
  typedef T type;
};
</pre></blockquote>

<p>
and adapt the <tt>std::forward</tt> signature to use <tt>identity_of</tt>
instead of <tt>identity</tt>.
</p>
</li>
</ol>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Mark as <del>NAD Editorial</del><ins>Resolved</ins>, fixed by <iref ref="939"/>.
</blockquote>

</discussion>

<resolution>
<p>
Change definition of <tt>identity</tt> in <sref ref="[forward]"/>, paragraph 2, to:
</p>

<blockquote><pre>
template &lt;class T&gt;  struct identity {
    typedef T type;

    <ins>requires ReferentType&lt;T&gt;</ins>
      const T&amp; operator()(const T&amp; x) const;
  };
</pre></blockquote>
<p>...</p>
<blockquote><pre>
  <ins>requires ReferentType&lt;T&gt;</ins>
    const T&amp; operator()(const T&amp; x) const;
</pre></blockquote>
</resolution>

<rationale>
<p>
The point here is to able to write <tt>T&amp;</tt> given <tt>T</tt> and <tt>ReferentType</tt> is
precisely the concept that guarantees so, according to N2677
(Foundational concepts). Because of this, it seems preferable than an
explicit check for <tt>cv void</tt> using <tt>SameType/remove_cv</tt> as it was suggested
in Sophia. In particular, Daniel remarked that there may be types other
than <tt>cv void</tt> which aren't referent types (<tt>int[]</tt>, perhaps?).
</p>
</rationale>

</issue>
