<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1266" status="Resolved">
<title><tt>shared_future::get</tt> and deferred <tt>async</tt> functions</title>
<section><sref ref="[futures.shared_future]"/></section>
<submitter>Anthony Williams</submitter>
<date>17 Nov 2009</date>

<discussion>
<p>
If a <tt>shared_future</tt> is constructed with the result of an <tt>async</tt> call with a
deferred function, and two or more copies of that <tt>shared_future</tt> are created,
with multiple threads calling <tt>get()</tt>, it is not clear which thread runs the
deferred function. <sref ref="[futures.shared_future]"/>p22 from
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n3000.pdf">N3000</a>
says (minus editor's note):
</p>

<blockquote><p>
<i>Effects:</i> if the associated state contains a deferred function, executes
the deferred function. Otherwise, blocks until the associated state is ready.
</p></blockquote>

<p>
In the absence of wording to the contrary, this implies that every thread that
calls <tt>wait()</tt> will execute the deferred function.
</p>

<note>
2010 Pittsburgh:  Moved to <del>NAD Editorial</del><ins>Resolved</ins>.  Rationale added below.
</note>

</discussion>

<rationale>
<p>
Solved by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3058.html">N3058</a>.
</p>
</rationale>

<resolution>
<p>
Replace <sref ref="[futures.shared_future]"/>p22 with the following:
</p>

<blockquote>
<p>
<i>Effects:</i> If the associated state 
<del>contains a deferred function, executes the deferred function. Otherwise,
blocks until the associated state is ready.</del>
<ins>was created by a <tt>promise</tt> or <tt>packaged_task</tt> object, block
until the associated state is ready. If the associated state is associated with
a thread created for an <tt>async</tt> call (<sref ref="[futures.async]"/>), as
if <tt>associated-thread.join()</tt>.
</ins></p>

<p><ins>
If the associated state contains a deferred function, calls to <tt>wait()</tt>
on all <tt>shared_future</tt> objects that share the same associated state are
serialized. The first call to <tt>wait()</tt> that shares a given associated
state executes the deferred function and stores the return value or exception in
the associated state.
</ins></p>

<p><ins>
<i>Synchronization:</i> if the associated state was created by a
<tt>promise</tt> object, the completion of <tt>set_value()</tt> or
<tt>set_exception()</tt> to that <tt>promise</tt> happens before (<sref
ref="[intro.multithread]"/>) <tt>wait()</tt> returns. If the associated state
was created by a <tt>packaged_task</tt> object, the completion of the associated
task happens before <tt>wait()</tt> returns. If the associated state is
associated with a thread created for an <tt>async</tt> call (<sref
ref="[futures.async]"/>), the completion of the associated thread happens-before
<tt>wait()</tt> returns.
</ins></p>

<p><ins>
If the associated state contained a deferred function, the invocation of the
deferred function happens-before any call to <tt>wait()</tt> on a
<tt>future</tt> that shares that state returns.
</ins></p>
</blockquote>
</resolution>

</issue>
