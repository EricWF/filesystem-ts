<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1125" status="NAD">
<title>ostream_iterator does not work with movable types</title>
<section><sref ref="[ostream.iterator.ops]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>28 May 2009</date>

<discussion>
<p>
<tt>ostream_iterator</tt> has not been updated to support moveable types, in a
similar manner to the insert iterators.
Note that this is not a problem for <tt>ostreambuf_iterator</tt>, as the types it is
restricted to dealing with do not support extra-efficient moving.
</p>

<note>
2009-11-10 Howard adds:
</note>

<blockquote><p>
Moved to Tentatively NAD after 5 positive votes on c++std-lib.  Rationale
added below.
</p></blockquote>
</discussion>

<resolution>
<p>
Add second <tt>operator=</tt> overload to class <tt>template ostream_iterator</tt>
in <sref ref="[ostream.iterator]"/>, para 2:
</p>

<blockquote><pre>
ostream_iterator&lt;T,charT,traits&gt;&amp; operator=(const T&amp; value);
<ins>ostream_iterator&lt;T,charT,traits&gt;&amp; operator=(T&amp;&amp; value);</ins>
</pre></blockquote>

<p>
Add a new paragraph: in <sref ref="[ostream.iterator.ops]"/>:
</p>

<blockquote>
<pre>
ostream_iterator&amp; operator=(T&amp;&amp; value);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i>
</p>
<blockquote><pre>
*out_stream &lt;&lt; std::move(value);
if(delim != 0)
  *out_stream &lt;&lt; delim;
return (*this);
</pre></blockquote>
</blockquote>
</blockquote>

</resolution>

<rationale>
<p>
Several objections to move forward with this issue were voiced in the thread
starting with c++std-lib-25438.  Among them is that we know of no motivating
use case to make streaming rvalues behave differently than streaming const
lvalues.
</p>
</rationale>

</issue>
