<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2285" status="Ready">
<title><tt>make_reverse_iterator</tt></title>
<section><sref ref="[reverse.iterators]"/></section>
<submitter>Zhihao Yuan</submitter>
<date>27 Aug 2013</date>

<discussion>
<p>
We have <tt>make_move_iterator</tt>, but not <tt>make_reverse_iterator</tt>, which
is also useful when dealing with some types without an <tt>rbegin</tt>/<tt>rend</tt> support (like, C strings).
</p>

<note>2013-09 Chicago</note>
<p>
Billy: reviewed it last night STL: has suggested prior, but denied for complexity 
<p/>
Billy: Alisdair wanted to review for <tt>reverse(reverse())</tt>; 
<p/>
STL: likes the issue, was like him 
<p/>
Stefanus: likes definitions, places where things should be 
<p/>
STL: for consistency with <tt>make_move_iterator</tt> 
<p/>
Stefanus: minor editorial issue - subdivision in these 2 sections is different from <sref ref="[move.iter]"/>. 
See <sref ref="[move.iter.nonmember]"/>
<p/>
STL: motion to move to Ready
<p/>
Move to Ready 
</p>

</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Change header <tt>&lt;iterator&gt;</tt> synopsis, <sref ref="[iterator.synopsis]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  template &lt;class Iterator&gt;
    reverse_iterator&lt;Iterator&gt; operator+(
      typename reverse_iterator&lt;Iterator&gt;::difference_type n,
      const reverse_iterator&lt;Iterator>&amp; x);
<ins>
  template &lt;class Iterator&gt;
    reverse_iterator&lt;Iterator&gt; make_reverse_iterator(Iterator i);
</ins>
}
</pre>
</blockquote>
</li>

<li><p>Change class template <tt>reverse_iterator</tt> synopsis, <sref ref="[reverse.iterator]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  template &lt;class Iterator&gt;
    reverse_iterator&lt;Iterator&gt; operator+(
      typename reverse_iterator&lt;Iterator&gt;::difference_type n,
      const reverse_iterator&lt;Iterator>&amp; x);
<ins>
  template &lt;class Iterator&gt;
    reverse_iterator&lt;Iterator&gt; make_reverse_iterator(Iterator i);
</ins>
}
</pre>
</blockquote>
</li>

<li><p>After <sref ref="[reverse.iter.opsum]"/> add the following new sub-clause to <sref ref="[reverse.iter.ops]"/>:</p>

<blockquote>
<pre>
<ins>
template &lt;class Iterator&gt;
  reverse_iterator&lt;Iterator&gt; make_reverse_iterator(Iterator i);
</ins>
</pre><blockquote>
<p>
<ins>-?- <i>Returns:</i> <tt>reverse_iterator&lt;Iterator&gt;(i)</tt>.</ins>
</p>
</blockquote></blockquote>
</li>

</ol>
</resolution>

</issue>
