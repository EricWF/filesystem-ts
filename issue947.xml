<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="947" status="NAD Editorial">
<title>duration arithmetic: contradictory requirements</title>
<section><sref ref="[time.duration.nonmember]"/></section>
<submitter>Pete Becker</submitter>
<date>20 Dec 2008</date>

<discussion>
<p>
In <sref ref="[time.duration.nonmember]"/>, paragraph 8 says that calling
<tt>dur / rep</tt>
when <tt>rep</tt> is an instantiation of <tt>duration</tt> requires a diagnostic.
That's followed by an <tt>operator/</tt> that takes two durations.
So <tt>dur1 / dur2</tt> is legal under the second version,
but requires a diagnostic under the first.
</p>

<note>
Howard adds:
</note>

<blockquote>
Please see the thread starting with c++std-lib-22980 for more information.
</blockquote>

<note>
Batavia (2009-05):
</note>
<blockquote>
Move to Open, pending proposed wording (and preferably an implementation).
</blockquote>

<note>
2009-07-27 Howard adds:
</note>

<blockquote>
<p>
I've addressed this issue under the proposed wording for <iref ref="1177"/> which
cleans up several places under <sref ref="[time.duration]"/> which used the
phrase "diagnostic required".
</p>
<p>
For clarity's sake, here is an example implementation of the constrained <tt>operator/</tt>:
</p>

<blockquote><pre>
template &lt;class _Duration, class _Rep, bool = __is_duration&lt;_Rep&gt;::value&gt;
struct __duration_divide_result
{
};

template &lt;class _Duration, class _Rep2,
    bool = is_convertible&lt;_Rep2,
                          typename common_type&lt;typename _Duration::rep, _Rep2&gt;::type&gt;::value&gt;
struct __duration_divide_imp
{
};

template &lt;class _Rep1, class _Period, class _Rep2&gt;
struct __duration_divide_imp&lt;duration&lt;_Rep1, _Period&gt;, _Rep2, true&gt;
{
    typedef duration&lt;typename common_type&lt;_Rep1, _Rep2&gt;::type, _Period&gt; type;
};

template &lt;class _Rep1, class _Period, class _Rep2&gt;
struct __duration_divide_result&lt;duration&lt;_Rep1, _Period&gt;, _Rep2, false&gt;
    : __duration_divide_imp&lt;duration&lt;_Rep1, _Period&gt;, _Rep2&gt;
{
};

template &lt;class _Rep1, class _Period, class _Rep2&gt;
inline
typename __duration_divide_result&lt;duration&lt;_Rep1, _Period&gt;, _Rep2&gt;::type
operator/(const duration&lt;_Rep1, _Period&gt;&amp; __d, const _Rep2&amp; __s)
{
    typedef typename common_type&lt;_Rep1, _Rep2&gt;::type _Cr;
    duration&lt;_Cr, _Period&gt; __r = __d;
    __r /= static_cast&lt;_Cr&gt;(__s);
    return __r;
}
</pre></blockquote>

<p>
<tt>__duration_divide_result</tt> is basically a custom-built <tt>enable_if</tt>
that will contain <tt>type</tt> only if <tt>Rep2</tt> is not a <tt>duration</tt>
and if <tt>Rep2</tt> is implicitly convertible to
<tt>common_type&lt;typename Duration::rep, Rep2&gt;::type</tt>. <tt>__is_duration</tt>
is simply a private trait that answers <tt>false</tt>, but is specialized for
<tt>duration</tt> to answer <tt>true</tt>.
</p>

<p>
The constrained <tt>operator%</tt> works identically.
</p>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Mark NAD Editorial, fixed by <iref ref="1177"/>.
</blockquote>

</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
