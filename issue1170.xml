<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1170" status="WP">
<title>String <i>char-like types</i> no longer PODs</title>
<section><sref ref="[strings.general]"/></section>
<submitter>Beman Dawes</submitter>
<date>22 Jun 2009</date>

<discussion>

<p><b>Addresses UK 218</b></p>

<p>Prior to the introduction of constant expressions into the library, 
<tt>basic_string</tt> elements had to be POD types, and thus had to be both trivially 
copyable and standard-layout. This ensured that they could be memcpy'ed and 
would be compatible with other libraries and languages, particularly the C 
language and its library.</p>
<p>
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2349.pdf">N2349</a>,
Constant Expressions in the Standard Library Revision 2, changed the 
requirement in 21/1 from &quot;POD type&quot; to &quot;literal type&quot;. That change had the 
effect of removing the trivially copyable and standard-layout requirements from 
<tt>basic_string</tt> elements.</p>
<p>This means that <tt>basic_string</tt> elements no longer are guaranteed to be 
memcpy'able, and are no longer guaranteed to be standard-layout types:</p>
<blockquote>
  <p>3.9/p2 and 3.9/p3 both make it clear that a &quot;trivially copyable type&quot; is 
  required for memcpy to be guaranteed to work.</p>
  <p>Literal types (3.9p12) may have a non-trivial copy assignment operator, and 
  that violates the trivially copyable requirements given in 9/p 6, bullet item 
  2. </p>
  <p>Literal types (3.9p12) have no standard-layout requirement, either.</p>
</blockquote>
<p>This situation probably arose because the wording for &quot;Constant Expressions 
in the Standard Library&quot; was in process at the same time the C++ POD 
deconstruction wording was in process. </p>
<p>Since trivially copyable types meet the C++0x requirements for literal types, 
and thus work with constant expressions, it seems an easy fix to revert the 
<tt>basic_string</tt> element wording to its original state.</p>

 <note>
 2009-07-28 Alisdair adds:
 </note>
 
<blockquote>
When looking for any resolution for this issue, consider the definition of
"character container type" in <sref ref="[defns.character.container]"/>.  This
does require the character type to be a POD, and this term is used in a
number of places through clause 21 and 28. This suggests the PODness
constraint remains, but is much more subtle than before.  Meanwhile, I
suspect the change from POD type to literal type was intentional with
the assumption that trivially copyable types with
non-trivial-but-constexpr constructors should serve as well.  I don't
believe the current wording offers the right guarantees for either of
the above designs.
</blockquote>

<note>
2009-11-04 Howard modifies proposed wording to disallow array types as
char-like types.
</note>

<note>
2010-01-23 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>

<p><i>Change General <sref ref="[strings.general]"/> as indicated:</i></p>
<blockquote>
<p>This Clause describes components for manipulating sequences of any
<del>literal</del> <ins>non-array POD</ins> (3.9) type. In this Clause
such types are called <i>char-like types</i>, and objects of char-like
types are called <i>char-like objects</i> or simply
<i>characters</i>.</p>
</blockquote>

</resolution>

</issue>
