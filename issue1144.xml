<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1144" status="C++11">
<title>"thread safe" is undefined</title>
<section><sref ref="[support.start.term]"/></section>
<submitter>LWG</submitter>
<date>16 Jun 2009</date>

<discussion>

<p><b>Addresses UK 187</b></p>

<p>
The term "thread safe" is not defined nor used in this context
anywhere else in the standard.
</p>

<p><b>Suggested action:</b></p>
<p>
Clarify the meaning of "thread safe".
</p>

<note>
2009 Santa Cruz:
</note>

<blockquote>
<p>
The "thread safe" language has already been change in the WP. It was
changed to "happen before", but the current WP text is still a little
incomplete: "happen before" is binary, but the current WP text only
mentions one thing.
</p>
<p>
Move to Ready.
</p>
</blockquote>

</discussion>

<resolution>
<p>
For the following functions in <sref ref="[support.start.term]"/>.
</p>
<blockquote><pre><code>
extern "C" int at_quick_exit(void (*f)(void));
extern "C++" int at_quick_exit(void (*f)(void));
</code></pre></blockquote>

<p>
Edit paragraph 10 as follows.
The intent is
to provide the other half of the happens before relation;
to note indeterminate ordering;
and to clean up some formatting.
</p>
<blockquote><p>
<i>Effects:</i>
The <code>at_quick_exit()</code> functions
register the function pointed to by <code>f</code>
to be called without arguments when <code>quick_exit</code> is called.
It is unspecified whether a call to <code>at_quick_exit()</code>
that does not <del>happen-before</del> <ins>happen before</ins> (1.10)
<ins>all calls to <code>quick_exit</code></ins>
will succeed.
[<i>Note:</i>
the <code>at_quick_exit()</code> functions
shall not introduce a data race (17.6.4.7).
<del>exitnote</del>
<ins>&mdash;<i>end note</i>]</ins>
<ins>
[<i>Note:</i>
The order of registration may be indeterminate
if <code>at_quick_exit</code> was called from more than one thread.
&mdash;<i>end note</i>]
</ins>
[<i>Note:</i> The <code>at_quick_exit</code> registrations
are distinct from the <code>atexit</code> registrations,
and applications may need to call both registration functions
with the same argument.
&mdash;<i>end note</i>]
</p></blockquote>

<p>
For the following function.
</p>
<blockquote><pre><code>
void quick_exit [[noreturn]] (int status)
</code></pre></blockquote>

<p>
Edit paragraph 13 as follows.
The intent is to note that thread-local variables may be different.
</p>
<blockquote><p>
<i>Effects:</i>
Functions registered by calls to <code>at_quick_exit</code>
are called in the reverse order of their registration,
except that a function shall be called
after any previously registered functions
that had already been called at the time it was registered.
Objects shall not be destroyed as a result of calling <code>quick_exit</code>.
If control leaves a registered function called by <code>quick_exit</code>
because the function does not provide a handler for a thrown exception,
<code>terminate()</code> shall be called.
<ins>
[<i>Note:</i>
Functions registered by one thread may be called by any thread,
and hence should not rely on the identity of thread-storage-duration objects.
&mdash;<i>end note</i>]
</ins>
After calling registered functions,
<code>quick_exit</code> shall call <code>_Exit(status)</code>.
[<i>Note:</i>
The standard file buffers are not flushed.
See: ISO C 7.20.4.4.
&mdash;<i>end note</i>]
</p></blockquote>
</resolution>

</issue>
