<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1358" status="Open">
<title>[FCD] Add <tt>&lt;chrono></tt> and <tt>&lt;ratio></tt> to
freestanding implementations</title>
<section><sref ref="[compliance]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-55</b></p>
<p>
The <tt>&lt;thread></tt> header uses <tt>duration</tt> types, found in the
<tt>&lt;chrono></tt> header, and which rely on the <tt>ratio</tt> types
declared in the <tt>&lt;ratio></tt> header.
</p>

<note>
Extracts from lengthy Rapperswil discussion:
</note>
<p>
There is a concern that this issue is a misunderstanding of the actual
requirements of a free-standing implementation to support the <tt>&lt;thread></tt>
header.  In general, a free-standanding implementation will provide an <em>empty</em>
header, specifically so that a user can test for the absence of the 
<tt>_ _ STDCPP_THREADS _ _</tt> macro.  This idiom as used as there is no portable way to test for the lack of a header.
</p>
<p>
At this point, it was suggested the NB comment is trying to solve the wrong problem, and that <tt>_ _ STDCPP_THREADS _ _</tt> should be a pre-defined macro in clause 16 that can be tested before including <tt>&lt;thread></tt>.  That would remove the need to add additional headers to the free-standanding requirements.
</p>
<p>
It is worth noting that Japan requested <tt>&lt;ratio></tt> as a free-standing header in their CD1 comments.  No-one seemed keen to require clocks of a free-standing implementation though.
</p>

<p>Detlef volunteers to look at a way to redraft 17.6.1.3 p3.</p> 

<note>
Original resolution proposed by NB comment:
</note>

<blockquote>
<p>
Add the <tt>&lt;chrono></tt> and <tt>&lt;ratio></tt> headers to the
freestanding requirements.
</p>
<p>
It might be necessary to address scaled-down
expectations of clock support in a freestanding
environment, much like <tt>&lt;thread></tt>.
</p>
</blockquote>

<note>2011-02-25: Alberto drafts wording</note>
</discussion>

<resolution>
<ol>
<li><p>Add a new entry in Table 14 &mdash; C++ library headers:</p>

<blockquote>
<table border="1">
<caption>Table 14 &mdash; C++ library headers</caption>
<tr>
<td style="text-align:center;">&hellip;</td>
</tr>
<tr>
<td><tt>&lt;iterator&gt;</tt></td>
</tr>
<tr>
<td><ins><tt>&lt;library_support&gt;</tt></ins></td>
</tr>
<tr>
<td><tt>&lt;limits&gt;</tt></td>
</tr>
<tr>
<td style="text-align:center;">&hellip;</td>
</tr>
</table>
</blockquote>  
</li>

<li><p>Remove the last row <sref ref="[thread.threads]"/> <tt>&lt;threads&gt;</tt>
from Table 16 &mdash; C++ headers for freestanding implementations and insert
a new one instead (To the editor: For the actual target Clause please see the comment
in bullet 5 of this proposed resolution):</p>

<blockquote>
<table border="1">
<caption>Table 16 &mdash; C++ headers for freestanding implementations</caption>

<tr>
<th>Subclause</th>
<th>Header(s)</th>
</tr>

<tr>
<td colspan="2" style="text-align:center;">&hellip;</td>
</tr>

<tr>
<td><del><sref ref="[thread.threads]"/> Threads</del></td>
<td><del><tt>&lt;thread&gt;</tt></del></td>
</tr>

<tr>
<td><ins>?? Library support</ins></td>
<td><ins><tt>&lt;library_support&gt;</tt></ins></td>
</tr>

</table>

</blockquote>
 </li>
 
 <li><p>Modify paragraph <sref ref="[compliance]"/> p. 3:</p>
 <blockquote><p>
 3 The supplied version of the header <tt>&lt;cstdlib&gt;</tt> shall declare at least the functions 
 <tt>abort</tt>, <tt>atexit</tt>, <tt>at_quick_exit</tt>, <tt>exit</tt>, and <tt>quick_exit</tt> 
 (18.5). <del>The supplied version of the header <tt>&lt;thread&gt;</tt> shall meet the
same requirements as for a hosted implementation or including it shall have no effect</del>. The 
other headers listed in this table shall meet the same requirements as for a hosted 
implementation. <ins>A program can detect the presence of standard headers not listed in Table
16 using the facilities provided by the <tt>&lt;library_support&gt;</tt> header.</ins>
</p></blockquote>
</li>
 
<li><p>Remove the following line from the header <tt>&lt;thread&gt;</tt> synopsis in <sref ref="[thread.threads]"/> p. 1:</p>
<blockquote><pre>
namespace std {
  <del>#define __STDCPP_THREADS__ __cplusplus</del>

  class thread;
  [...]
}
</pre></blockquote>
</li>

<li><p>Add a new section in Clause 18 or 20 (or any other suitable place at
the editor's discretion):</p>

<blockquote>
<p><ins>?? Library support [library.support]</ins></p>
<blockquote><p>
<ins>The header <tt>&lt;library_support&gt;</tt> defines an implementation-defined set 
of macros to allow a program detect the presence of standard headers in freestanding
implementations. [<i>Note</i>: Hosted implementations shall provide all
standard headers, thus shall provide all macros. &mdash; <i>end note</i>]</ins>
</p></blockquote>
<blockquote><p>
<ins>For each standard header listed in Tables 14 (C++ library headers) and 15 (C++ headers for C library facilities)
that is provided by the implementation, <tt>&lt;library_support&gt;</tt> shall define a macro with name 
<code>_ _HAS_<i>XXX</i>_HEADER_ _</code> where <code><i>XXX</i></code> is replaced by the uppercase version of the 
name of the header. Each such macro shall expand to the value <code>_ _cplusplus</code>.
[<i>Example</i>:</ins></p>
<blockquote><pre>
<ins>#include &lt;library_support&gt;

#ifdef _ _HAS_THREADS_HEADER_ _
  #include &lt;threads&gt;
  // code that exploit the presence of threads
#else
  // fallback code that doesn't rely on threads
#endif</ins>
</pre></blockquote>
<p><ins>&mdash; <i>end example</i>]</ins></p>
</blockquote>
<blockquote><p>
<ins>No other standard header shall define macros with a name beginning with <code>_ _HAS_</code>
and ending with <code>_HEADER_ _</code>.</ins>
</p></blockquote>

</blockquote>
</li>
</ol>
</resolution>

</issue>
