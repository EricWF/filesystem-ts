<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="905" status="Dup">
<title>Mutex specification questions</title>
<section><sref ref="[thread.mutex.class]"/></section>
<submitter>Herb Sutter</submitter>
<date>18 Sep 2008</date>

<discussion>
<p>
A few questions on the current WP,
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf">N2723</a>:
</p>
<p>
<sref ref="[thread.mutex.requirements]"/>/24 says an expression
<tt>mut.unlock()</tt> "Throws: Nothing." I'm assuming that, per <sref
ref="[res.on.required]"/>, errors that violate the precondition "The
calling thread shall own the mutex" opens the door for throwing an
exception anyway, such as to report unbalanced unlock operations and
unlocking from a thread that does not have ownership. Right?
</p>
<p>
<sref ref="[thread.mutex.class]"/>/3 (actually numbered paragraph "27"
in the WP; this is just a typo I think) says
</p>
<blockquote>
<p>
The behavior of a program is undefined if:
</p>
<ul>
<li>it destroys a <tt>mutex</tt> object owned by any thread,</li>
<li>a thread that owns a <tt>mutex</tt> object calls <tt>lock()</tt> or <tt>try_lock()</tt> on that object, or</li>
<li>a thread terminates while owning a <tt>mutex</tt> object.</li>
</ul>
</blockquote>

<p>
As already discussed, I think the second bullet should be removed, and
such a <tt>lock()</tt> or <tt>try_lock()</tt> should fail with an
exception or returning <tt>false</tt>, respectively.
</p>
<p>
A potential addition to the list would be
</p>
<ul>
<li>a thread unlocks a <tt>mutex</tt> it does not have ownership of.</li>
</ul>
<p>
but without that the status quo text endorses the technique of the
program logically transferring ownership of a mutex to another thread
with correctness enforced by programming discipline. Was that intended?
</p>

<note>
Summit:
</note>

<blockquote>
<p>
Two resolutions: "not a defect" and "duplicate", as follows:
</p>
<ul>
<li>
<sref ref="[thread.mutex.requirements]"/>/24: NAD. If the precondition
fails the program has undefined behaviour and therefore an
implementation may throw an exception already.
</li>
<li>
<sref ref="[thread.mutex.class]"/>/3 bullet 2: Already addressed by issue <iref ref="893"/>.
</li>
<li>
<sref ref="[thread.mutex.class]"/>/3 proposed addition: NAD. This is
already covered by the mutex requirements, which have ownership as a
Precondition.
</li>
</ul>
</blockquote>
</discussion>

<resolution>
<duplicate><iref ref="893"/></duplicate>
</resolution>

</issue>
