<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2130" status="New">
<title>Missing ordering constraints</title>
<section><sref ref="[atomics.order]"/></section>
<submitter>Clark Nelson</submitter>
<date>22 Feb 2012</date>

<discussion>
<p><b>C11 issue 407</b></p>

<p>
It seems that both C11 and C++11 are missing the following two derivatives of this rule:
</p>
<blockquote>
  For atomic modifications <tt>A</tt> and <tt>B</tt> of an atomic object <tt>M</tt>, if there is
  a <tt>memory_order_seq_cst fence</tt> <tt>X</tt> such that <tt>A</tt> is sequenced before <tt>X</tt>,
  and <tt>X</tt> precedes <tt>B</tt> in <tt>S</tt>, then <tt>B</tt> occurs later than <tt>A</tt> in the
  modification order of <tt>M</tt>.
</blockquote>
<blockquote>
  For atomic modifications <tt>A</tt> and <tt>B</tt> of an atomic object <tt>M</tt>, if there is
  a <tt>memory_order_seq_cst</tt> fence <tt>Y</tt> such that <tt>Y</tt> is sequenced before <tt>B</tt>,
  and <tt></tt>A precedes <tt>Y</tt> in <tt>S</tt>, then <tt>B</tt> occurs later than <tt>A</tt> in the
  modification order of <tt>M</tt>.
</blockquote>
<p>
Above wording has been added to the Technical Corrigendum of C11 via issue 407, details can be found 
<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1584.pdf">here</a>.
</p>

</discussion>

<resolution>
<p>This wording is relative to the N3376.</p>

<ol>
<li><p>Following <sref ref="[atomics.order]"/> paragraph 8 insert the following two new paragraphs:</p>

<p>
-7- For atomic operations <i>A</i> and <i>B</i> on an atomic object <i>M</i>, if there are <tt>memory_order_seq_cst</tt> 
fences <i>X</i> and <i>Y</i> such that <i>A</i> is sequenced before <i>X</i>, <i>Y</i> is sequenced before <i>B</i>, 
and <i>X</i> precedes <i>Y</i> in <i>S</i>, then <i>B</i> occurs later than <i>A</i> in the modification order of <i>M</i>.
<p/>
-8- [ <i>Note</i>: <tt>memory_order_seq_cst</tt> ensures sequential consistency only for a program that is free of data races
and uses exclusively <tt>memory_order_seq_cst</tt> operations. Any use of weaker ordering will invalidate this
guarantee unless extreme care is used. In particular, <tt>memory_order_seq_cst</tt> fences ensure a total order
only for the fences themselves. Fences cannot, in general, be used to restore sequential consistency for atomic
operations with weaker ordering specifications. &mdash; <i>end note</i> ]
<p/>
<ins>-?- For atomic modifications <i>A</i> and <i>B</i> of an atomic object <i>M</i>, if there is
  a <tt>memory_order_seq_cst</tt> fence <i>X</i> such that <i>A</i> is sequenced before <i>X</i>,
  and <i>X</i> precedes <i>B</i> in <i>S</i>, then <i>B</i> occurs later than <i>A</i> in the
  modification order of <i>M</i>.</ins>
<p/>
<ins>-?- For atomic modifications <i>A</i> and <i>B</i> of an atomic object <i>M</i>, if there is
  a <tt>memory_order_seq_cst</tt> fence <i>Y</i> such that <i>Y</i> is sequenced before <i>B</i>,
  and <i>A</i> precedes <i>Y</i> in <i>S</i>, then <i>B</i> occurs later than <i>A</i> in the
  modification order of <i>M</i>.</ins>
</p>
</li>
</ol>

</resolution>

</issue>
