<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="366" status="NAD">
<title>Excessive const-qualification</title>
<section><sref ref="[input.output]"/></section>
<submitter>Walter Brown, Marc Paterno</submitter>
<date>10 May 2002</date>

<discussion>
<p>
The following member functions are declared const, yet return non-const
pointers. We believe they are should be changed, because they allow code
that may surprise the user. See document N1360 for details and
rationale.
</p>

<note>Santa Cruz: the real issue is that we've got const member
functions that return pointers to non-const, and N1360 proposes
replacing them by overloaded pairs.  There isn't a consensus about
whether this is a real issue, since we've never said what our
constness policy is for iostreams.  N1360 relies on a distinction
between physical constness and logical constness; that distinction, or
those terms, does not appear in the standard.</note>

</discussion>

<resolution>
<p>In 27.4.4 and 27.4.4.2</p>
<p>Replace</p>
<pre>
  basic_ostream&lt;charT,traits&gt;* tie() const;
</pre>
<p>with</p>
<pre>
  basic_ostream&lt;charT,traits&gt;* tie();
  const basic_ostream&lt;charT,traits&gt;* tie() const;
</pre>

<p>and replace</p>
<pre>
  basic_streambuf&lt;charT,traits&gt;* rdbuf() const;
</pre>
<p>with</p>
<pre>
  basic_streambuf&lt;charT,traits&gt;* rdbuf();
  const basic_streambuf&lt;charT,traits&gt;* rdbuf() const;
</pre>

<p>In 27.5.2 and 27.5.2.3.1</p>
<p>Replace</p>
<pre>
  char_type* eback() const;
</pre>
<p>with</p>
<pre>
  char_type* eback();
  const char_type* eback() const;
</pre>

<p>Replace</p>
<pre>
  char_type gptr() const;
</pre>
<p>with</p>
<pre>
  char_type* gptr();
  const char_type* gptr() const;
</pre>

<p>Replace</p>
<pre>
  char_type* egptr() const;
</pre>
<p>with</p>
<pre>
  char_type* egptr();
  const char_type* egptr() const;
</pre>

<p>In 27.5.2 and 27.5.2.3.2</p>
<p>Replace</p>
<pre>
  char_type* pbase() const;
</pre>
<p>with</p>
<pre>
  char_type* pbase();
  const char_type* pbase() const;
</pre>

<p>Replace</p>
<pre>
  char_type* pptr() const;
</pre>
<p>with</p>
<pre>
  char_type* pptr();
  const char_type* pptr() const;
</pre>

<p>Replace</p>
<pre>
  char_type* epptr() const;
</pre>
<p>with</p>
<pre>
  char_type* epptr();
  const char_type* epptr() const;
</pre>

<p>In 27.7.2, 27.7.2.2, 27.7.3 27.7.3.2, 27.7.4, and 27.7.6</p>
<p>Replace</p>
<pre>
  basic_stringbuf&lt;charT,traits,Allocator&gt;* rdbuf() const;
</pre>
<p>with</p>
<pre>
  basic_stringbuf&lt;charT,traits,Allocator&gt;* rdbuf();
  const basic_stringbuf&lt;charT,traits,Allocator&gt;* rdbuf() const;
</pre>

<p>In  27.8.1.5, 27.8.1.7, 27.8.1.8, 27.8.1.10, 27.8.1.11, and 27.8.1.13</p>
<p>Replace</p>
<pre>
  basic_filebuf&lt;charT,traits&gt;* rdbuf() const;
</pre>
<p>with</p>
<pre>
  basic_filebuf&lt;charT,traits&gt;* rdbuf();
  const basic_filebuf&lt;charT,traits&gt;* rdbuf() const;
</pre>
</resolution>

<rationale>
<p>The existing specification is a bit sloppy, but there's no
  particular reason to change this other than tidiness, and there are
  a number of ways in which streams might have been designed
  differently if we were starting today.  There's no evidence that the
  existing constness policy is harming users.  We might consider
  a different constness policy as part of a full stream redesign.</p>
</rationale>

</issue>
