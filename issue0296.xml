<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="296" status="C++11">
<title>Missing descriptions and requirements of pair operators</title>
<section><sref ref="[pairs]"/></section>
<submitter>Martin Sebor</submitter>
<date>14 Jan 2001</date>

<discussion>
<p>The synopsis of the header <tt>&lt;utility></tt> in <sref ref="[utility]"/>
lists the complete set of equality and relational operators for <tt>pair</tt>
but the section describing the template and the operators only describes
<tt>operator==()</tt> and <tt>operator&lt;()</tt>, and it fails to mention
any requirements on the template arguments. The remaining operators are
not mentioned at all.
</p>

<note>
2009-09-27 Alisdair reopens.
</note>

<blockquote>
<p>
The issue is a lack of wording specifying the semantics of <tt>std::pair</tt>
relational operators.  The rationale is that this is covered by
catch-all wording in the relops component, and that as relops directly
precedes <tt>pair</tt> in the document this is an easy connection to make.
</p>

<p>
Reading the current working paper I make two observations:
</p>

<ol style="list-style-type:lower-roman">
<li>
relops no longer immediately precedes <tt>pair</tt> in the order of
specification.  However, even if it did, there is a lot of <tt>pair</tt>
specification itself between the (apparently) unrelated relops and the
relational operators for <tt>pair</tt>.  (The catch-all still requires
<tt>operator==</tt> and <tt>operator&lt;</tt> to be specified
explicitly)
</li>

<li>
No other library component relies on the catch-all clause. The following
all explicitly document all six relational operators, usually in a
manner that could have deferred to the relops clause.
</li>
</ol>

<blockquote><pre>
tuple
unique_ptr
duration
time_point
basic_string
queue
stack
move_iterator
reverse_iterator 
regex submatch
thread::id
</pre></blockquote>

<p>
The container components provide their own (equivalent) definition in
<sref ref="[container.requirements.general]"/> Table 90 -- Container
requirements and do so do not defer to relops.
</p>

<p>
<tt>Shared_ptr</tt> explicitly documents <tt>operator!=</tt> and does
not supply the other 3 missing operators
(<tt>&gt;</tt>,<tt>&gt;=</tt>,<tt>&lt;=</tt>) so does not meet the
reqirements of the relops clause.
</p>

<p>
<tt>Weak_ptr</tt> only supports <tt>operator&lt;</tt> so would not be
covered by relops.
</p>

<p>
At the very least I would request a note pointing to the relops clause
we rely on to provide this definition.  If this route is taken, I would
recommend reducing many of the above listed clauses to a similar note
rather than providing redundant specification.
</p>

<p>
My preference would be to supply the 4 missing specifications consistent
with the rest of the library.
</p>

</blockquote>

<note>
2009-10-11 Daniel opens <iref ref="1233"/> which deals with the same issue as
it pertains to <tt>unique_ptr</tt>.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Move to Ready
</p></blockquote>

</discussion>

<resolution>
<p>
After p20 <sref ref="[pairs]"/> add:
</p>

<blockquote><pre>
template &lt;class T1, class T2&gt;
bool operator!=(const pair&lt;T1,T2&gt;&amp; x, const pair&lt;T1,T2&gt;&amp; y);
</pre>

<blockquote><p>
<i>Returns:</i> <tt>!(x==y)</tt>
</p></blockquote>

<pre>
template &lt;class T1, class T2&gt;
bool operator&gt; (const pair&lt;T1,T2&gt;&amp; x, const pair&lt;T1,T2&gt;&amp; y);
</pre>

<blockquote><p>
<i>Returns:</i> <tt>y &lt; x</tt>
</p></blockquote>

<pre>
template &lt;class T1, class T2&gt;
bool operator&gt;=(const pair&lt;T1,T2&gt;&amp; x, const pair&lt;T1,T2&gt;&amp; y);
</pre>

<blockquote><p>
<i>Returns:</i> <tt>!(x &lt; y)</tt>
</p></blockquote>

<pre>
template &lt;class T1, class T2&gt;
bool operator&lt;=(const pair&lt;T1,T2&gt;&amp; x, const pair&lt;T1,T2&gt;&amp; y);
</pre>

<blockquote><p>
<i>Returns:</i> <tt>!(y &lt; x)</tt>
</p></blockquote>
</blockquote>
</resolution>

<rationale>
<p><sref ref="[operators]"/> paragraph 10 already specifies the semantics.
That paragraph says that, if declarations of operator!=, operator&gt;,
operator&lt;=, and operator&gt;= appear without definitions, they are
defined as specified in <sref ref="[operators]"/>.  There should be no user
confusion, since that paragraph happens to immediately precede the
specification of <tt>pair</tt>.</p>
</rationale>

</issue>
