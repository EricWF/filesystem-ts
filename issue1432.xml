<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1432" status="WP">
<title>[FCD] <tt>random_shuffle</tt> signatures</title>
<section><sref ref="[alg.random.shuffle]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<duplicate><iref ref="1433"/></duplicate>
<p><b>Addresses US-121, GB-119</b></p>

<p>
<tt>random_shuffle</tt> and <tt>shuffle</tt> should be consistent in how
they accept their source of randomness: either both by rvalue reference or 
both by lvalue reference.
</p>

<note>
Post-Rapperswil, Daniel provided wording
</note>

<p>
The signatures of the <tt>shuffle</tt> and <tt>random_shuffle</tt> algorithms are different
in regard to the support of rvalues and lvalues of the provided generator:
</p>

<blockquote><pre>
template&lt;class RandomAccessIterator, class RandomNumberGenerator&gt;
void random_shuffle(RandomAccessIterator first,
RandomAccessIterator last,
RandomNumberGenerator<b>&amp;&amp;</b> rand);
</pre></blockquote>

<blockquote><pre>
template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;
void shuffle(RandomAccessIterator first,
RandomAccessIterator last,
UniformRandomNumberGenerator<b>&amp;</b> g);
</pre></blockquote>

<p>
The first form uses the perfect forwarding signature and that change compared to
<tt>C++03</tt> was done intentionally as shown in the first rvalue proposal 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1690.html#Improved%20random_shuffle">papers</a>.
</p>

<p>
While it is true, that random generators are excellent examples of stateful
functors, there still exist good reasons to support rvalues as arguments:
</p>

<p>
<ol>
<li>If one of the shuffle algorithms is called with the intention to shuffle items with a reproducible ordering 
	from a given generator class, it makes sense to create a generator exactly at the call point.
</li>
<li>Other algorithms with similar need for stateful functors (like <tt>std::generate</tt> and <tt>std::generate_n</tt>) 
	accept both rvalues and lvalues as well.
</li>
<li>Given the deduction rules for perfect forwarding it is hard for a user to produce code that does the wrong thing 
unintentionally. Any lvalue generator will deduce an lvalue-reference and behave as in <tt>C++03</tt>. In the specific 
cases, where rvalues are provided, the argument will be accepted instead of being rejected.
</li>
</ol>
</p>

<p>
Arguments have been raised that accepting rvalues is error-prone or even fundamentally wrong. The author of this 
proposal disagrees with that position for two additional reasons:
</p>

<p>
<ol>
<li>Enforcing lvalues as arguments won't prevent user code to enforce what they
want. So given
<blockquote><pre>
my_generator get_generator(int size);
</pre></blockquote>
instead of writing
<blockquote><pre>
std::vector&lt;int&gt; v = ...;
std::shuffle(v.begin(), v.end(), get_generator(v.size()));
</pre></blockquote>
they will just write
<blockquote><pre>
std::vector&lt;int&gt; v = ...;
auto gen = get_generator(v.size());
std::shuffle(v.begin(), v.end(), gen);
</pre></blockquote>
and feel annoyed about the need for it.
</li>
<li>Generators may be copyable and movable, and random number engines are <em>required</em> to be <tt>CopyConstructible</tt> 
and this is obviously a generally useful property for such objects. It is also useful and sometimes necessary to start a 
generator with exactly a specific seed again and again and thus to provide a new generator (or a copy) for each call. The 
<tt>CopyConstructible</tt> requirements allow providing rvalues of generators and thus this idiom must be useful as well. 
Therefore preventing <tt>[random_]shuffle</tt> to accept rvalues is an unnecessary restriction which doesn't prevent any 
user-error, if there would exist one.
</li>
</ol>
</p>

<p>
Thus this proposal recommends to make both <tt>shuffle</tt> functions consistent and perfectly forward-able.
</p>

<blockquote><p>
Moved to Tentatively Ready after 6 positive votes on c++std-lib.
</p></blockquote>

<note>
Adopted at 2010-11 Batavia
</note>

</discussion>

<resolution>

<ol>
<li>Change [algorithms.general], header <tt>&lt;algorithm&gt;</tt> synopsis as indicated:
<blockquote><pre>
template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;
void shuffle(RandomAccessIterator first, RandomAccessIterator last,
UniformRandomNumberGenerator&amp;<ins>&amp;</ins> rand);
</pre></blockquote>
</li>
<li>Change the prototype description of [alg.random.shuffle] as indicated:
<blockquote><pre>
template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;
void shuffle(RandomAccessIterator first, RandomAccessIterator last,
UniformRandomNumberGenerator&amp;<ins>&amp;</ins> rand);
</pre></blockquote>
</li>
</ol>

</resolution>

</issue>
