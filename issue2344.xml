<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2344" status="New">
<title><tt>quoted()</tt>'s interaction with padding is unclear</title>
<section><sref ref="[quoted.manip]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>1 Nov 2013</date>

<discussion>
<p>
Given this code:
</p>
<blockquote><pre>
cout &lt;&lt; "[" &lt;&lt; left &lt;&lt; setfill('x') &lt;&lt; setw(20) &lt;&lt; R"("AB \"CD\" EF")" &lt;&lt; "]" &lt;&lt; endl;
cout &lt;&lt; "[" &lt;&lt; left &lt;&lt; setfill('y') &lt;&lt; setw(20) &lt;&lt; quoted(R"(GH "IJ" KL)") &lt;&lt; "]" &lt;&lt; endl;
</pre></blockquote>
<p>
The first line prints <tt>["AB \"CD\" EF"xxxxxx]</tt>. The second line should probably print <tt>["GH \"IJ\" KL"yyyyyy]</tt>, but 
<sref ref="[quoted.manip]"/>/2 doesn't say whether or how <tt>quoted()</tt> should interact with padding. All it says is that 
</p>
<blockquote><p>
"<tt>out &lt;&lt; quoted(s, delim, escape)</tt> behaves as if it inserts the following characters into out using character 
inserter function templates (27.7.3.6.4)". 
</p></blockquote>
<p>
<sref ref="[ostream.inserters.character]"/> specifies both single-character and null-terminated inserters, both referring to 
<sref ref="[ostream.formatted.reqmts]"/>/3 for padding. Literally implementing <tt>quoted()</tt> with single-character inserters 
would result in padding being emitted after the first character, with undesirable effects for <tt>ios_base::left</tt>.
<p/>
It appears that <sref ref="[string.io]"/>/5 has the appropriate incantations to follow here. It says that <tt>os &lt;&lt; str</tt> 
</p>
<blockquote><p>
"Behaves as a formatted output function (27.7.3.6.1) of <tt>os</tt>. Forms a character sequence <tt>seq</tt>, initially consisting of the 
elements defined by the range <tt>[str.begin(), str.end())</tt>. Determines padding for <tt>seq</tt> as described in 27.7.3.6.1. 
Then inserts <tt>seq</tt> as if by calling <tt>os.rdbuf()-&gt;sputn(seq, n)</tt>, where <tt>n</tt> is the larger of <tt>os.width()</tt> 
and <tt>str.size();</tt> then calls <tt>os.width(0)</tt>." 
</p></blockquote>
<p>
Additionally, saying that it's a "formatted output function" activates <sref ref="[ostream.formatted.reqmts]"/>/1's wording for 
sentry objects.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3797.</p>

<ol>
<li><p>Edit <sref ref="[quoted.manip]"/> as follows:</p>

<blockquote><pre>
template &lt;class charT&gt;
  unspecified quoted(const charT* s, charT delim=charT('"'), charT escape=charT('\\'));
template &lt;class charT, class traits, class Allocator&gt;
  unspecified quoted(const basic_string&lt;charT, traits, Allocator>&amp; s,
                     charT delim=charT('"'), charT escape=charT('\\'));
</pre><blockquote>
<p>
-2- <i>Returns:</i> An object of unspecified type such that if <tt>out</tt> is an instance of <tt>basic_ostream</tt> with member
type <tt>char_type</tt> the same as <tt>charT</tt>, then the expression <tt>out &lt;&lt; quoted(s, delim, escape)</tt> behaves
as <del>if it inserts the following characters into <tt>out</tt> using character inserter function templates (27.7.3.6.4),
which may throw <tt>ios_base::failure</tt> (27.5.3.1.1)</del><ins>a formatted output function (<sref ref="[ostream.formatted.reqmts]"/>) 
of <tt>out</tt>. This forms a character sequence <tt>seq</tt>, initially consisting of the following elements</ins>:
</p>
<ul>
<li><p>
<tt>delim</tt>.
</p></li>
<li><p>
Each character in <tt>s</tt>. If the character to be output is equal to escape or <tt>delim</tt>, as determined by
<tt>operator==</tt>, first output <tt>escape</tt>.
</p></li>
<li><p>
<tt>delim</tt>.
</p></li>
</ul>
<p>
<ins>Let <tt>x</tt> be the number of elements initially in <tt>seq</tt>. Then it determines padding for <tt>seq</tt> as described 
in <sref ref="[ostream.formatted.reqmts]"/>, inserts <tt>seq</tt> as if by calling <tt>out.rdbuf()-&gt;sputn(seq, n)</tt>, where 
<tt>n</tt> is the larger of <tt>out.width()</tt> and <tt>x</tt>, and calls <tt>out.width(0)</tt>.</ins>
The expression <tt>out &lt;&lt; quoted(s, delim, escape)</tt> shall have type <tt>basic_ostream&lt;charT, traits&gt;&amp;</tt>
and value <tt>out</tt>.
</p>
</blockquote></blockquote>
</li>

</ol>

</resolution>

</issue>
