<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="889" status="Resolved">
<title><tt>thread::id</tt> comparisons</title>
<section><sref ref="[thread.thread.id]"/></section>
<submitter>Lawrence Crowl</submitter>
<date>15 Sep 2008</date>

<discussion>

<p><b>Addresses UK 324</b></p>

<p>
The <tt>thread::id</tt> type supports the full set of comparison operators.  This
is substantially more than is required for the associative containers that
justified them.  Please place an issue against the threads library.
</p>

<note>
San Francisco:
</note>

<blockquote>
<p>
Would depend on proposed extension to POSIX, or non-standard extension.
What about hash? POSIX discussing op. POSIX not known to be considering
support needed for hash, op.
</p>
<p>
Group expresses support for putting ids in both unordered and ordered containers.
</p>
</blockquote>

<note>
post San Francisco:
</note>

<blockquote>
<p>
Howard:  It turns out the current working paper
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf">N2723</a>
<i>already has</i> <tt>hash&lt;thread::id&gt;</tt>
(<sref ref="[function.objects]"/>, <sref ref="[unord.hash]"/>).  We simply
overlooked it in the meeting.  It is a good thing we voted in favor of it
(again). :-)
</p>
<p>
Recommend NAD.
</p>

</blockquote>

<note>
Post Summit:
</note>

<blockquote><p>
Recommend to close as NAD. For POSIX, see if we need to add a function to
convert <tt>pthread_t</tt> to integer.
</p></blockquote>

<note>
Post Summit, Alisdair adds:
</note>

<blockquote>
<p>
The recommendation for LWG-889/UK-324 is NAD, already specified.
</p>
<p>
It is not clear to me that the specification is complete.
</p>
<p>
In particular, the synopsis of <tt>&lt;functional&gt;</tt> in 
<sref ref="[function.objects]"/> does not mention <tt>hash&lt; thread::id&gt;</tt> 
nor <tt>hash&lt; error_code &gt;</tt>, although their existence is 
implied by <sref ref="[unord.hash]"/>, p1.
</p>
<p>
I am fairly uncomfortable putting the declaration for the
<tt>thread_id</tt> specialization into <tt>&lt;functional&gt;</tt> as
<tt>id</tt> is a nested class inside <tt>std::thread</tt>, so it implies
that <tt>&lt;functional&gt;</tt> would require the definition of the
<tt>thread</tt> class template in order to forward declared
<tt>thread::id</tt> and form this specialization.
</p>
<p>
It seems better to me that the dependency goes the other way around
(<tt>&lt;thread&gt;</tt> will more typically make use of
<tt>&lt;functional&gt;</tt> than vice-versa) and the
<tt>hash&lt;thread::id&gt;</tt> specialization be declared in the
<tt>&lt;thread&gt;</tt> header.
</p>
<p>
I think <tt>hash&lt;error_code&gt;</tt> could go into either
<tt>&lt;system_error&gt;</tt> or <tt>&lt;functional&gt;</tt> and have no
immediate preference either way.  However, it should clearly appear in
the synopsis of one of these two.
</p>
<p>
Recommend moving 889 back to open, and tying in a reference to UK-324.
</p>
</blockquote>

<note>
Batavia (2009-05):
</note>
<blockquote><p>
Howard observes that <tt>thread::id</tt> need not be a nested class;
it could be a <tt>typedef</tt> for a more visible type.
</p></blockquote>

<note>
2009-05-24 Alisdair adds:
</note>
<blockquote><p>
I do not believe this is correct.  <tt>thread::id</tt> is explicitly documents as a
nested class, rather than as an unspecified typedef analogous to an
iterator.  If the intent is that this is not implemented as a nested class
(under the as-if freedoms) then this is a novel form of standardese.
</p></blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote><p>
Decided we want to move hash specialization for thread_id to the thread
header. Alisdair to provide wording.
</p></blockquote>

<note>
2009-07-28 Alisdair provided wording, moved to Review.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Add a strike for <tt>hash&lt;thread::id&gt;</tt>. Move to Ready
</p></blockquote>

<note>
2009-11-13 The proposed wording of <iref ref="1182"/> is a superset of the
wording in this issue.
</note>

<note>
2010-02-09 Moved from Ready to Open:
</note>

<blockquote>
<p>
Issue <iref ref="1182"/> is not quite a superset of this issue and it is controversial
whether or not the note:
</p>

<blockquote><p>
hash template specialization allows <tt>thread::id</tt> objects to be used as keys in
unordered containers.
</p></blockquote>

<p>
should be added to the WP.
</p>


</blockquote>

<note>
2010-02-09 Objections to moving this to <del>NAD Editorial</del><ins>Resolved</ins>, addressed by <iref
ref="1182"/> have been removed.  Set to Tentatively <del>NAD Editorial</del><ins>Resolved</ins>.
</note>

</discussion>

<rationale>
<p>
Solved by <iref ref="1182"/>.
</p>
</rationale>

<resolution>

<p>
Remove the following prototype from the synopsis in
<sref ref="[function.objects]"/>:
</p>

<blockquote><pre><del>
template &lt;&gt; struct hash&lt;std::thread::id&gt;;
</del></pre></blockquote>

<p>
Add to <sref ref="[thread.threads]"/>, p1 Header <tt>&lt;thread&gt;</tt> synopsis:
</p>

<blockquote><pre>
<ins>template &lt;class T&gt; struct hash;
template &lt;&gt; struct hash&lt;thread::id&gt;;</ins>
</pre></blockquote>

<p>
Add template specialization below class definition in <sref ref="[thread.thread.id]"/>
</p>

<blockquote><pre>
<ins>template &lt;&gt;
struct hash&lt;thread::id&gt; : public unary_function&lt;thread::id, size_t&gt; {
   size_t operator()(thread::id val) const;
};</ins>
</pre></blockquote>

<p>
Extend note in p2 <sref ref="[thread.thread.id]"/> with second sentence:
</p>

<blockquote><p>
[<i>Note:</i> Relational operators allow <tt>thread::id</tt> objects to be used
as keys in associative containers.
<ins><tt>hash</tt> template specialization allows <tt>thread::id</tt> objects to be used as keys
in unordered containers.</ins>
&mdash; <i>end note</i>]
</p></blockquote>

<p>
Add new paragraph to end of <sref ref="[thread.thread.id]"/>
</p>

<blockquote><pre>
<ins>template &lt;&gt; struct hash&lt;thread::id&gt;;</ins>
</pre>
<blockquote><p><ins>
An explicit specialization of the class template hash (<sref ref="[unord.hash]"/>)
shall be provided for the type <tt>thread::id</tt>.
</ins></p></blockquote>
</blockquote>
</resolution>

</issue>
