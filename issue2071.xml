<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2071" status="Ready">
<title><tt>std::valarray</tt> move-assignment</title>
<section><sref ref="[valarray.assign]"/></section>
<submitter>Paolo Carlini</submitter>
<date>5 May 2011</date>

<discussion>

<p>
Yesterday I noticed that the language we have in the FDIS about <tt>std::valarray</tt> move assignment 
is inconsistent with the resolution of LWG 675. Indeed, we guarantee constant complexity (vs linear 
complexity). We also want it to be noexcept, that is more subtle, but again it's at variance with all 
the containers.
<p/>
Also, even if we suppose that LWG <iref ref="675"/> applies only to the containers proper, I don't think the current 
"as if by calling resize(v.size())" is internally consistent with the noexcept requirement.
<p/>
So, what do we really want for <tt>std::valarray</tt>? Shall we maybe just strike or fix the as-if, consider it 
some sort of pasto from the copy-assignment text, thus keep the noexcept and constant complexity requirements 
(essentially the whole operation would boild down to a swap of POD data members). Or LWG <iref ref="675"/> should be 
explicitly extended to <tt>std::valarray</tt> too? In that case both noexcept and constant complexity 
would go, I think, and the operation would boil down to the moral equivalent of <tt>clear()</tt> (which 
doesn't really exist in this case) + <tt>swap</tt>?
</p>

<p>
Howard: I agree the current wording is incorrect.  The complexity should be linear in <tt>size()</tt> (not 
<tt>v.size()</tt>) because the first thing this operator needs to do is <tt>resize(0)</tt> (or <tt>clear()</tt> 
as you put it).
<p/>
I think we can keep the <tt>noexcept</tt>.
<p/>
As for proper wording, here's a first suggestion:
</p><blockquote><p>
<i>Effects</i>: <tt>*this</tt> obtains the value of <tt>v</tt>. The value of <tt>v</tt> after the assignment 
is not specified.
<p/>
<i>Complexity</i>: linear.
</p></blockquote><p>
</p>

<p>
See also reflector discussion startin with c++std-lib-30690.
</p>
</discussion>

<note>2012, Kona</note>
<p>
Move to Ready.
</p>
<p>
Some discussion on the types supported by <tt>valarray</tt> concludes that the wording is
trying to say something similar to the core wording for trivial types, but significantly
predates it, and does allow for types with non-trivial destructors.  Howard notes that
the only reason for linear complexity, rather than constant, is to support types with
non-trivial destructors.
</p>
<p>
AJM suggests replacing the word 'value' with 'state', but straw poll prefers moving
forward with the current wording, 5 to 2.
</p>

<resolution>
<p>This wording is relative to the FDIS.</p>

<p>In <sref ref="[valarray.assign]"/> update as follows:</p>

<blockquote><pre>
valarray&lt;T&gt;&amp; operator=(valarray&lt;T&gt;&amp;&amp; v) noexcept;
</pre><blockquote><p>
3 <i>Effects</i>: <tt>*this</tt> obtains the value of <tt>v</tt>. <del>If the length of <tt>v</tt> 
is not equal to the length of <tt>*this</tt>, resizes <tt>*this</tt> to make the two arrays the 
same length, as if by calling <tt>resize(v.size())</tt>, before performing the assignment.</del><ins>The 
value of <tt>v</tt> after the assignment is not specified.</ins>
<p/>
4 <i>Complexity</i>: <del>Constant</del><ins>Linear</ins>.
</p></blockquote></blockquote>

</resolution>

</issue>
