<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1489" status="NAD Editorial">
<title>[FCD] <tt>unlock</tt> functions and unlock
mutex requirements are inconsistent</title>
<section><sref ref="[thread.mutex]"/></section>
<submitter>Switzerland</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses CH-26</b></p>

Specifications of <tt>unlock</tt> member functions and <tt>unlock</tt>
mutex requirements are inconsistent wrt to exceptions and
pre- and postconditions.

<note>
Resolution proposed by ballot comment:
</note>
<blockquote>
<tt>unlock</tt> should specifiy the precondition that the
current thread "owns the lock", this will make calls
without holding the locks "undefined behavior".
<tt>unlock</tt> in <sref ref="[mutex.requirements]"/> should either be
<tt>noexcept(true)</tt> or be allowed to throw
<tt>system_error</tt> like <tt>unique_lock::unlock</tt>, or the latter
should be <tt>nothrow(true)</tt> and have the precondition
<tt>owns == true</tt>.
Furthermore <tt>unique_lock</tt>'s postcondition is wrong
in the case of a recursive mutex where <tt>owns</tt>
might stay true, when it is not the last <tt>unlock</tt>
needed to be called.
</blockquote>

</discussion>

<resolution>
</resolution>

</issue>
