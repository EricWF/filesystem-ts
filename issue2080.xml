<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2080" status="Tentatively Ready">
<title>Specify when <tt>once_flag</tt> becomes invalid</title>
<section><sref ref="[thread.once]"/></section>
<submitter>Nicolai Josuttis</submitter>
<date>30 Aug 2011</date>

<discussion>

<p>
In function <tt>call_once</tt> <sref ref="[thread.once.callonce]"/>
paragraph 4 and 5 specify for <tt>call_once()</tt>:
</p>

<blockquote>
<p>
<i>Throws</i>: <tt>system_error</tt> when an exception is required (<sref ref="[thread.req.exception]"/>), 
or any exception thrown by <tt>func</tt>.
<p/>
<i>Error conditions</i>:
</p>
<ul>
<li><tt>invalid_argument</tt> &mdash; if the <tt>once_flag</tt> object is no longer valid.</li>
</ul>
</blockquote>

<p>
However, nowhere in <sref ref="[thread.once]"/> is specified, when a once-flag becomes invalid.
<p/>
As far as I know this happens if the flag is used for different functions. So we either have to have 
to insert a sentence&#47;paragraph in
</p>
<blockquote><p>
30.4.4.2 Function call_once [thread.once.callonce]
</p></blockquote>
<p>
or
</p>
<blockquote><p>
30.4.4 Call once [thread.once]
</p></blockquote>
<p>
explaining when a <tt>once_flag</tt> becomes invalidated or we should state as error condition something like:
</p>

<ul>
<li><tt>invalid_argument</tt> &mdash; if the <tt>func</tt> used in combination with the <tt>once_flag</tt> is different 
from a previously passed <tt>func</tt> for the same <tt>once_flag</tt>
</li>
</ul>

<p>
Anthony Williams:
</p>
<blockquote>
<p>
A <tt>once_flag</tt> is invalidated if you destroy it (e.g. it is an automatic object, or heap 
allocated and deleted, etc.)
<p/>
If the library can detect that this is the case then it will throw this exception. If it cannot 
detect such a case then it will never be thrown.
</p>
</blockquote>

<p>
Jonathan Wakely:
</p>
<blockquote>
<p>
I have also wondered how that error can happen in C++, where the type
system will reject a non-callable type being passed to <tt>call_once()</tt> and
should prevent a <tt>once_flag</tt> being used after its destructor runs.
<p/>
If a <tt>once_flag</tt> is used after its destructor runs then it is indeed
undefined behaviour, so implementations are already free to throw any
exception (or set fire to a printer) without the standard saying so.
<p/>
My assumption was that it's an artefact of basing the API on pthreads,
which says:
</p>
<blockquote>
<p>
The <tt>pthread_once()</tt> function may fail if:
<p/>
<tt>[EINVAL]</tt>  If either <tt>once_control</tt> or <tt>init_routine</tt> is invalid.
</p>
</blockquote>
</blockquote>

<p>
Pete Becker:
</p>
<blockquote><p>
Yes, probably. We had to clean up several UNIXisms that were in the original design.
</p></blockquote>

<note>2012, Kona</note>
<p>
Remove error conditions, move to Review.
</p>

<note>2012, Portland: move to Tentatively Ready</note>
<p>
Concurrency move to Ready, pending LWG review.
</p>

<p>
LWG did not have time to perform the final review in Portland, so moving to
<i>tentatively</i> ready to reflect the Concurrency belief that the issue is
ready, but could use a final inspection from library wordsmiths.
</p>

</discussion>

<resolution>

<p>This wording is relative to N3337.</p>

<ol>
<li><p>Change <sref ref="[thread.once.callonce]"/> as indicated:</p>
<blockquote><pre>
template&lt;class Callable, class ...Args&gt;
void call_once(once_flag&amp; flag, Callable&amp;&amp; func, Args&amp;&amp;... args);
</pre><blockquote>
<p>
[&hellip;]
<p/>
-4- <i>Throws</i>: <tt>system_error</tt> when an exception is required (30.2.2), or any exception thrown by <tt>func</tt>.
<p/>
<del>-5- Error conditions:</del>
</p>
<ul>
<li><del><tt>invalid_argument</tt> &mdash; if the <tt>once_flag</tt> object is no longer valid.</del></li>
</ul>
</blockquote></blockquote>
</li>
</ol>
</resolution>

</issue>
