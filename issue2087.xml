<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2087" status="New">
<title><tt>iostream_category()</tt> and <tt>noexcept</tt></title>
<section><sref ref="[iostreams.base]"/></section>
<submitter>Nicolai Josuttis</submitter>
<date>22 Sep 2011</date>

<discussion>

<p>
In <tt>&lt;system_error&gt;</tt> we have:
</p>

<blockquote><pre>
const error_category&amp; generic_category() noexcept;
const error_category&amp; system_category() noexcept;
</pre></blockquote>

<p>
In <tt>&lt;future&gt;</tt> we have:
</p>

<blockquote><pre>
const error_category&amp; future_category() noexcept;
</pre></blockquote>

<p>
But in <tt>&lt;ios&gt;</tt> we have:
</p>

<blockquote><pre>
const error_category&amp; iostream_category();
</pre></blockquote>

<p>
Is there any reason that <tt>iostream_category()</tt> is not declared with 
<tt>noexcept</tt> or is this an oversight?
</p>

<p>
Daniel:
<p/>
This looks like an oversight to me. We made the above
mentioned changes as part of noexcept-ifying the thread
library but <tt>iostream_category()</tt> was skipped, so it seems
to be forgotten. There should be no reason, why it cannot
be <tt>noexcept</tt>. When doing so, we should also make these functions
<tt>noexcept</tt> (similar to corresponding overloads):
</p>
<blockquote><pre>
error_code make_error_code(io_errc e);
error_condition make_error_condition(io_errc e);
</pre></blockquote>

<p>
Suggested wording provided by Daniel.
</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<ol><li>
<p>Change <sref ref="[iostreams.base.overview]"/>, header <tt>&lt;ios&gt;</tt> synopsis 
as indicated:
</p>
<blockquote><pre>
#include &lt;iosfwd&gt;
namespace std {
  [&hellip;]
  error_code make_error_code(io_errc e) <ins>noexcept</ins>;
  error_condition make_error_condition(io_errc e) <ins>noexcept</ins>;
  const error_category&amp; iostream_category() <ins>noexcept</ins>;
}
</pre></blockquote>

</li>
<li>
<p>Change the prototype declarations in <sref ref="[error.reporting]"/> as indicated:
</p>
<blockquote><pre>
error_code make_error_code(io_errc e) <ins>noexcept</ins>;
</pre></blockquote><blockquote>
<p>
-1- <i>Returns</i>: <tt>error_code(static_cast&lt;int&gt;(e), iostream_category())</tt>.
</p>
</blockquote><blockquote><pre>
error_condition make_error_condition(io_errc e) <ins>noexcept</ins>;
</pre></blockquote><blockquote>
<p>
-2- <i>Returns</i>: <tt>error_condition(static_cast&lt;int&gt;(e), iostream_category())</tt>.
</p>
</blockquote><blockquote><pre>
const error_category&amp; iostream_category() <ins>noexcept</ins>;
</pre></blockquote><blockquote>
<p>
-3- <i>Returns</i>: A reference to an object of a type derived from class <tt>error_category</tt>.
<p/>
-4- The object’s <tt>default_error_condition</tt> and <tt>equivalent</tt> virtual functions shall behave as specified
for the class <tt>error_category</tt>. The object’s <tt>name</tt> virtual function shall return a pointer to the string
<tt>"iostream"</tt>.
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
