<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1112" status="NAD Future">
<title>bitsets and new style for loop</title>
<section><sref ref="[template.bitset]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>6 May 2009</date>

<discussion>
<p>
<tt>std::bitset</tt> is a homogeneous container-like sequence of bits, yet it does
not model the Range concept so cannot be used with the new for-loop syntax.
It is the only such type in the library that does NOT support the new for
loop.
</p>
<p>
The obvious reason is that bitset does not support iterators.
</p>
<p>
At least two reasonable solutions are available:
</p>
<ol style="list-style-type:lower-roman">
<li>
Add an iterator interface to <tt>bitset</tt>, bringing its interface close to that
of <tt>std::array</tt>
</li>
<li>
Provide an unspecified concept_map for <tt>Range&lt;bitset&gt;</tt>.
</li>
</ol>
<p>
The latter will still need some kind of iterator-like adapter for <tt>bitset</tt>,
but gives implementers greater freedom on the details. E.g. begin/end return
some type that simply invokes <tt>operator[]</tt> on the object it wraps, and
increments its index on <tt>operator++</tt>.  A vendor can settle for <tt>InputIterator</tt>
support, rather than wrapping up a full <tt>RandomAccessIterator</tt>.
</p>
<p>
I have a mild preference for option (ii) as I think it is less work to
specify at this stage of the process, although (i) is probably more useful
in the long run.
</p>
<p>
Hmm, my wording looks a little woolly, as it does not say what the element
type of the range is.  Do I get a range of <tt>bool</tt>, <tt>bitset&lt;N&gt;::reference</tt>, or
something else entirely?
</p>
<p>
I guess most users will assume the behaviour of reference, but expect to
work with <tt>bool</tt>.  <tt>Bool</tt> is OK for read-only traversal, but you really need to
take a reference to a <tt>bitset::reference</tt> if you want to write back.
</p>

<note>
Batavia (2009-05):
</note>
<blockquote><p>
Move to Open.
We further recommend this be deferred until after the next Committee Draft.
</p></blockquote>

<note>
2009-05-25 Alisdair adds:
</note>

<blockquote>
<p>
I just stumbled over the <tt>Range concept_map</tt> for <tt>valarray</tt> and this should
probably set the precedent on how to write the wording.
</p>

<note>
Howard: I've replaced the proposed wording with Alisdair's suggestion.
</note>

</blockquote>

<note>
2009-07-24 Daniel modifies the proposed wording for non-concepts.
</note>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Mark as Tentatively NAD Future due to the loss of concepts.
</p></blockquote>

</discussion>

<rationale>
<p>
All concepts-related text has been removed from the draft.
</p>
</rationale>

<resolution>
<ol>
<li>
<p>
Modify the section <sref ref="[template.bitset]"/> <tt>&lt;bitset&gt;</tt> synopsis by adding
the following at the end of the synopsis:
</p>
<blockquote><pre>
<ins>
// XX.X.X bitset range access [bitset.range]
template&lt;size_t N&gt; <i>unspecified-1</i> begin(bitset&lt;N&gt;&amp;);
template&lt;size_t N&gt; <i>unspecified-2</i> begin(const bitset&lt;N&gt;&amp;);
template&lt;size_t N&gt; <i>unspecified-1</i> end(bitset&lt;N&gt;&amp;);
template&lt;size_t N&gt; <i>unspecified-2</i> end(const bitset&lt;N&gt;&amp;);
</ins>
</pre></blockquote>
</li>
<li>
<p>
Add a new section <ins>"bitset range access" [bitset.range]</ins>
after the current section <sref ref="[bitset.operators]"/> with the following series of
paragraphs:
</p>
<blockquote>
<p>
<ins>
1.  In the <tt>begin</tt> and <tt>end</tt> function templates that follow, <i>unspecified-1</i>
is a type that meets the requirements of a mutable random access
iterator (<sref ref="[random.access.iterators]"/>) whose <tt>value_type</tt> is <tt>bool</tt> and
whose reference type is <tt>bitset&lt;N&gt;::reference</tt>.
<i>unspecified-2</i> is a type that meets the requirements of a constant
random access iterator (<sref ref="[random.access.iterators]"/>) whose <tt>value_type</tt>
is <tt>bool</tt> and whose reference type is <tt>bool</tt>.
</ins>
</p>
<pre>
<ins>
template&lt;size_t N&gt; <i>unspecified-1</i> begin(bitset&lt;N&gt;&amp;);
template&lt;size_t N&gt; <i>unspecified-2</i> begin(const bitset&lt;N&gt;&amp;);
</ins>
</pre>
<blockquote><p>
<ins>2.  Returns: an iterator referencing the first bit in the bitset.</ins>
</p></blockquote>

<pre><ins>
template&lt;size_t N&gt; <i>unspecified-1</i> end(bitset&lt;N&gt;&amp;);
template&lt;size_t N&gt; <i>unspecified-2</i> end(const bitset&lt;N&gt;&amp;);
</ins></pre>

<blockquote><p>
<ins>3.  Returns: an iterator referencing one past the last bit in the
bitset.</ins>
</p></blockquote>
</blockquote>
</li>
</ol>

<!-- 
<p>
20.3.6.X bitset concept maps [bitset.concepts] (made up clause name/number)
</p>
<pre>
template&lt;size_t N&gt;
concept_map Range&lt;bitset&lt;N&gt;&gt; {
  typedef unspecified iterator;
  iterator begin(bitset&lt;N&gt;&amp; a);
  iterator end(bitset&lt;N&gt;&amp; a);
}

template&lt;typename T&gt;
concept_map Range&lt;const bitset&lt;N&gt;&gt; {
  typedef unspecified iterator;
  iterator begin(const bitset&lt;N&gt;&amp; a);
  iterator end(const bitset&lt;N&gt;&amp; a);
}
</pre>
<p>
-1- <i>Note:</i> these concept_maps adapt <tt>bitset</tt> to the <tt>Range</tt> concept.
</p>

<pre>
typedef <i>unspecified</i> iterator;
</pre>

<blockquote>
-2- <i>Requires:</i> <tt>iterator</tt> shall meet the requirements of the
<tt>RandomAccessIterator</tt> concept and <tt>iterator::reference</tt>
shall equal <tt>bitset&lt;N&gt;::reference</tt> or <tt>const bitset&lt;N&gt;::reference</tt>.
</blockquote>

<pre>
iterator begin(bitset&lt;N&gt;&amp; a);
iterator begin(const bitset&lt;N&gt;&amp; a);
</pre>

<blockquote>
-3- <i>Returns:</i> an <tt>iterator</tt> referencing the first bit in the <tt>bitset</tt>.
</blockquote>

<pre>
iterator end(bitset&lt;N&gt;&amp; a);
iterator end(const bitset&lt;N&gt;&amp; a);
</pre>

<blockquote>
-4- <i>Returns:</i> an <tt>iterator</tt> referencing one past the last bit in the <tt>bitset</tt>.
</blockquote>
 -->



<!-- 
<p>
Class template bitset <sref ref="[template.bitset]"/>
</p>

<blockquote>
<p>
Append to end of 
</p>
<blockquote>
<p>
Header <tt>&lt;bitset&gt;</tt> synopsis
</p>
<blockquote><pre>
namespace std {
  ...
  <ins>template &lt;size_t N&gt;
  concept_map Range&lt;bitset&lt;N&gt;&gt; { unspecified }</ins>
</pre></blockquote>
</blockquote>

<p>
Add a new subsection:
</p>
<blockquote>
<p>
20.3.6.4 bitset concept maps [bitset.range]
</p>
<blockquote><pre>
template &lt;size_t N&gt;
  concept_map Range&lt;bitset&lt;N&gt;&gt; { unspecified }
</pre></blockquote>

<blockquote>
-1-  A <tt>concept_map</tt> shall be provided for the <tt>Range</tt> concept 
(<sref ref="[iterator.concepts.range]"/>) such that a <tt>bitset</tt> object may be used as the
expression in a Range-based for statement (<sref ref="[stmt.ranged]"/>).
</blockquote>
</blockquote>
</blockquote>
 -->

</resolution>

</issue>
