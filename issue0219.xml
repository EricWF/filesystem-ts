<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="219" status="NAD">
<title><tt>find</tt> algorithm missing version that takes a binary predicate argument</title>
<section><sref ref="[alg.find]"/></section>
<submitter>Pablo Halpern</submitter>
<date>6 Mar 2000</date>

<discussion>
<p>The find function always searches for a value using <tt>operator==</tt> to compare the
value argument to each element in the input iterator range. This is inconsistent
with other find-related functions such as <tt>find_end</tt> and <tt>find_first_of</tt>, which
allow the caller to specify a binary predicate object to be used for determining
equality. The fact that this can be accomplished using a combination of <tt>find_if</tt>
and <tt>bind_1st</tt> or <tt>bind_2nd</tt> does not negate the desirability of a consistent,
simple, alternative interface to <tt>find</tt>.</p>

<note>
Summit:
</note>

<blockquote><p>
Reopened by Alisdair.
</p></blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote>
<p>
The same thing can be achieved using <tt>find_if</tt> (as noted in the issue).
</p>
<p>
Moved to NAD.
</p>
</blockquote>

</discussion>

<resolution>
<blockquote>
<p>In section <sref ref="[alg.find]"/>, add a second prototype for find
(between the existing prototype and the prototype for find_if), as
follows:</p>
<pre>    template&lt;class InputIterator, class T, class BinaryPredicate&gt;
      InputIterator find(InputIterator first, InputIterator last,
                         const T&amp; value, BinaryPredicate bin_pred);</pre>
<p>Change the description of the return from:</p>
<blockquote>
  <p>Returns: The first iterator <tt>i</tt> in the range <tt>[first, last)</tt> for which the following corresponding
  conditions hold: <tt>*i == value</tt>, <tt>pred(*i) != false</tt>. Returns <tt>last</tt> if no such iterator is found.</p>
</blockquote>
<p>&nbsp;to:</p>
<blockquote>
  <p>Returns: The first iterator <tt>i</tt> in the range <tt>[first, last)</tt> for which the following&nbsp;
  corresponding condition holds: <tt>*i == value</tt>, <tt>bin_pred(*i,value) != false</tt>, <tt>pred(*)
  != false</tt>. Return <tt>last</tt> if no such iterator is found.</p>
</blockquote>
</blockquote>
</resolution>

<rationale>
<p>This is request for a pure extension, so it is not a defect in the
current standard.&nbsp; As the submitter pointed out, &quot;this can
be accomplished using a combination of <tt>find_if</tt> and <tt>bind_1st</tt> or
<tt>bind_2nd</tt>&quot;.</p>
</rationale>
</issue>
