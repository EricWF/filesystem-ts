<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2172" status="Pending WP">
<title>Does <tt>atomic_compare_exchange_*</tt> accept <tt>v == nullptr</tt> arguments?</title>
<section><sref ref="[util.smartptr.shared.atomic]"/></section>
<submitter>Howard Hinnant</submitter>
<date>28 Jul 2012</date>

<discussion>

<p>
Looking at <sref ref="[util.smartptr.shared.atomic]"/>/p31
</p>
<blockquote><pre>
template&lt;class T&gt;
  bool
  atomic_compare_exchange_strong_explicit(shared_ptr&lt;T&gt;* p,
                                          shared_ptr&lt;T&gt;* v,
                                          shared_ptr&lt;T&gt; w,
                                          memory_order success, memory_order failure);
</pre><blockquote><p>
-31- <i>Requires</i>: <tt>p</tt> shall not be null.
</p></blockquote></blockquote>
<p>
What about <tt>v</tt>?  Can it be null?  And if so, what happens?
<p/>
This looks closely related to C++11 issue LWG <iref ref="1030"/>, where we gave every signature in this section a:
</p>
<blockquote><p>
<i>Requires</i>: <tt>p</tt> shall not be null.
</p></blockquote>
<p>
It looks like a simple oversight to me that we did not add for the <tt>atomic_compare_exchange_*</tt>:
</p>
<blockquote><p>
<i>Requires</i>: <tt>p</tt> shall not be null <ins>and <tt>v</tt> shall not be null</ins>.
</p></blockquote>

<note>2012-10 Portland: Move to Ready</note>
<p>
This is clearly the right thing to do, and Lawrence concurs. 
</p>

<note>2013-04-20 Bristol</note>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<p>Change <sref ref="[util.smartptr.shared.atomic]"/> as indicated:</p>

<blockquote><pre>
template&lt;class T&gt;
  bool atomic_compare_exchange_weak(
    shared_ptr&lt;T&gt;* p, shared_ptr&lt;T&gt;* v, shared_ptr&lt;T&gt; w);
</pre><blockquote><p>
-27- <i>Requires</i>: <tt>p</tt> shall not be null <ins>and <tt>v</tt> shall not be null</ins>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class T&gt;
  bool atomic_compare_exchange_weak_explicit(
    shared_ptr&lt;T&gt;* p, shared_ptr&lt;T&gt;* v, shared_ptr&lt;T&gt; w,
    memory_order success, memory_order failure);
template&lt;class T&gt;
  bool atomic_compare_exchange_strong_explicit(
    shared_ptr&lt;T&gt;* p, shared_ptr&lt;T&gt;* v, shared_ptr&lt;T&gt; w,
    memory_order success, memory_order failure);
</pre><blockquote><p>
-31- <i>Requires</i>: <tt>p</tt> shall not be null <ins>and <tt>v</tt> shall not be null</ins>.
<p/>
[&hellip;]
</p>
</blockquote></blockquote>

</resolution>

</issue>
