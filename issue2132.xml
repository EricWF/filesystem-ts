<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2132" status="New">
<title><tt>std::function</tt> ambiguity</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>28 Feb 2012</date>

<discussion>
<p>
Consider the following:
</p>
<blockquote><pre>
#include &lt;functional&gt;

void f(std::function&lt;void()&gt;) {}
void f(std::function&lt;void(int)&gt;) {}

int main() {
  f([]{});
  f([](int){});
}
</pre></blockquote>
<p>
The calls to <tt>f</tt> in <tt>main</tt> are ambiguous. Apparently because the
conversion sequences to <tt>std::function</tt> from the lambdas are identical. 
The standard specifies that the function object given to <tt>std::function</tt>
"shall be <em>Callable</em> (20.8.11.2) for argument types <tt>ArgTypes</tt> and 
return type <tt>R</tt>." It doesn't say that if this is not the case, the 
constructor isn't part of the overload set.
<p/>
Daniel: During the preparation of <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3123.html">N3123</a>
it turned out that there are no longer reasons to refer to <em>INVOKE</em> as a
conceptually entity alone, its real implementation as a function template <tt>invoke</tt>
is possible but was deferred for a later point in time. Defining a type trait for
the <em>Callable</em> requirement would also be possible, so there seem to be no technical
reasons why the template constructor of <tt>std::function</tt> should not be
constrained. The below suggested wording does this without introducing a special
trait for this. This corresponds to the way that has been used to specify the
<tt>result_of</tt> trait. Note that the definition of the <em>Callable</em>
requirement is perfectly suitable for this, because it is a pure syntactically
based requirement and can be directly transformed into a constrained template.
<p/>
The suggested resolution also applies such wording to the "perfectly forwarding"
assignment operator
</p>
<blockquote><pre>
template&lt;class F&gt; function&amp; operator=(F&amp;&amp;);
</pre></blockquote>
<p>
The positive side-effect of this is that it automatically implements a solution to
a problem similar to that mentioned in issue <iref ref="1234"/>.
<p/>
It would be possible to apply similar constraints to the member signatures
</p>
<blockquote><pre>
template&lt;class F&gt; function&amp; operator=(reference_wrapper&lt;F&gt;);

template&lt;class F, class A&gt; void assign(F&amp;&amp;, const A&amp;);
</pre></blockquote>
<p>
as well. At this point there does not seem to be a pestering reason to do so.
</p>

</discussion>

<resolution>
<p>This wording is relative to the N3376.</p>

<ol>
<li><p>Change the following paragraphs in <sref ref="[func.wrap.func.con]"/>:
[<em>Editorial comment</em>: The removal of the seemingly additional no-throw
requirements of copy constructor and destructor of <tt>A</tt> is recommended,
because they are already part of the Allocator requirements. Similar clean-up
has been suggested by <iref ref="2070"/> &mdash; <em>end comment</em>]</p>

<blockquote>
<pre>
template&lt;class F> function(F f);
template&lt;class F, class A&gt; function(allocator_arg_t, const A&amp; a, F f);
</pre>
<blockquote>
<p>
-7- <i>Requires</i>: <tt>F</tt> shall be <tt>CopyConstructible</tt>. <del><tt>f</tt> shall be Callable 
(<sref ref="[func.wrap.func]"/>) for argument types <tt>ArgTypes</tt> and return type <tt>R</tt>. 
The copy constructor and destructor of <tt>A</tt> shall not throw exceptions.</del>
<p/>
<ins>-?- <i>Remarks</i>: These constructors shall not participate in overload resolution unless
<tt>declval&lt;F&amp;&gt;()</tt> is Callable (<sref ref="[func.wrap.func]"/>) for argument types <tt>ArgTypes</tt> 
and return type <tt>R</tt>.</ins>
</p>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
template&lt;class F> function&amp; operator=(F&amp;&amp; f);
</pre>
<blockquote>
<p>
-18- <i>Effects</i>: <tt>function(std::forward&lt;F&gt;(f)).swap(*this);</tt>
<p/>
-19- <i>Returns</i>: <tt>*this</tt>
<p/>
<ins>-?- <i>Remarks</i>: This assignment operator shall not participate in overload resolution unless
<tt>declval&lt;decay&lt;F&gt;::type&amp;&gt;()</tt> is Callable (<sref ref="[func.wrap.func]"/>) 
for argument types <tt>ArgTypes</tt> and return type <tt>R</tt>.</ins>
</p>
</blockquote>
</blockquote>

</li>
</ol>

</resolution>

</issue>
