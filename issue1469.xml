<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1469" status="Pending NAD Editorial">
<title>[FCD] <tt>atomic&lt;T*&gt;</tt> inheritance from <tt>atomic_address</tt> breaks type safety</title>
<section><sref ref="[atomics.types.generic]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-133</b></p>

The free functions that operate on <tt>atomic_address</tt> can be
used to store a pointer to an unrelated type in an <tt>atomic&lt;T*&gt;</tt> 
without a cast. e.g.
<blockquote><pre>
int i;
atomic&lt;int*&gt; ai(&amp;i);
string s;
atomic_store(&amp;ai,&amp;s);
</pre></blockquote>
Overload the <tt>atomic_store</tt>, <tt>atomic_exchange</tt> and
<tt>atomic_compare_exchange_[weak/strong]</tt> operations for 
<tt>atomic&lt;T*&gt;</tt> to allow storing only pointers to <tt>T</tt>.

<note>
2010-10-27 Daniel adds:
</note>

<blockquote>
<p>
Resolving this issue will also solve <iref ref="1467"/>
</p>
Accepting <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3164.html">n3164</a> would solve this issue by
removing <tt>atomic_address</tt>.
</blockquote>

<note>Resolved in Batavia by accepting
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3193.html">n3193</a>.
</note>
</discussion>

<resolution>
<p>Add the following overloads to <sref ref="[atomics.types.generic]"/>, the synopsis around the specialization
<tt>atomic&lt;T*&gt;</tt>, as indicated:
<blockquote><pre>
namespace std {
  [..]
  template &lt;class T&gt; struct atomic&lt;T*&gt; : atomic_address {
    [..]
  };

  <ins>template&lt;typename T&gt;</ins>
  <ins>void atomic_store(atomic&lt;T*&gt;&amp;,T*);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>void atomic_store(atomic&lt;T*&gt;&amp;,void*) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>void atomic_store_explicit(atomic&lt;T*&gt;&amp;,T*,memory_order);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>void atomic_store_explicit(atomic&lt;T*&gt;&amp;,void*,memory_order) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_exchange(atomic&lt;T*&gt;&amp;,T*);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_exchange(atomic&lt;T*&gt;&amp;,void*) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_exchange_explicit(atomic&lt;T*&gt;&amp;,T*,memory_order);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_exchange_explicit(atomic&lt;T*&gt;&amp;,void*,memory_order) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_weak(atomic&lt;T*&gt;&amp;,T**,T*);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_weak(atomic&lt;T*&gt;&amp;,void**,void*) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_weak_explicit(atomic&lt;T*&gt;&amp;,T**,T*,memory_order);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_weak_explicit(atomic&lt;T*&gt;&amp;,void**,void*,memory_order) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_strong(atomic&lt;T*&gt;&amp;,T**,T*);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_strong(atomic&lt;T*&gt;&amp;,void**,void*) = delete;</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_strong_explicit(atomic&lt;T*&gt;&amp;,T**,T*,memory_order);</ins>
  <ins>template&lt;typename T&gt;</ins>
  <ins>T* atomic_compare_exchange_strong_explicit(atomic&lt;T*&gt;&amp;,void**,void*,memory_order) = delete;</ins>

}
</pre></blockquote>
</p>
</resolution>

</issue>
