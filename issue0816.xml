<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="816" status="NAD Editorial">
<title>Should <tt>bind()</tt>'s returned functor have a nofail copy ctor when <tt>bind()</tt> is nofail?</title>
<section><sref ref="[func.bind.bind]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>8 Feb 2008</date>

<discussion>
<p>
Library Issue <iref ref="527"/> notes that <tt>bind(f, t1, ..., tN)</tt>
should be nofail when <tt>f, t1, ..., tN</tt> have nofail copy ctors.
</p>
<p>
However, no guarantees are provided for the copy ctor of the functor
returned by <tt>bind()</tt>.  (It's guaranteed to have a copy ctor, which can
throw implementation-defined exceptions: <tt>bind()</tt> returns a forwarding
call wrapper, TR1 3.6.3/2.  A forwarding call wrapper is a call wrapper,
TR1 3.3/4.  Every call wrapper shall be CopyConstructible, TR1 3.3/4.
Everything without an exception-specification may throw
implementation-defined exceptions unless otherwise specified, C++03
17.4.4.8/3.)
</p>
<p>
Should the nofail guarantee requested by Library Issue <iref ref="527"/> be extended
to cover both calling <tt>bind()</tt> and copying the returned functor?
</p>

<note>
Howard adds:
</note>

<blockquote>
<tt>tuple</tt> construction should probably have a similar guarantee.
</blockquote>

<note>
San Francisco:
</note>

<blockquote>
Howard to provide wording.
</blockquote>

<note>
Post Summit, Anthony provided wording.
</note>

<note>
Batavia (2009-05):
</note>
<blockquote>
Part of all of this issue appears to be rendered moot
by the proposed resolution to issue <iref ref="817"/> (q.v.).
We recommend the issues be considered simultaneously
(or possibly even merged)
to ensure there is no overlap.
Move to Open, and likewise for issue <iref ref="817"/>.
</blockquote>

<note>
2009-07 Frankfurt:
</note>

<blockquote>
Related to <iref ref="817"/> (see below). Leave Open.
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
Move to Ready. Decoupling from issue <iref ref="817"/>.
</blockquote>

<note>
2010-02-11 Moved from Ready to Tentatively NAD Editorial, rationale added below.
</note>

</discussion>

<rationale>
<p>
This issue is solved as proposed by <iref ref="817"/>.
</p>
</rationale>

<resolution>
<p>
Add a new sentence to the end of paragraphs 2 and 4 of <sref ref="[func.bind.bind]"/>:
</p>

<blockquote>
<p>
-2- <i>Returns:</i> A forwarding call wrapper <tt>g</tt> with a weak result type (20.6.2). The effect of <tt>g(u1, u2,
..., uM)</tt> shall be <tt><i>INVOKE</i>(f, v1, v2, ..., vN, Callable&lt;F cv,V1, V2, ..., VN&gt;::result_type)</tt>, where <i>cv</i>
represents the <i>cv</i>-qualifiers of <tt>g</tt> and the values and types of the bound arguments
<tt>v1, v2, ..., vN</tt> are determined as specified below.
<ins>The copy constructor and move constructor of the forwarding call wrapper shall throw an
exception if and only if the corresponding constructor of <tt>F</tt> or any of the types
in <tt>BoundArgs...</tt> throw an exception.</ins>
</p>
<p>...</p>
<p>
-5- <i>Returns:</i> A forwarding call wrapper <tt>g</tt> with a nested type <tt>result_type</tt> defined as a synonym
for <tt>R</tt>. The effect of <tt>g(u1, u2, ..., uM)</tt> shall be <tt><i>INVOKE</i>(f, v1, v2, ..., vN, R)</tt>, where the
values and types of the bound arguments <tt>v1, v2, ..., vN</tt> are determined as specified below.
<ins>The copy constructor and move constructor of the forwarding call wrapper shall throw an
exception if and only if the corresponding constructor of <tt>F</tt> or any of the types
in <tt>BoundArgs...</tt> throw an exception.</ins>
</p>

</blockquote>
</resolution>

</issue>
