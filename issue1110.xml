<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1110" status="C++11">
<title>Is <tt>for_each</tt> overconstrained?</title>
<section><sref ref="[alg.foreach]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>29 Apr 2009</date>

<discussion>
<p>
Quoting working paper for reference (<sref ref="[alg.foreach]"/>):
</p>

<blockquote>
<pre>
template&lt;InputIterator Iter, Callable&lt;auto, Iter::reference&gt; Function&gt;
  requires CopyConstructible&lt;Function&gt;
  Function for_each(Iter first, Iter last, Function f);
</pre>
<blockquote>
<p>
1 Effects: Applies f to the result of dereferencing every iterator in the
 range [first,last), starting from first and proceeding to last - 1.
</p>
<p>
2 Returns: f.
</p>
<p>
3 Complexity: Applies f exactly last - first times.
</p>
</blockquote>
</blockquote>

<p>
P2 implies the passed object <tt>f</tt> should be invoked at each stage, rather than
some copy of <tt>f</tt>.  This is important if the return value is to usefully
accumulate changes.  So the requirements are an object of type <tt>Function</tt> can
be passed-by-value, invoked multiple times, and then return by value.  In
this case, <tt>MoveConstructible</tt> is sufficient. This would open support for
move-only functors, which might become important in concurrent code as you
can assume there are no other references (copies) of a move-only type and so
freely use them concurrently without additional locks.
</p>

<note>
See further discussion starting with c++std-lib-23686.
</note>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Pete suggests we may want to look at this in a broader context
involving other algorithms.
We should also consider the implications of parallelism.
</p>
<p>
Move to Open, and recommend the issue be deferred until after the next
Committee Draft is issued.
</p>
</blockquote>

<note>
2009-10-14 Daniel de-conceptified the proposed resolution.
</note>

<blockquote>
<p>
The note in <sref ref="[algorithms.general]"/>/9 already says the right thing:
</p>
<blockquote><p>
Unless otherwise specified, algorithms that take function objects
as arguments are permitted to copy those function objects freely.
</p></blockquote>
<p>
So we only need to ensure that the wording for <tt>for_each</tt> is sufficiently
clear, which is the intend of the following rewording.
</p>
</blockquote>

<note>
2009-10-15 Daniel proposes:
</note>

<blockquote>
<ul>
<li>
<p>
Add a new Requires clause just after the prototype declaration (<sref ref="[alg.foreach]"/>):
</p>
<blockquote>
<p>
<ins><i>Requires:</i> <tt>Function</tt> shall be <tt>MoveConstructible</tt>
(<sref ref="[moveconstructible]"/>), <tt>CopyConstructible</tt> is not required.</ins>
</p>
</blockquote>
</li>
<li>
<p>
Change <sref ref="[alg.foreach]"/>/2 as indicated:
</p>

<blockquote><p>
<i>Returns:</i> <ins>std::move(</ins>f<ins>)</ins>.
</p></blockquote>
</li>
</ul>
</blockquote>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Move to Tentatively Ready, using Daniel's wording without the portion
saying "CopyConstructible is not required".
</p></blockquote>

<note>
2009-10-27 Daniel adds:
</note>

<blockquote>
<p>
I see that during the Santa Cruz meeting the originally proposed addition
</p>

<blockquote><p>
, <tt>CopyConstructible</tt> is not required.
</p></blockquote>

<p>
was removed. I don't think that this removal was a good idea. The combination
of <sref ref="[algorithms.general]"/> p.9
</p>

<blockquote><p>
[<i>Note:</i> Unless otherwise specified, algorithms that take function objects
as arguments are permitted to copy those function objects freely.[..]
</p></blockquote>

<p>
with the fact that <tt>CopyConstructible</tt> is a refinement <tt>MoveConstructible</tt>
makes it necessary that such an explicit statement is given. Even the
existence of the usage of <tt>std::move</tt> in the <i>Returns</i> clause doesn't
help much, because this would still be well-formed for a <tt>CopyConstructible</tt>
without move constructor. Let me add that the originally proposed
addition reflects current practice in the standard, e.g. <sref ref="[alg.unique]"/> p.5
usages a similar terminology.
</p>

<p>
For similar wording need in case for auto_ptr see <iref ref="973"/>.
</p>

<note>
Howard: Moved from Tentatively Ready to Open.
</note>
</blockquote>

<note>
2009-11-20 Howard restores "not <tt>CopyConstructible</tt>" to the spec.
</note>

<note>
2009-11-22 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<ul>
<li>
<p>
Add a new Requires clause just after the prototype declaration (<sref ref="[alg.foreach]"/>):
</p>
<blockquote>
<p>
<ins><i>Requires:</i> <tt>Function</tt> shall meet the requirements of
<tt>MoveConstructible</tt> (<sref ref="[moveconstructible]"/>). 
<tt>Function</tt> need not meet the requirements of
<tt>CopyConstructible</tt> (<sref ref="[copyconstructible]"/>).</ins>
</p>
</blockquote>
</li>
<li>
<p>
Change <sref ref="[alg.foreach]"/>/2 as indicated:
</p>

<blockquote><p>
<i>Returns:</i> <ins>std::move(</ins>f<ins>)</ins>.
</p></blockquote>
</li>
</ul>

<!-- 
<p>
Change <sref ref="[algorithms.syn]"/> and <sref ref="[alg.foreach]"/>:
</p>

<blockquote><pre>
template&lt;InputIterator Iter, Callable&lt;auto, Iter::reference&gt; Function&gt;
  requires <del>CopyConstructible</del> <ins>MoveConstructible</ins>&lt;Function&gt;
  Function for_each(Iter first, Iter last, Function f);
</pre></blockquote>
 -->

</resolution>

</issue>
