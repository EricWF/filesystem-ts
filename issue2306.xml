<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2306" status="New">
<title><tt>match_results::reference</tt> should be <tt>value_type&amp;</tt>, not <tt>const value_type&amp;</tt></title>
<section><sref ref="[re.results]"/></section>
<submitter>Matt Austern</submitter>
<date>25 Sep 2013</date>

<discussion>
<p>
The match_results class synopsis has
</p>
<blockquote><pre>
typedef const value_type&amp; const_reference;
typedef const_reference reference;
</pre></blockquote>
<p>
We're getting too enthusiastic about types here by insisting that <tt>const_reference</tt> is a const reference, even 
though <tt>match_results</tt> is a read-only container. In the container requirements table (Table 96, in section 
<sref ref="[container.requirements.general]"/> we say that <tt>Container::reference</tt> is "lvalue of <tt>T</tt>" and 
<tt>Container::const_reference</tt> is "const lvalue of <tt>T</tt>".
</p>
<p>
That phrasing in the container requirements table is admittedly a little fuzzy and ought to be clarified (as discussed in 
lwg issue <iref ref="2182"/>), but in context it's clear that <tt>Container::reference</tt> ought to be a <tt>T&amp;</tt> 
even for constant containers. In the rest of Clause 23 we see that <tt>Container::reference</tt> is <tt>T&amp;</tt>, not 
<tt>const T&amp;</tt>, even for const-qualified containers and that it's <tt>T&amp;</tt>, not <tt>const T&amp;</tt>, even 
for containers like <tt>set</tt> and <tt>unordered_set</tt> that provide const iterators only.
<p/>
The way we handle const containers is just that in the case of a const-qualified container (including <tt>match_results</tt>) 
there are no operations that return <tt>Container::reference</tt>. That's already the case, so this issue is complaining 
about an unused typedef.</p>
</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Change the class template <tt>match_results</tt> header synopsis, <sref ref="[re.results]"/> p4 as indicated:</p>

<blockquote><pre>
typedef const value_type&amp; const_reference;
typedef <del>const_reference</del><ins>value_type&amp;</ins> reference;
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
