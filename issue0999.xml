<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="999" status="C++11">
<title>Taking the address of a function</title>
<section><sref ref="[specialized.algorithms]"/></section>
<submitter>Peter Dimov</submitter>
<date>9 Mar 2009</date>

<discussion>
<p>
The same fix (reference <iref ref="987"/>) may be applied to <tt>addressof</tt>, which is also constrained to
<tt>ObjectType</tt>. (That was why <tt>boost::ref</tt> didn't work with functions - it
tried to apply <tt>boost::addressof</tt> and the <tt>reinterpret_cast&lt;char&amp;&gt;</tt>
implementation of <tt>addressof</tt> failed.)
</p>

<!-- 
<note>
Post Summit Daniel adds:
</note>

<blockquote>
I suggest to add an additional requirement clause "<tt>requires
PointeeType&lt;T&gt;</tt>" to all suggested
places in this issue where <tt>ReferentType</tt> is required to exclude
reference types. This could happen
unintentionally, if addressof is instantiated by calling it with
explicitly provided template arguments.
</blockquote>
 -->

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
We agree.
</p>
<p>
Move to Tentatively Ready.
</p>
</blockquote>

<note>
2009-07 Frankfurt
</note>

<blockquote><p>
Moved from Tentatively Ready to Open only because the wording needs to be
tweaked for concepts removal.
</p></blockquote>

<note>
2009-10-10 Daniel updates wording to concept-free.
</note>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Move to Tentatively Ready.
</p></blockquote>

</discussion>

<resolution>
<note>
The resolution assumes that <tt>addressof</tt> is reintroduced as described in
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2946.pdf">n2946</a>
</note>

<p>
In <sref ref="[specialized.algorithms]"/> change as described:
</p>

<blockquote><pre>
template &lt;class T&gt; T* addressof(T&amp; r);
</pre>
<blockquote><p>
<i>Returns:</i> The actual address of the object <ins>or function</ins>
referenced by <tt>r</tt>, even in the presence of an overloaded <tt>operator&amp;</tt>.
</p></blockquote>
</blockquote>

<!-- 
<p>
Change the synopsis in <sref ref="[memory]"/>:
</p>

<blockquote><pre>
template &lt;<del>ObjectType</del> <ins>PointeeType</ins> T&gt;
  T* addressof(T&amp; r);
</pre></blockquote>

<p>
Change <sref ref="[specialized.addressof]"/>:
</p>

<blockquote><pre>
template &lt;<del>ObjectType</del> <ins>PointeeType</ins> T&gt;
  T* addressof(T&amp; r);
</pre></blockquote>
 -->
</resolution>

</issue>
