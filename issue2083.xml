<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2083" status="Ready">
<title>const-qualification on <tt>weak_ptr::owner_before</tt></title>
<section><sref ref="[util.smartptr.weak]"/>, <sref ref="[util.smartptr.weak.obs]"/></section>
<submitter>Ai Azuma</submitter>
<date>6 Sep 2011</date>

<discussion>

<p>
Is there any reason why <tt>weak_ptr::owner_before</tt> member function templates are not const-qualified?
</p>

<p>
Daniel Kr&uuml;gler:
</p>
<blockquote><p>
I don't think so. To the contrary, without these to be const member function templates, the
semantics of the specializations <tt>owner_less&lt;weak_ptr&lt;T&gt;&gt;</tt>  and
<tt>owner_less&lt;shared_ptr&lt;T&gt;&gt;</tt> described in <sref ref="[util.smartptr.ownerless]"/> 
is unclear.
<p/>
It is amusing to note that this miss has remain undetected from the accepted paper
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf">n2637</a> 
on. For the suggested wording changes see below. 
</p></blockquote>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<ol>
<li><p>Change the class template <tt>weak_ptr</tt> synopsis in <sref ref="[util.smartptr.weak]"/>
as indicated:</p>
<blockquote><pre>
namespace std {
  template&lt;class T&gt; class weak_ptr {
  public:
    typedef T element_type;
    [&hellip;]
    template&lt;class U&gt; bool owner_before(shared_ptr&lt;U&gt; const&amp; b) <ins>const</ins>;
    template&lt;class U&gt; bool owner_before(weak_ptr&lt;U&gt; const&amp; b) <ins>const</ins>;
  };
  [&hellip;]
}
</pre></blockquote>
</li>
<li><p>Change the prototypes in <sref ref="[util.smartptr.weak.obs]"/> before p6 as indicated:</p>
<blockquote><pre>
template&lt;class U&gt; bool owner_before(shared_ptr&lt;U&gt; const&amp; b) <ins>const</ins>;
template&lt;class U&gt; bool owner_before(weak_ptr&lt;U&gt; const&amp; b) <ins>const</ins>;
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
