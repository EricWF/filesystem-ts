<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1084" status="NAD Concepts">
<title>Concept <tt>ForwardIterator</tt> should provide default implementation for post-increment</title>
<section><sref ref="[forward.iterators]"/></section>
<submitter>Howard Hinnant</submitter>
<date>22 Mar 2009</date>

<discussion>
<p><b>Addresses UK 250 [CD1]</b></p>

<p>
A default implementation should be supplied for the post-increment
operator to simplify implementation of iterators by users.
</p>

<p>
Copy the Effects clause into the concept description as the default
implementation. Assumes a default value for <tt>postincrement_result</tt>.
</p>

<note>
Summit:
</note>
<blockquote><p>
Howard will open an issue.
</p></blockquote>

<note>
2009-06-07 Daniel adds:
</note>

<blockquote><p>
This issue cannot currently be resolved as suggested, because
that would render auto-detection of the return type
<tt>postincrement_result</tt> invalid, see <sref ref="[concept.map.assoc]"/>/4+5. The
best fix would be to add a default type to that associated type, but
unfortunately any default type will prevent auto-deduction of types of
associated functions as quoted above. A corresponding core issue
is in preparation.
</p></blockquote>
</discussion>

<resolution>
<note>
This wording assumes the acceptance of UK 251 / <iref ref="1009"/>.  Both
wordings change the same paragraphs.
</note>

<p>
Change <sref ref="[forward.iterators]"/>:
</p>

<blockquote>
<pre>
concept ForwardIterator&lt;typename X&gt; : InputIterator&lt;X&gt;, Regular&lt;X&gt; { 

  MoveConstructible postincrement_result;
  requires HasDereference&lt;postincrement_result&gt;
        &amp;&amp; Convertible&lt;HasDereference&lt;postincrement_result&gt;::result_type, const value_type&amp;&gt;;

  postincrement_result operator++(X&amp; r, int)<del>;</del> <ins>{
     X tmp = r;
     ++r;
     return tmp;
  }</ins>

  axiom MultiPass(X a, X b) { 
    if (a == b) *a == *b; 
    if (a == b) ++a == ++b; 
  } 
}
</pre></blockquote>

</resolution>

</issue>
