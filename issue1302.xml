<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1302" status="NAD">
<title>different <tt>emplace</tt> semantics for sequence and associated containers</title>
<section><sref ref="[associative.reqmts]"/>, <sref ref="[unord.req]"/></section>
<submitter>Nicolai Josuttis</submitter>
<date>3 Jan 2010</date>

<discussion>
<p>
According to the new naming scheme introduced with
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf">N2680</a>
</p>

<blockquote><pre>
vector&lt;T&gt; v;
v.emplace(v.begin(),x,y,z)
</pre></blockquote>

<p>
now has a different semantics than
</p>

<blockquote><pre>
set&lt;T&gt; s;
s.emplace(s.begin(),x,y,z);
</pre></blockquote>

<p>
While the version for <tt>vector</tt>s takes the first argument as position and
the remaining for construction, the version for <tt>set</tt>s takes all
arguments for construction.
</p>

<p>
IMO, this is a serious design mistake for a couple of reasons:
</p>

<ul>
<li>
<p>
First, in principle, all STL member functions should have the same behavior with
the same member function to avoid confusion and allow to write proper generic
code.
</p>
<p>
In fact, when I write the following simple function template:
</p>
<blockquote><pre>
template &lt;typename T&gt;
void doEmplace (T&amp; cont)
{
   cont.emplace(cont.begin(),"nico","josuttis",42);
}
</pre></blockquote>
<p>
the semantics depends on the type of the container.
</p>
</li>
<li>
<p>
In addition, I also guess using the name <tt>emplace_hint()</tt> instead of
<tt>emplace()</tt> for associative containers is a design mistake. According to
my knowledge, it was a design goal of the original STL to provide ONE
<tt>insert</tt> function, which works for ALL containers. This was
<tt>insert(pos,val)</tt>.
</p>
<p>
The trick to declare <tt>pos</tt> as a hint, allowed that we could implement a
generic <tt>insert</tt> for all containers. Now, with the new <tt>emplace</tt>
naming scheme, this trick is gone for the new kind of insertion.
</p>
</li>
</ul>

<p>
I consider this to be a serious design penalty because once this
is specified we can't fix that without breaking backward compatibility.
</p>

<p>
However, we have two choices for a fix:
</p>

<ul>
<li>
rename <tt>emplace_hint(pos,val)</tt> for associative containers back to
<tt>emplace(pos,val)</tt>. However to avoid the overloading problems, we also
have to rename the existing <tt>emplace(val)</tt> functions to something else (I
don't have a good name here at hand).
</li>
<li>
Keep <tt>emplace(val)</tt> for associative containers as it is, but rename
<tt>emplace(pos,val)</tt> for sequence containers and
<tt>emplace_hint(pos,val)</tt> to something like <tt>emplace_at(pos,val)</tt>,
declaring that <tt>pos</tt> is a hint for associative containers.
</li>
</ul>

<note>
2010 Pittsburgh:  Moved to NAD, rationale added below.
</note>

</discussion>

<rationale>
<p>
There was no consensus to make this change.
</p>
</rationale>

<resolution>
<p> In <sref ref="[unord.req]"/>, change: </p>
<blockquote> 
  <table border="1">
    <caption>Table 96 &#151; Associative container requirements (in addition to 
    container)</caption>
    <tr> 
      <th>expression</th>
      <th>Return type</th>
      <th>Assertion/note pre-/post-condition</th>
      <th>Post-condition</th>
    </tr>
    <tr> 
      <td colspan="4">...</td>
    </tr>
    <tr> 
      <td><tt>a_uniq.emplace<ins>_value</ins>(args)</tt></td>
      <td><tt>pair&lt;iterator, bool&gt;</tt></td>
      <td>inserts a T object t constructed with std::forward&lt;Args&gt;(args)...<br/>
        if and only if there is no element in the container with key equivalent 
        to the key of t.<br/>
        The bool component of the returned pair is true if and only if the insertion 
        takes place, and the iterator component of the pair points to the element 
        with key equivalent to the key of t.</td>
      <td>logarithmic</td>
    </tr>
    <tr> 
      <td><tt>a_eq.emplace<ins>_value</ins>(args)</tt></td>
      <td><tt>iterator</tt></td>
      <td>inserts a T object t constructed with std::forward&lt;Args&gt;(args)... 
        and returns the iterator pointing to the newly inserted element.</td>
      <td>logarithmic</td>
    </tr>
    <tr> 
      <td><tt>a.emplace<del>_hint</del>(p,args)</tt></td>
      <td><tt>iterator</tt></td>
      <td>equivalent to
      <tt>a.emplace<ins>_value</ins>(std::forward&lt;Args&gt;(args)...)</tt>.
      Return value is an iterator pointing to the element with the key
      equivalent to the newly inserted element. The const_iterator p is a hint
      pointing to where the search should start. Implementations are permitted
      to ignore the hint.</td> <td>logarithmic in general, but amortized
      constant if the element is inserted right after p</td>
    </tr>
    <tr> 
      <td colspan="4">... </td>
    </tr>
  </table>
  
</blockquote>
<p> In <sref ref="[unord.req]"/>, change: </p>
<blockquote>
  <table border="1">
    <caption>Table 98 &#151; Unordered associative container requirements (in 
    addition to container)</caption>
    <tr> 
      <th>expression</th>
      <th>Return type</th>
      <th>Assertion/note pre-/post-condition</th>
      <th>Post-condition</th>
    </tr>
    <tr> 
      <td colspan="4">...</td>
    </tr>
    <tr> 
      <td><tt>a_uniq.emplace<ins>_value</ins>(args)</tt></td>
      <td><tt>pair&lt;iterator, bool&gt;</tt></td>
      <td>inserts a <tt>T</tt> object <tt>t</tt> constructed with <tt>std::forward&lt;Args&gt;(args)...</tt> if 
        and only if there is no element in the container with key equivalent to 
        the key of <tt>t</tt>. The bool component of the returned pair is true if and only 
        if the insertion takes place, and the iterator component of the pair points 
        to the element with key equivalent to the key of t.</td>
      <td>Average case O(1), worst case O(a_uniq.size()).</td>
    </tr>
    <tr> 
      <td><tt>a_eq.emplace<ins>_value</ins>(args)</tt></td>
      <td><tt>iterator</tt></td>
      <td>inserts a T object t constructed with std::forward&lt;Args&gt;(args)... 
        and returns the iterator pointing to the newly inserted element.</td>
      <td>Average case O(1), worst case O(a_eq.size()).</td>
    </tr>
    <tr> 
      <td><tt>a.emplace<del>_hint</del>(p,args)</tt></td>
      <td><tt>iterator</tt></td>
      <td>equivalent to
      <tt>a.emplace<ins>_value</ins>(std::forward&lt;Args&gt;(args)...)</tt>.
      Return value is an iterator pointing to the element with the key
      equivalent to the newly inserted element. The const_iterator p is a hint
      pointing to where the search should start. Implementations are permitted
      to ignore the hint.</td> <td>Average case O(1), worst case
      O(a.size()).</td>
    </tr>
    <tr> 
      <td colspan="4">... </td>
    </tr>
  </table>
</blockquote>

<p>
In <sref ref="[map]"/>, <sref ref="[set]"/>, <sref ref="[unord.map]"/>, <sref
ref="[unord.set]"/>, change:
</p>
<blockquote> 
  <p><i>// modifiers:</i><br/>
    <tt>template &lt;class... Args&gt; pair&lt;iterator, bool&gt; emplace<ins>_value</ins>(Args&amp;&amp;... 
    args);<br/>
    template &lt;class... Args&gt; iterator emplace<del>_hint</del>(const_iterator 
    position, Args&amp;&amp;... args);</tt></p>
</blockquote>

<p>
In <sref ref="[multimap]"/>, <sref ref="[multiset]"/>, <sref
ref="[unord.multimap]"/>, <sref ref="[unord.multiset]"/>, change:
</p>
<blockquote> 
  <p><i>// modifiers:<br/></i><tt>template &lt;class... Args&gt; iterator emplace<ins>_value</ins>(Args&amp;&amp;... 
    args);<br/>
    template &lt;class... Args&gt; iterator emplace<del>_hint</del>(const_iterator position, 
    Args&amp;&amp;... args);<br/>
    </tt> </p>
</blockquote>
</resolution>

</issue>
