<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2081" status="Ready">
<title><tt>Allocator</tt> requirements should include <tt>CopyConstructible</tt></title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>30 Aug 2011</date>

<discussion>

<p>
As discussed in c++std-lib-31054 and c++std-lib-31059, the <tt>Allocator</tt>
requirements implicitly require <tt>CopyConstructible</tt> because
<tt>a.select_on_container_copy_construction()</tt> and
<tt>container.get_allocator()</tt> both return a copy by value, but the
requirement is not stated explicitly anywhere.
<p/>
In order to clarify that allocators cannot have 'explicit' copy
constructors, the requirements should include <tt>CopyConstructible</tt>.
</p>

<note>2012, Kona</note>
<p>
Move to Ready.
</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<ol>
<li><p>Change Table 28 &mdash; Allocator requirements in <sref ref="[allocator.requirements]"/>:</p>

<table border="1">
<caption>Table 28 &mdash; Allocator requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion&#47;note pre-&#47;post-condition</th>
<th>Default</th>
</tr> 
<tr>
<td>
<tt>X a1(a);<br/>
<ins>X a1 = a;</ins></tt>
</td>
<td>
</td>
<td>
Shall not exit via an exception.<br/>
post: <tt>a1 == a</tt>
</td>
<td>
</td>
</tr>

<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>X a1(move(a));<br/>
<ins>X a1 = move(a);</ins></tt>
</td>
<td>
</td>
<td>
Shall not exit via an exception.<br/>
post: <tt>a1</tt> equals the prior value<br/>
of <tt>a</tt>.
</td>
<td>
</td>
</tr>
</table>

</li>

<li><p>Change <sref ref="[allocator.requirements]"/> paragraph 4:</p>

<blockquote><p>
<ins>An allocator type <tt>X</tt> shall satisfy the requirements of <tt>CopyConstructible</tt> 
(<sref ref="[utility.arg.requirements]"/>).</ins> The <tt>X::pointer</tt>, <tt>X::const_pointer</tt>, 
<tt>X::void_pointer</tt>, and <tt>X::const_void_pointer</tt> types shall satisfy the requirements of 
<tt>NullablePointer</tt> (<sref ref="[nullablepointer.requirements]"/>). No constructor, comparison 
operator, copy operation, move operation, or swap operation on these types shall exit via an 
exception. <tt>X::pointer</tt> and <tt>X::const_pointer</tt> shall also satisfy the requirements 
for a random access iterator (<sref ref="[iterator.requirements]"/>).
</p></blockquote>
</li>
</ol>
</resolution>

</issue>
