<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1325" status="Tentatively Voting">
<title>bitset</title>
<section><sref ref="[bitset.cons]"/></section>
<submitter>Christopher Jefferson</submitter>
<date>7 Mar 2010</date>

<discussion>
<p>
As mentioned on the boost mailing list:
</p>

<p>
The following code, valid in C++03, is broken in C++0x due to ambiguity
between the "<tt>unsigned long long</tt>" and "<tt>char*</tt>"
constructors.
</p>

<blockquote><pre>
#include &lt;bitset&gt;
std::bitset&lt;10&gt; b(0);
</pre></blockquote>

<note>
The proposed resolution has been reviewed by Stephan T. Lavavej.
</note>

<note>
Post-Rapperswil
</note>

<p>
The proposed resolution has two problems:
</p>
<ul>
<li>
<p>it fails to provide support for non-terminated strings, which
could be easily added and constitutes an important use-case. For
example, the following code would invoke UB with the current
P/R:</p>
<blockquote>
<pre>
char s[4] = { '0', '1', '0', '1' }; // notice: not null-terminated!
bitset&lt;4&gt; b(s, 0, 4);
</pre></blockquote>
because it requires the evaluation (under the as-if rule, to be fair,
but it doesn't matter) of <tt>basic_string&lt;char&gt;(s)</tt>
</li>
<li>
<p>it promotes a consistency between the two <tt>bitset</tt>
constructors that take a <tt>const std::string&amp;</tt> and a
<tt>const char*</tt>, respectively, while practice established by
<tt>std::basic_string</tt> would recommend a different set of
parameters. In particular, the constructor of
<tt>std::basic_string</tt> that takes a <tt>const char*</tt> does
not have a <tt>pos</tt> parameter</p>
</li>
</ul>

<blockquote>
Moved to Tentatively Ready with revised wording provided by Alberto Ganesh Babati after 5 positive votes on c++std-lib.
</blockquote>

</discussion>

<resolution>
<!-- original resolution
<p>
In WD N3035, <sref ref="[template.bitset]"/>/1, replace the fourth
bitset constructor:
</p>

<blockquote><pre>
<del>explicit bitset(const char *str);</del>
<ins>template &lt;class charT&gt;
   explicit bitset(
     const charT *str,
     typename basic_string&lt;charT&gt;::size_type pos = 0,
     typename basic_string&lt;charT&gt;::size_type n =
       basic_string&lt;charT&gt;::npos,
     charT zero = charT('0'), charT one = charT('1'));</ins>
</pre></blockquote>

<p>
And in <sref ref="[bitset.cons]"/>/8:
</p>

<blockquote><pre>
<del>explicit bitset(const char *str);</del>
</pre>
<blockquote>
<del><i>Effects:</i> Constructs an object of class
<tt>bitset&lt;N&gt;</tt> as if by <tt>bitset(string(str))</tt>.</del>
</blockquote>

<pre>
<ins>template &lt;class charT&gt;
 explicit
 bitset(const charT *str,
   typename basic_string&lt;charT&gt;::size_type pos = 0,
   typename basic_string&lt;charT&gt;::size_type n =
     basic_string&lt;charT&gt;::npos,
     charT zero = charT('0'), charT one = charT('1'));</ins>
</pre>

<blockquote>
<ins><i>Effects:</i> Constructs an object of class <tt>bitset&lt;N&gt;</tt>
as if by <tt>bitset(basic_string&lt;charT&gt;(str), pos, n, zero,
one)</tt>.</ins>
</blockquote>
</blockquote>
<-->

<ol>
<li>In the synopsis of header <tt>&lt;bitset&gt;</tt> in
[template.bitset]/1, replace the fourth bitset constructor:
<blockquote>
<pre>
<del>explicit bitset(const char *str);</del>
<ins>template &lt;class charT&gt;
  explicit bitset(
    const charT *str,
    typename basic_string&lt;charT&gt;::size_type n = basic_string&lt;charT&gt;::npos,
    charT zero = charT('0'), charT one = charT('1'));</ins>
</pre></blockquote>
</li>
<li>In [bitset.cons]/8:
<blockquote>
<pre>
<del>explicit bitset(const char *str);</del>
<ins>template &lt;class charT&gt;
explicit
bitset(const charT *str,
       typename basic_string&lt;charT&gt;::size_type n = basic_string&lt;charT&gt;::npos,
       charT zero = charT('0'), charT one = charT('1'));</ins>
</pre></blockquote>
Effects: Constructs an object of class
<tt>bitset&lt;N&gt;</tt> as if by
<del>bitset(string(str)).</del>
<blockquote><pre><ins>
bitset(
  n == basic_string&lt;charT&gt;::npos
    ? basic_string&lt;charT&gt;(str)
    : basic_string&lt;charT&gt;(str, n),
  0, n, zero, one)
</ins></pre></blockquote>
</li>
</ol>

</resolution>

</issue>
