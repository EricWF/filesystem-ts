<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="77" status="Dup">
<title>Valarray operator[] const returning value</title>
<section><sref ref="[valarray.access]"/></section>
<submitter>Levente Farkas</submitter>
<date>9 Sep 1998</date>

<discussion>
<p>valarray:<br/>
<br/>
&nbsp;&nbsp;&nbsp; <tt>T operator[] (size_t) const;</tt><br/>
<br/>
why not <br/>
<br/>
&nbsp;&nbsp;&nbsp; <tt>const T&amp; operator[] (size_t) const;</tt><br/>
<br/>
as in vector ???<br/>
<br/>
One can't copy even from a const valarray eg:<br/>
<br/>
&nbsp;&nbsp;&nbsp; <tt>memcpy(ptr, &amp;v[0], v.size() * sizeof(double));<br/>
</tt><br/>
[I] find this bug in valarray is very difficult.</p>
</discussion>

<rationale>
<p>The LWG believes that the interface was deliberately designed that
way. That is what valarray was designed to do; that's where the
&quot;value array&quot; name comes from. LWG members further comment
that &quot;we don't want valarray to be a full STL container.&quot;
<sref ref="[valarray.access]"/> specifies properties that indicate &quot;an
absence of aliasing&quot; for non-constant arrays; this allows
optimizations, including special hardware optimizations, that are not
otherwise possible. </p>
</rationale>
<duplicate><iref ref="389"/></duplicate>
</issue>
