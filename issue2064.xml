<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2064" status="Voting">
<title>More <tt>noexcept</tt> issues in <tt>basic_string</tt></title>
<section><sref ref="[basic.string]"/></section>
<submitter>Howard Hinnant</submitter>
<date>29 May 2011</date>

<discussion>
<p>
The following inconsistencies regarding <tt>noexcept</tt> for <tt>basic_string</tt> are noted.
<p/>
Member swap is not marked <tt>noexcept</tt>:
</p><blockquote><pre>
void swap(basic_string&amp; str);
</pre></blockquote><p>
But the global swap is marked <tt>noexcept</tt>:
</p><blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
void swap(basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
          basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <span style="color:#C80000;font-weight:bolder">noexcept</span>;
</pre></blockquote><p>
But only in the definition, not in the synopsis.
<p/>
All comparison operators are marked <tt>noexcept</tt> in their definitions, but not in the synopsis.
<p/>
The compare function that takes a pointer:
</p><blockquote><pre>
int compare(const charT *s) const;
</pre></blockquote><p>
is not marked <tt>noexcept</tt>. But some of the comparison functions which are marked <tt>noexcept</tt> 
(only in their definition) are specified to call the throwing compare operator:
</p><blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator==(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const charT* rhs) <span style="color:#C80000;font-weight:bolder">noexcept</span>;
</pre><blockquote><p>
<i>Returns</i>: <tt>lhs.compare(rhs) == 0</tt>.
</p></blockquote></blockquote>
<p>
All functions with a narrow contract should not be declared as <tt>noexcept</tt> according to
the guidelines presented in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3279.pdf">n3279</a>.
Among these narrow contract functions are the <tt>swap</tt> functions (<sref ref="[container.requirements.general]"/> p. 8) 
and functions with non-<tt>NULL</tt> <tt>const charT*</tt> parameters.
</p>
<note>2011-06-08 Daniel provides wording</note>

<note>Bloomington, 2011</note>
<p>
Move to Ready
</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS. Both move-assignment operator and the moving <tt>assign</tt>
function are not touched by this issue, because they are handled separately by issue <iref ref="2063"/>.</p>
<ol>
<li><p>Modify the header <tt>&lt;string&gt;</tt> synopsis in <sref ref="[string.classes]"/> as 
indicated (Rationale: Adding <tt>noexcept</tt> to these specific overloads is in sync with
applying the same rule to specific overloads of the member functions <tt>find</tt>, <tt>compare</tt>, etc.
This approach deviates from that taken in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3279.pdf">n3279</a>,
but seems more consistent given similar application for comparable member functions):</p>

<blockquote><pre>
#include &lt;initializer_list&gt;

namespace std {

  [&hellip;]
  template&lt;class charT, class traits, class Allocator&gt;
    bool operator==(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                    const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]
  template&lt;class charT, class traits, class Allocator&gt;
    bool operator!=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                    const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]

  template&lt;class charT, class traits, class Allocator&gt;
    bool operator&lt;(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                   const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]
  template&lt;class charT, class traits, class Allocator&gt;
    bool operator&gt;(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                   const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]

  template&lt;class charT, class traits, class Allocator&gt;
    bool operator&lt;=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                    const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]
  template&lt;class charT, class traits, class Allocator&gt;
    bool operator&gt;=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                    const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <ins>noexcept</ins>;
  [&hellip;]
}
</pre></blockquote>
</li>

<li><p>Modify the class template <tt>basic_string</tt> synopsis in <sref ref="[basic.string]"/> as 
indicated (Remark 1: The <tt>noexcept</tt> at the move-constructor is fine, because even for a
small-object optimization there is no problem here, because <tt>basic_string::value_type</tt>
is required to be a non-array POD as of <sref ref="[strings.general]"/> p1, Remark 2: This
proposal removes the <tt>noexcept</tt> at single character overloads of <tt>find</tt>, <tt>rfind</tt>,
etc. because they are defined in terms of potentially allocating functions. It seems like
an additional issue to me to change the semantics in terms of non-allocating functions and
adding <tt>noexcept</tt> instead):</p>

<blockquote><pre>
namespace std {
  template&lt;class charT, class traits = char_traits&lt;charT&gt;,
    class Allocator = allocator&lt;charT&gt; &gt;
  class basic_string {
  public:
    [&hellip;]
    <i>// [string.ops], string operations:</i>
    [&hellip;]
    size_type find (charT c, size_type pos = 0) const <del>noexcept</del>;
    [&hellip;]
    size_type rfind(charT c, size_type pos = npos) const <del>noexcept</del>;
    [&hellip;]
    size_type find_first_of(charT c, size_type pos = 0) const <del>noexcept</del>;
    [&hellip;]
    size_type find_last_of (charT c, size_type pos = npos) const <del>noexcept</del>;
    [&hellip;]
    size_type find_first_not_of(charT c, size_type pos = 0) const <del>noexcept</del>;
    [&hellip;]
    size_type find_last_not_of (charT c, size_type pos = npos) const <del>noexcept</del>;
    [&hellip;]
  };
}
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::find]"/> before p5 and before p7 as indicated:</p>

<blockquote><pre>
size_type find(const charT* s, size_type pos = 0) const <del>noexcept</del>;
[&hellip;]
size_type find(charT c, size_type pos = 0) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>find(basic_string&lt;charT,traits,Allocator&gt;(1,c), pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::rfind]"/> before p7 as indicated:</p>

<blockquote><pre>
size_type rfind(charT c, size_type pos = npos) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>rfind(basic_string&lt;charT,traits,Allocator&gt;(1,c),pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::find.first.of]"/> before p7 as indicated:</p>

<blockquote><pre>
size_type find_first_of(charT c, size_type pos = 0) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>find_first_of(basic_string&lt;charT,traits,Allocator&gt;(1,c), pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::find.last.of]"/> before p7 as indicated:</p>

<blockquote><pre>
size_type find_last_of(charT c, size_type pos = npos) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>find_last_of(basic_string&lt;charT,traits,Allocator&gt;(1,c),pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::find.first.not.of]"/> before p7 as indicated:</p>

<blockquote><pre>
size_type find_first_not_of(charT c, size_type pos = 0) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>find_first_not_of(basic_string(1, c), pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::find.last.not.of]"/> before p7 as indicated:</p>

<blockquote><pre>
size_type find_last_not_of(charT c, size_type pos = npos) const <del>noexcept</del>;
</pre><blockquote><p>
-7- <i>Returns</i>: <tt>find_last_not_of(basic_string(1, c), pos)</tt>.
</p></blockquote></blockquote>

</li>

<li><p>Modify <sref ref="[string::operator==]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator==(const charT* lhs,
                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator==(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::op!=]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator!=(const charT* lhs,
                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator!=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::op&lt;]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator&lt;(const charT* lhs,
               const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator&lt;(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
               const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::op&gt;]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator&gt;(const charT* lhs,
               const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator&gt;(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
               const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::op&lt;=]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator&lt;=(const charT* lhs,
                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator&lt;=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string::op&gt;=]"/> before p2+p3 as indicated:</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
bool operator&gt;=(const charT* lhs,
                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;

[&hellip;]
				
template&lt;class charT, class traits, class Allocator&gt;
bool operator&gt;=(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const charT* rhs) <del>noexcept</del>;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[string.special]"/> as indicated (Remark: The change of
the semantics guarantees as of <sref ref="[structure.specifications]"/> p4 that 
the "Throws: Nothing" element of member swap is implied):</p>

<blockquote><pre>
template&lt;class charT, class traits, class Allocator&gt;
  void swap(basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
    basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) <del>noexcept</del>;
</pre><blockquote><p>
-1- Effects: <ins>Equivalent to</ins> <tt>lhs.swap(rhs);</tt>
</p></blockquote></blockquote>

</li>
</ol>
</resolution>

</issue>
