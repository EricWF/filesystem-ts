<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1131" status="C++11">
<title>C++0x does not need <tt>alignment_of</tt></title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Niels Dekker</submitter>
<date>1 Jun 2009</date>

<discussion>
<p>
The <tt>alignment_of</tt> template is no longer necessary, now that the
core language will provide <tt>alignof</tt>. Scott Meyers raised this
issue at comp.std.c++,
<a href="http://groups.google.com/group/comp.std.c++/browse_thread/thread/9b020306e803f08a">C++0x: alignof vs. alignment_of</a>,
May 21, 2009.  In a reply, Daniel Kr&uuml;gler pointed out that
<tt>alignof</tt> was added to the working paper <i>after</i>
<tt>alignment_of</tt>. So it appears that <tt>alignment_of</tt> is only
part of the current Working Draft 
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2857.pdf">N2857</a>)
because it is in TR1.
</p>
<p>
Having both <tt>alignof</tt> and <tt>alignment_of</tt> would cause
unwanted confusion. In general, I think TR1 functionality should not be
brought into C++0x if it is entirely redundant with other C++0x language
or library features.
</p>

<note>
2009-11-16 Chris adds:
</note>

<blockquote>
<p>
I would like to suggest the following new wording for this issue, based on
recent discussions. Basically this doesn't delete <tt>alignment_of</tt>, it just
makes it clear that it is just a wrapper for <tt>alignof</tt>. This deletes the
first part of the proposed resolution, changes the second part by leaving in
<tt>alignof(T)</tt> but changing the precondition and leaves the 3rd part
unchanged.
</p>

<p>
Suggested Resolution:
</p>

<blockquote>
<p>
Change the first row of Table 44 ("Type property queries"), from Type properties
<sref ref="[meta.unary.prop]"/>:
</p>

<blockquote>
<table border="1">
<caption>Table 44 &mdash; Type property queries</caption>
<tr>
<td>
<tt>template &lt;class T&gt; struct alignment_of;</tt>
</td>
<td>
<tt>alignof(T)</tt>.<br/>
<i>Precondition:</i> <del><tt>T</tt> shall be a complete type, a reference type,
or an array of unknown bound, but shall not be a function type or (possibly
cv-qualified) <tt>void</tt>.</del> <ins><tt>alignof(T)</tt> shall be defined</ins>
</td>
</tr>

</table>
</blockquote>

<p>
Change text in Table 51 ("Other transformations"), from Other transformations
<sref ref="[meta.trans.other]"/>, as follows:
</p>

<blockquote>
<table border="1">
<caption>Table 51 &mdash; Other transformations</caption>
<tr>
<td>&hellip;<tt>aligned_storage;</tt></td>
<td>
<tt>Len</tt> shall not be zero. <tt>Align</tt> shall be equal to
<tt><del>alignment_of&lt;T&gt;::value</del> <ins>alignof(T)</ins></tt> for some
type <tt>T</tt> or to <i>default-alignment</i>.
</td>
<td>&hellip;</td>
</tr>
</table>
</blockquote>
</blockquote>
</blockquote>

<note>
2010-01-30 Alisdair proposes that Chris' wording be moved into the proposed wording
section and tweaks it on the way.
</note>

<blockquote>
<p>
Original proposed wording saved here:
</p>
<blockquote>
<p>
Remove from Header &lt;type_traits&gt; synopsis <sref ref="[meta.type.synop]"/>:
</p>
<blockquote><pre>
<del>template &lt;class T&gt; struct alignment_of;</del>
</pre></blockquote>

<p>
Remove the first row of Table 44 ("Type property queries"), from
Type properties <sref ref="[meta.unary.prop]"/>:
</p>
<blockquote>
<table border="1">
<caption>Table 44 &mdash; Type property queries</caption>
<tr>
<td><del><tt>template &lt;class T&gt; struct alignment_of;</tt></del></td>
<td><del><tt>alignof(T)</tt>.</del><br/>
<del><i>Precondition:</i> <tt>T</tt> shall be a complete type, a reference
type, or an array of unknown bound, but shall not be a function type or
(possibly cv-qualified) <tt>void</tt>.</del>
</td>
</tr>
</table>
</blockquote>

<p>
Change text in Table 51 ("Other transformations"), from Other
transformations <sref ref="[meta.trans.other]"/>, as follows:
</p>
<blockquote>
<table border="1">
<caption>Table 51 &mdash; Other transformations</caption>
<tr>
<td>&hellip;<tt>aligned_storage;</tt></td>
<td>
<tt>Len</tt> shall not be zero.  Align shall be equal to
<tt><del>alignment_of&lt;T&gt;::value</del> <ins>alignof(T)</ins></tt> for some
type <tt>T</tt> or to <i>default-alignment</i>.
</td>
<td>&hellip;</td>
</tr>
</table>
</blockquote>
</blockquote>
</blockquote>

<note>
2010-01-30 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>

<p>
Change the first row of Table 43 ("Type property queries"), from Type properties
<sref ref="[meta.unary.prop]"/>:
</p>

<blockquote>
<table border="1">
<caption>Table 43 &mdash; Type property queries</caption>
<tr>
<td>
<tt>template &lt;class T&gt; struct alignment_of;</tt>
</td>
<td>
<tt>alignof(T)</tt>.<br/>
<i>Precondition:</i> <del><tt>T</tt> shall be a complete type, a reference type,
or an array of unknown bound, but shall not be a function type or (possibly
cv-qualified) <tt>void</tt>.</del> <ins><tt>alignof(T)</tt> is a valid
expression (<sref ref="[expr.alignof]"/>)</ins>
</td>
</tr>

</table>
</blockquote>

<p>
Change text in Table 51 ("Other transformations"), from Other transformations
<sref ref="[meta.trans.other]"/>, as follows:
</p>

<blockquote>
<table border="1">
<caption>Table 51 &mdash; Other transformations</caption>
<tr>
<td>&hellip;<tt>aligned_storage;</tt></td>
<td>
<tt>Len</tt> shall not be zero. <tt>Align</tt> shall be equal to
<tt><del>alignment_of&lt;T&gt;::value</del> <ins>alignof(T)</ins></tt> for some
type <tt>T</tt> or to <i>default-alignment</i>.
</td>
<td>&hellip;</td>
</tr>
</table>
</blockquote>

</resolution>

</issue>
