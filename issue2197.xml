<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2197" status="New">
<title>Specification of <tt>is_[un]signed</tt> unclear for non-arithmetic types</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>7 Oct 2012</date>

<discussion>

<p>
The pre-conditions for the trait <tt>is_signed</tt> allow for any types as template arguments, 
including non-arithmetic ones.
<p/>
But the current wording in Table 49 defining the predicate condition,
</p>
<blockquote><pre>
is_arithmetic&lt;T&gt;::value &amp;&amp; T(-1) &lt; T(0)
</pre></blockquote>
<p>
looks like real code and so leaves it open whether such argument types would create a well-formed 
instantiation of the trait template or not. As written this definition would lead to a hard
instantiation error for a non-arithmetic type like e.g.
</p>
<blockquote><pre>
struct S {};
</pre></blockquote>
<p>
I would suggest that the wording clarifies that the instantiation would be valid for such types as well
by a specification that is not an exact code pattern.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Change Table 49 as indicated:</p>

<table border="1">
<caption>Table 49 &mdash; Type property predicates</caption>
<tr>
<th>Template</th>
<th>Condition</th>
<th>Preconditions</th>
</tr> 

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_signed;</tt>
</td>
<td>
<ins>For </ins><tt>is_arithmetic&lt;T&gt;::value<ins> == true</ins></tt><ins>, the same result as</ins><br/>
<tt><del>&amp;&amp; </del><ins>integral_constant&lt;bool, </ins>T(-1) &lt; T(0)&gt;<ins>::value</ins></tt><ins>,<br/>
otherwise false.</ins>
</td>
<td>
&nbsp;
</td>
</tr>

<tr>
<td>
<tt>template &lt;class T&gt;</tt><br/>
<tt>struct is_unsigned;</tt>
</td>
<td>
<ins>For </ins><tt>is_arithmetic&lt;T&gt;::value<ins> == true</ins></tt><ins>, the same result as</ins><br/>
<tt><del>&amp;&amp; </del><ins>integral_constant&lt;bool, </ins>T(0) &lt; T(-1)&gt;<ins>::value</ins></tt><ins>,<br/>
otherwise false.</ins>
</td>
<td>
&nbsp;
</td>
</tr>

</table>

</li>
</ol>

</resolution>

</issue>
