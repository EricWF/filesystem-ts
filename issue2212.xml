<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2212" status="Open">
<title><tt>tuple_size</tt> for <tt>const pair</tt> request <tt>&lt;tuple&gt;</tt> header</title>
<section><sref ref="[utility]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>09 Nov 2012</date>

<discussion>
<p>
The <tt>&lt;utility&gt;</tt> header declares sufficient of the tuple API to specialize
the necessary templates for <tt>pair</tt>, notably <tt>tuple_size</tt> and
<tt>tuple_element</tt>.  However, it does not make available the partial specializations
that support cv-qualified template arguments, so while I can write the following after
including only <tt>&lt;utility&gt;</tt>: 
</p>
<blockquote><pre>
#include &lt;utility&gt;

using TestType = std::pair&lt;int, int&gt;;
static_assert(2 == std::tuple_size&lt;TestType&gt;(), "Pairs have two elements");
std::tuple_element&lt;0, TestType&gt;::type var{1};
</pre></blockquote>
<p>
the following may fail to compile unless I also include <tt>&lt;tuple&gt;</tt>:
</p>
<blockquote><pre>
#include &lt;utility&gt;

using TestType = const std::pair&lt;int, int&gt;;
static_assert(2 == std::tuple_size&lt;TestType&gt;(), "Pairs have two elements");
std::tuple_element&lt;0, TestType&gt;::type var{1};
</pre></blockquote>
<p>
Note, however, that the latter <em>may</em> compile with some standard library implementations
but not others, leading to subtle portability issues.
</p>
</discussion>

<resolution>

</resolution>

</issue>
