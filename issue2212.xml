<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2212" status="Open">
<title><tt>tuple_size</tt> for <tt>const pair</tt> request <tt>&lt;tuple&gt;</tt> header</title>
<section><sref ref="[utility]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>09 Nov 2012</date>

<discussion>
<p>
The <tt>&lt;utility&gt;</tt> header declares sufficient of the tuple API to specialize
the necessary templates for <tt>pair</tt>, notably <tt>tuple_size</tt> and
<tt>tuple_element</tt>.  However, it does not make available the partial specializations
that support cv-qualified template arguments, so while I can write the following after
including only <tt>&lt;utility&gt;</tt>: 
</p>
<blockquote><pre>
#include &lt;utility&gt;

using TestType = std::pair&lt;int, int&gt;;
static_assert(2 == std::tuple_size&lt;TestType&gt;(), "Pairs have two elements");
std::tuple_element&lt;0, TestType&gt;::type var{1};
</pre></blockquote>
<p>
the following may fail to compile unless I also include <tt>&lt;tuple&gt;</tt>:
</p>
<blockquote><pre>
#include &lt;utility&gt;

using TestType = const std::pair&lt;int, int&gt;;
static_assert(2 == std::tuple_size&lt;TestType&gt;(), "Pairs have two elements");
std::tuple_element&lt;0, TestType&gt;::type var{1};
</pre></blockquote>
<p>
Note, however, that the latter <em>may</em> compile with some standard library implementations
but not others, leading to subtle portability issues.
</p>

<note>2013-03-15 Issues Teleconference</note>
<p>
Moved to Open.
</p>
<p>
Howard notes that we have the same issue with array, so any resolution should apply to that header too.
</p>

<note>2013-10-18 Daniel provides wording</note>

<p>
The suggested wording uses a similar approach as we already have in <sref ref="[iterator.range]"/> to
ensure that the range access templates are available when at least one of an enumerated list of header files is
included.
<p/>
I also think that the restricted focus on <tt>tuple_size</tt> of this issue is too narrow and should be extended to
the similar partial template specializations of <tt>tuple_element</tt> as well. Therefore the suggested wording
ensures this as well.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3797.</p>

<ol>
<li><p>Change <sref ref="[tuple.helper]"/> as indicated:</p>

<blockquote><pre>
template &lt;class T&gt; class tuple_size&lt;const T&gt;;
template &lt;class T&gt; class tuple_size&lt;volatile T&gt;;
template &lt;class T&gt; class tuple_size&lt;const volatile T&gt;;
</pre><blockquote>
<p>
-3- Let <tt><i>TS</i></tt> denote <tt>tuple_size&lt;T&gt;</tt> of the <i>cv</i>-unqualified type <tt>T</tt>. Then 
each of the three templates shall meet the <tt>UnaryTypeTrait</tt> requirements (20.10.1) with a <tt>BaseCharacteristic</tt> of
</p>
<blockquote><pre>
integral_constant&lt;remove_cv&lt;decltype(<i>TS</i>::value)&gt;::type, <i>TS</i>::value&gt;
</pre></blockquote>
<p>
<ins>-?- In addition to being available via inclusion of the <tt>&lt;tuple&gt;</tt> header, each of the three templates are
available when any of the headers <tt>&lt;array&gt;</tt> or <tt>&lt;utility&gt;</tt> are included.</ins>
</p>
</blockquote></blockquote>

<blockquote><pre>
template &lt;size_t I, class T&gt; class tuple_element&lt;I, const T&gt;;
template &lt;size_t I, class T&gt; class tuple_element&lt;I, volatile T&gt;;
template &lt;size_t I, class T&gt; class tuple_element&lt;I, const volatile T&gt;;
</pre><blockquote>
<p>
<ins>-?-</ins> Let <tt><i>TE</i></tt> denote <tt>tuple_element&lt;I, T&gt;</tt> of the <i>cv</i>-unqualified type <tt>T</tt>. 
Then each of the three templates shall meet the <tt>TransformationTrait</tt> requirements (20.10.1) with a member typedef 
<tt>type</tt> that names the following type:
</p>
<ul>
<li><p>
for the first specialization, <tt>add_const&lt;<i>TE</i>::type&gt;::type</tt>,
</p></li>
<li><p>
for the second specialization, <tt>add_volatile&lt;<i>TE</i>::type&gt;::type</tt>, and
</p></li>
<li><p>
for the third specialization, <tt>add_cv&lt;<i>TE</i>::type&gt;::type</tt>.
</p></li>
</ul>
<p>
<ins>-?- In addition to being available via inclusion of the <tt>&lt;tuple&gt;</tt> header, each of the three templates are
available when any of the headers <tt>&lt;array&gt;</tt> or <tt>&lt;utility&gt;</tt> are included.</ins>
</p>
</blockquote></blockquote>
</li>
</ol>

</resolution>

</issue>
