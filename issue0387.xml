<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="387" status="CD1">
<title><tt>std::complex</tt> over-encapsulated</title>
<section><sref ref="[complex.numbers]"/></section>
<submitter>Gabriel Dos Reis</submitter>
<date>8 Nov 2002</date>

<discussion>
<p>
The absence of explicit description of <tt>std::complex&lt;T&gt;</tt> layout
makes it imposible to reuse existing software developed in traditional
languages like Fortran or C with unambigous and commonly accepted
layout assumptions.  There ought to be a way for practitioners to
predict with confidence the layout of <tt>std::complex&lt;T&gt;</tt> whenever <tt>T</tt>
is a numerical datatype.  The absence of ways to access individual
parts of a <tt>std::complex&lt;T&gt;</tt> object as lvalues unduly promotes
severe pessimizations. For example, the only way to change,
independently, the real and imaginary parts is to write something like
</p>

<pre>
complex&lt;T&gt; z;
// ...
// set the real part to r
z = complex&lt;T&gt;(r, z.imag());
// ...
// set the imaginary part to i
z = complex&lt;T&gt;(z.real(), i);
</pre>

<p>
At this point, it seems appropriate to recall that a complex number
is, in effect, just a pair of numbers with no particular invariant to
maintain.  Existing practice in numerical computations has it that a
complex number datatype is usually represented by Cartesian
coordinates. Therefore the over-encapsulation put in the specification
of <tt>std::complex&lt;&gt;</tt> is not justified.
</p>

</discussion>

<resolution>
<p>Add the following requirements to <sref ref="[complex.numbers]"/> as 26.3/4:</p>
<blockquote>
<p>If <tt>z</tt> is an lvalue expression of type <i>cv</i> <tt>std::complex&lt;T&gt;</tt> then</p>

<ul>
<li>the expression <tt>reinterpret_cast&lt;cv T(&amp;)[2]&gt;(z)</tt>
is well-formed; and</li>
<li><tt>reinterpret_cast&lt;cv T(&amp;)[2]&gt;(z)[0]</tt> designates the
real part of <tt>z</tt>; and</li>
<li><tt>reinterpret_cast&lt;cv T(&amp;)[2]&gt;(z)[1]</tt> designates the
imaginary part of <tt>z</tt>.</li>
</ul>

<p>
Moreover, if <tt>a</tt> is an expression of pointer type <i>cv</i> <tt>complex&lt;T&gt;*</tt>
and the expression <tt>a[i]</tt> is well-defined for an integer expression
<tt>i</tt> then:
</p>

<ul>
<li><tt>reinterpret_cast&lt;cv T*&gt;(a)[2*i]</tt> designates the real
part of <tt>a[i]</tt>; and</li>
<li><tt>reinterpret_cast&lt;cv T*&gt;(a)[2*i+1]</tt> designates the
imaginary part of <tt>a[i]</tt>.</li>
</ul>
</blockquote>

<p>
In <sref ref="[complex]"/> and <sref ref="[complex.special]"/> add the following member functions
(changing <tt>T</tt> to concrete types as appropriate for the specializations).
</p>

<blockquote><pre>
void real(T);
void imag(T);
</pre></blockquote>

<p>
Add to <sref ref="[complex.members]"/>
</p>

<blockquote>
<pre>
T real() const;
</pre>
<blockquote><p>
<i>Returns:</i> the value of the real component
</p></blockquote>
<pre>
void real(T val);
</pre>
<blockquote><p>
Assigns <tt>val</tt> to the real component.
</p></blockquote>
<pre>
T imag() const;
</pre>
<blockquote><p>
<i>Returns:</i> the value of the imaginary component
</p></blockquote>
<pre>
void imag(T val);
</pre>
<blockquote><p>
Assigns <tt>val</tt> to the imaginary component.
</p></blockquote>
</blockquote>

<note>Kona: The layout guarantee is absolutely necessary for C
  compatibility.  However, there was disagreement about the other part
  of this proposal: retrieving elements of the complex number as
  lvalues.  An alternative: continue to have <tt>real()</tt> and <tt>imag()</tt> return
  rvalues, but add <tt>set_real()</tt> and <tt>set_imag()</tt>.  Straw poll: return
  lvalues - 2, add setter functions - 5.  Related issue: do we want
  reinterpret_cast as the interface for converting a complex to an
  array of two reals, or do we want to provide a more explicit way of
  doing it?  Howard will try to resolve this issue for the next
  meeting.</note>

<note>pre-Sydney: Howard summarized the options in n1589.</note>

<note>
Bellevue:
</note>

<blockquote><p>
Second half of proposed wording replaced and moved to Ready.
</p></blockquote>

<note>
Pre-Sophia Antipolis, Howard adds:
</note>

<blockquote><p>
Added the members to <sref ref="[complex.special]"/> and changed from Ready to Review.
</p></blockquote>

<note>
Post-Sophia Antipolis:
</note>

<blockquote><p>
Moved from WP back to Ready so that the "and <sref ref="[complex.special]"/>" in the proposed
resolution can be officially applied.
</p></blockquote>

</resolution>

<rationale>
<p>The LWG believes that C99 compatibility would be enough
justification for this change even without other considerations.  All
existing implementations already have the layout proposed here.</p>
</rationale>

</issue>
