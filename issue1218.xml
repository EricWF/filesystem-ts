<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1218" status="WP">
<title>mutex destructor synchronization</title>
<section><sref ref="[thread.mutex.requirements]"/></section>
<submitter>Jeffrey Yasskin</submitter>
<date>30 Sep 2009</date>

<discussion>
<p>
If an object <tt>*o</tt> contains a mutex <tt>mu</tt> and a
correctly-maintained reference count <tt>c</tt>, is the following code
safe?
</p>

<blockquote><pre>
o-&gt;mu.lock();
bool del = (--(o-&gt;c) == 0);
o-&gt;mu.unlock();
if (del) { delete o; }
</pre></blockquote>

<p>
If the implementation of <tt>mutex::unlock()</tt> can touch the mutex's
memory after the moment it becomes free, this wouldn't be safe, and
"Construction and destruction of an object of a Mutex type need not be
thread-safe" <sref ref="[thread.mutex.requirements]"/> may imply that
it's not safe. Still, it's useful to allow mutexes to guard reference
counts, and if it's not allowed, users are likely to write bugs.
</p>

<note>
2009-11-18: Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<ul>
<li>
<p>
Add a new paragraph after <sref ref="[thread.mutex.class]"/> p1:
</p>
<blockquote>
<p>
1 The class <tt>mutex</tt> provides a non-recursive mutex ...
</p>
<p><ins>
[<i>Note:</i> After a thread <tt>A</tt> has called <tt>unlock()</tt>, releasing
the mutex, it is possible for another thread <tt>B</tt> to lock the same mutex,
observe that it is no longer in use, unlock and destroy it, before thread
<tt>A</tt> appears to have returned from its unlock call. Implementations are
required to handle such scenarios correctly, as long as thread <tt>A</tt>
doesn't access the mutex after the unlock call returns. These cases typically
occur when a reference-counted object contains a mutex that is used to protect
the reference count. &mdash; <i>end note</i>]
</ins></p>
</blockquote>
</li>
<!-- 
<li>
<p>
Insert the following paragraph after <sref ref="[thread.condition.condvar]"/> p8
(<tt>condition_variable::notify_all</tt>) and <sref
ref="[thread.condition.condvarany]"/> p7
(<tt>condition_variable_any::notify_all</tt>):
</p>
<blockquote>
<pre>
void notify_all();
</pre>
<blockquote>
<p>
8 <i>Effects:</i>...
</p>
<p><ins>
[<i>Note:</i> A <tt>condition_variable</tt> can be destroyed immediately after
all the threads that are blocked on it are awakened. &mdash; <i>end note</i>]
</ins></p>
</blockquote>

<pre>
void notify_all();
</pre>
<blockquote>
<p>
7 <i>Effects:</i>...
</p>
<p><ins>
[<i>Note:</i> A <tt>condition_variable_any</tt> can be destroyed immediately
after all the threads that are blocked on it are awakened. &mdash; <i>end
note</i>]
</ins></p>
</blockquote>

</blockquote>
</li>
 -->
</ul>
</resolution>

</issue>
