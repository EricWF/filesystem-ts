<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2210" status="New">
<title>Missing allocator-extended constructor for allocator-aware containers</title>
<section><sref ref="[sequences]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>1 Nov 2012</date>

<discussion>

<p>
The <tt>forward_list(size_type)</tt> constructor has no allocator-extended
equivalent, preventing the following code from compiling:
</p>
<blockquote><pre>
#include &lt;forward_list&gt;
#include &lt;vector&gt;
#include &lt;scoped_allocator&gt;

using namespace std;

int main()
{
  using list = forward_list&lt;int&gt;;
  vector&lt;list, scoped_allocator_adaptor&lt;list::allocator_type&gt;&gt; v;
  v.emplace_back(1u);
}
</pre></blockquote>
<p>
The very same problem exists for all allocator-aware sequence containers.
<p/>
In addition it exists for associative containers. For example, it's possible to construct 
<tt>std::set&lt;int&gt;{0, 1, 2}</tt> but not <tt>std::set&lt;int&gt;{{0, 1, 2}, alloc}</tt>, 
and possible to construct <tt>std::set&lt;int&gt;{begin, end}</tt> but not 
<tt>std::set&lt;int&gt;{begin, end, alloc}</tt>.
<p/>
This makes the following program fail when <tt>SCOPED</tt> is defined:
</p>
<blockquote><pre>
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;scoped_allocator&gt;

#if SCOPED
using A = std::scoped_allocator_adaptor&lt;std::allocator&lt;int&gt;&gt;;
#else
using A = std::allocator&lt;int&gt;;
#endif

int main()
{
  int values[] = {0, 1, 2};
  std::vector&lt;std::set&lt;int&gt;, A&gt; v;
  v.emplace_back(std::begin(values), std::end(values));
}
</pre></blockquote>

</discussion>

<resolution>
<p>This wording is relative to N3485.</p>

<ol>
<li><p>Edit the synopsis in <sref ref="[deque.overview]"/>/2:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class T, class Allocator = allocator&lt;T&gt; &gt;
  class deque {
  public:
    [&hellip;]
    explicit deque(const Allocator&amp; = Allocator());
    explicit deque(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[deque.cons]"/>/2:</p>

<blockquote>
<pre>
explicit deque(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Constructs a <tt>deque</tt> with <tt>n</tt> default-inserted elements
<ins>using the specified allocator</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit the synopsis in <sref ref="[forwardlist.overview]"/>/3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class T, class Allocator = allocator&lt;T&gt; &gt;
  class forward_list {
  public:
    [&hellip;]
    explicit forward_list(const Allocator&amp; = Allocator());
    explicit forward_list(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[forwardlist.cons]"/>/3:</p>

<blockquote>
<pre>
explicit forward_list(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Constructs a <tt>forward_list</tt> object with <tt>n</tt> default-inserted elements
<ins>using the specified allocator</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit the synopsis in <sref ref="[list.overview]"/>/2:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class T, class Allocator = allocator&lt;T&gt; &gt;
  class list {
  public:
    [&hellip;]
    explicit list(const Allocator&amp; = Allocator());
    explicit list(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[list.cons]"/>/3:</p>

<blockquote>
<pre>
explicit list(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Constructs a <tt>list</tt> with <tt>n</tt> default-inserted elements
<ins>using the specified allocator</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit the synopsis in <sref ref="[vector.overview]"/>/2:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class T, class Allocator = allocator&lt;T&gt; &gt;
  class vector {
  public:
    [&hellip;]
    explicit vector(const Allocator&amp; = Allocator());
    explicit vector(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[vector.cons]"/>/3:</p>

<blockquote>
<pre>
explicit vector(size_type n<ins>, const Allocator&amp; = Allocator()</ins>);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Constructs a <tt>vector</tt> with <tt>n</tt> default-inserted elements
<ins>using the specified allocator</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit the synopsis in <sref ref="[vector.bool]"/>/1:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Allocator&gt; class vector&lt;bool, Allocator&gt; {
  class vector {
  public:
    [&hellip;]
    explicit vector(const Allocator&amp; = Allocator());
    <ins>explicit vector(size_type n, const Allocator&amp; = Allocator());</ins>
    <del>explicit</del> vector(size_type n, const bool&amp; value<del> = bool()</del>,
                    const Allocator&amp; = Allocator());
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>
</ol>

</resolution>

</issue>
