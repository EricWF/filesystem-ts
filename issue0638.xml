<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="638" status="CD1">
<title><tt>deque</tt> end invalidation during erase</title>
<section><sref ref="[deque.modifiers]"/></section>
<submitter>Steve LoBasso</submitter>
<date>17 Feb 2007</date>

<discussion>
<p>
The standard states at <sref ref="[deque.modifiers]"/>/4:
</p>
<blockquote><pre>
deque erase(...)
</pre>
 <p>
<i>Effects:</i> ... An erase at either end of the deque invalidates only
the iterators and the references to the erased elements.
</p>
</blockquote>
<p>
This does not state that iterators to end will be invalidated.
It needs to be amended in such a way as to account for end invalidation.
</p>
<p>
Something like:
</p>
<blockquote><p>
Any time the last element is erased, iterators to end are invalidated.
</p></blockquote>

<p>
This would handle situations like:
</p>
<blockquote><pre>
erase(begin(), end())
erase(end() - 1)
pop_back()
resize(n, ...) where n &lt; size()
pop_front() with size() == 1

</pre></blockquote>

<note>
Post Kona, Steve LoBasso notes:
</note>

<blockquote><p>
My only issue with the proposed resolution is that it might not be clear
that <tt>pop_front()</tt> [where <tt>size() == 1</tt>] can invalidate past-the-end
iterators.
</p></blockquote>

</discussion>

<resolution>
<p>
Change <sref ref="[deque.modifiers]"/>, p4:
</p>

<blockquote>
<pre>
iterator erase(const_iterator position); 
iterator erase(const_iterator first, const_iterator last);
</pre>

<blockquote>
<p>
-4- <i>Effects:</i> An erase in the middle of the <tt>deque</tt>
invalidates all the iterators and references to elements of the
<tt>deque</tt> <ins>and the past-the-end iterator</ins>. An erase at
either end of the <tt>deque</tt> invalidates only the iterators and the
references to the erased elements<ins>, except that erasing at the end
also invalidates the past-the-end iterator</ins>.
</p>
</blockquote>
</blockquote>

</resolution>

<note>
Kona (2007): Proposed wording added and moved to Review.
</note>

<note>
Bellevue:
</note>

<blockquote><p>
Note that there is existing code that relies on iterators not being
invalidated, but there are also existing implementations that do
invalidate iterators. Thus, such code is not portable in any case. There
is a <tt>pop_front()</tt> note, which should possibly be a separate issue. Mike
Spertus to evaluate and, if need be, file an issue.
</p></blockquote>

</issue>
