<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1513" status="Resolved">
<title>[FCD] 'launch' enum too restrictive</title>
<section><sref ref="[futures]"/></section>
<submitter>Switzerland</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses CH-36</b></p>
<p>
Providing only three different possible values for the enum
<tt>launch</tt> and saying that <tt>launch::any</tt> means either
<tt>launch::sync</tt> or <tt>launch::async</tt> is very restricting. This
hinders future implementors to provide clever
infrastructures that can simply by used by a call to
<tt>async(launch::any,...)</tt>. Also there is no hook for an
implementation to provide additional alternatives to <tt>launch</tt>
enumeration and no useful means to combine those (i.e.
interpret them like flags). We believe something like
<tt>async(launch::sync | launch::async, ...)</tt> should be allowed
and can become especially useful if one could say also
something like <tt>async(launch::any &amp; ~launch::sync, ....)</tt>
respectively. This flexibility might limit the features usable
in the function called through <tt>async()</tt>, but it will allow a
path to effortless profit from improved hardware/software
without complicating the programming model when just
using <tt>async(launch::any,...)</tt>
</p>
<note>
Resolution proposed by ballot comment:
</note>
<p>
Change in <sref ref="[futures.overview]"/> 'enum class launch' to allow
further implementation defined values and provide
the following bit-operators on the launch values
(<tt>operator|</tt>, <tt>operator&amp;</tt>, <tt>operator~</tt> delivering a
<tt>launch</tt> value).
<p/>
Note: a possible implementation might use an
unsigned value to represent the <tt>launch</tt> enums,
but we shouldn't limit the standard to just 32 or 64
available bits in that case and also should keep
the launch enums in their own enum namespace.
<p/>
Change [future.async] p3 according to the
changes to <tt>enum launch</tt>. change --<tt>launch::any</tt> to
"the implementation may choose any of the
policies it provides." Note: this can mean that an
implementation may restrict the called function to
take all required information by copy in case it will
be called in a different address space, or even, on
a different processor type. To ensure that a call is
either performed like <tt>launch::async</tt> or
<tt>launch::sync</tt> describe one should call
<tt>async(launch::sync|launch::async,...)</tt>
</p>

<note>
2010-11-02 Daniel comments:
</note>

<blockquote><p>
The new paper <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3113.html">n3113</a> provides concrete wording.
</p></blockquote>
</discussion>

<resolution>
<p>
Resolved by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3188.htm">n3188</a>.
</p>
</resolution>

</issue>
