<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2354" status="New">
<title>Unnecessary copying when inserting into maps with braced-init syntax</title>
<section><sref ref="[map.overview]"/>, <sref ref="[multimap.overview]"/>, <sref ref="[unord.map.overview]"/>, 
<sref ref="[unord.multimap.overview]"/></section>
<submitter>Geoffrey Romer</submitter>
<date>8 Jan 2014</date>

<discussion>
<p>
The rvalue-reference <tt>insert()</tt> members of <tt>map</tt>, <tt>multimap</tt>, <tt>unordered_map</tt>, and 
<tt>unordered_multimap</tt> are specified as function templates, where the rvalue-reference parameter type 
depends on the template parameter. 
As a consequence, these overloads cannot be invoked via braced-initializer syntax (e.g. <tt>my_map.insert({key, value})</tt>), 
because the template argument cannot be deduced from a braced-init-list. Such calls instead resolve to the 
const lvalue reference overload, which forces a non-elidable copy of the argument, despite the fact that the 
argument is an rvalue, and so should be eligible for moving and copy elision.
<p/>
This leads to sub-optimal performance for copyable values, and makes this syntax unusable with noncopyable 
values. This is particularly problematic because sources such as Josuttis's "C++ Standard Library" recommend 
this syntax as the preferred way to insert into a map in C++11.
<p/>
I think this can be fixed by adding an equivalent non-template <tt>value_type&amp;&amp;</tt> overload for each affected 
member template. Simply declaring these members in the class synopses should be sufficient; their semantics are 
already dictated by the container concepts (c.f. the corresponding lvalue-reference overloads, which have no 
additional discussion beyond being listed in the synopsis).
</p>

</discussion>

<resolution>
<p>This wording is relative to N3797.</p>

<ol>
<li><p>Change <sref ref="[map.overview]"/>, class template <tt>map</tt> synopsis, as indicated:</p>

<blockquote><pre>
[&hellip;]
pair&lt;iterator, bool&gt; insert(const value_type&amp; x);
<ins>pair&lt;iterator, bool&gt; insert(value_type&amp;&amp; x);</ins>
[&hellip;]
iterator insert(const_iterator position, const value_type&amp; x);
<ins>iterator insert(const_iterator position, value_type&amp;&amp; x);</ins>
[&hellip;]
</pre></blockquote>
</li>

<li><p>Change <sref ref="[multimap.overview]"/>, class template <tt>multimap</tt> synopsis, as indicated:</p>

<blockquote><pre>
[&hellip;]
iterator insert(const value_type&amp; x);
<ins>iterator insert(value_type&amp;&amp; x);</ins>
[&hellip;]
iterator insert(const_iterator position, const value_type&amp; x);
<ins>iterator insert(const_iterator position, value_type&amp;&amp; x);</ins>
[&hellip;]
</pre></blockquote>
</li>

<li><p>Change <sref ref="[unord.map.overview]"/>, class template <tt>unordered_map</tt> synopsis, as indicated:</p>

<blockquote><pre>
[&hellip;]
pair&lt;iterator, bool&gt; insert(const value_type&amp; obj);
<ins>pair&lt;iterator, bool&gt; insert(value_type&amp;&amp; obj);</ins>
[&hellip;]
iterator insert(const_iterator hint, const value_type&amp; obj);
<ins>iterator insert(const_iterator hint, value_type&amp;&amp; obj);</ins>
[&hellip;]
</pre></blockquote>
</li>

<li><p>Change <sref ref="[unord.multimap.overview]"/>, class template <tt>unordered_multimap</tt> synopsis, as indicated:</p>

<blockquote><pre>
[&hellip;]
iterator insert(const value_type&amp; obj);
<ins>iterator insert(value_type&amp;&amp; obj);</ins>
[&hellip;]
iterator insert(const_iterator hint, const value_type&amp; obj);
<ins>iterator insert(const_iterator hint, value_type&amp;&amp; obj);</ins>
[&hellip;]
</pre></blockquote>
</li>

</ol>
</resolution>

</issue>
