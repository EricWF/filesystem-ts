<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2209" status="Tentatively Ready">
<title><tt>assign()</tt> overspecified for sequence containers</title>
<section><sref ref="[sequences]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>31 Oct 2012</date>

<discussion>

<p>
DR <iref ref="704"/> ensures allocator-aware containers can reuse existing
elements during copy/move assignment, and sequence containers can do
the same for <tt>assign()</tt>.
<p/>
But apart from <tt>std::list</tt> (which was changed by DR <iref ref="320"/>) the sequence
containers define the Effects of <tt>assign()</tt> in terms of <tt>clear()</tt> followed
by <tt>insert</tt>.  A user-defined allocator can easily tell whether all old
elements are cleared and then new elements inserted or whether existing elements are assigned 
to, so those Effects clauses cannot be ignored via the as-if rule.
<p/>
The descriptions of the <tt>assign()</tt> members for <tt>deque</tt>, <tt>forward_list</tt> and
<tt>vector</tt> should be removed.  Their intended effects are entirely described by the 
sequence container requirements table, and the specific definitions of them are worse than 
redundant, they're contradictory (if the operations are defined in terms of <tt>erase</tt> and
<tt>insert</tt> then there's no need for elements to be assignable.)  The descriptions of 
<tt>assign()</tt> for <tt>list</tt> are correct but redundant, so should be removed too.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Edit <sref ref="[deque.cons]"/> to remove everything after paragraph 10:</p>

<blockquote>
<pre>
<del>template &lt;class InputIterator&gt;
void assign(InputIterator first, InputIterator last);</del>
</pre>
<blockquote>
<p>
<del>-11- <i>Effects</i>:</del>
</p>
<blockquote><pre>
<del>erase(begin(), end());
insert(begin(), first, last);</del>
</pre></blockquote>
</blockquote>

<pre>
<del>void assign(size_type n, const T&amp; t);</del>
</pre>
<blockquote>
<p>
<del>-12- <i>Effects</i>:</del>
</p>
<blockquote><pre>
<del>erase(begin(), end());
insert(begin(), n, t);</del>
</pre></blockquote>
</blockquote>
</blockquote>

</li>

<li><p>Edit <sref ref="[forwardlist.cons]"/> to remove everything after paragraph 10:</p>

<blockquote>
<pre>
<del>template &lt;class InputIterator&gt;
void assign(InputIterator first, InputIterator last);</del>
</pre>
<blockquote>
<p>
<del>-11- <i>Effects</i>: <tt>clear(); insert_after(before_begin(), first, last);</tt></del>
</p>
</blockquote>

<pre>
<del>void assign(size_type n, const T&amp; t);</del>
</pre>
<blockquote>
<p>
<del>-12- <i>Effects</i>: <tt>clear(); insert_after(before_begin(), n, t);</tt></del>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Edit <sref ref="[list.cons]"/> to remove everything after paragraph 10:</p>

<blockquote>
<pre>
<del>template &lt;class InputIterator&gt;
void assign(InputIterator first, InputIterator last);</del>
</pre>
<blockquote>
<p>
<del>-11- <i>Effects</i>: Replaces the contents of the list with the range <tt>[first, last)</tt>.</del>
</p>
</blockquote>

<pre>
<del>void assign(size_type n, const T&amp; t);</del>
</pre>
<blockquote>
<p>
<del>-12- <i>Effects</i>: Replaces the contents of the list with <tt>n</tt> copies of <tt>t</tt>.</del>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Edit <sref ref="[vector.cons]"/> to remove everything after paragraph 10:</p>

<blockquote>
<pre>
<del>template &lt;class InputIterator&gt;
void assign(InputIterator first, InputIterator last);</del>
</pre>
<blockquote>
<p>
<del>-11- <i>Effects</i>:</del>
</p>
<blockquote><pre>
<del>erase(begin(), end());
insert(begin(), first, last);</del>
</pre></blockquote>
</blockquote>

<pre>
<del>void assign(size_type n, const T&amp; t);</del>
</pre>
<blockquote>
<p>
<del>-12- <i>Effects</i>:</del>
</p>
<blockquote><pre>
<del>erase(begin(), end());
insert(begin(), n, t);</del>
</pre></blockquote>
</blockquote>
</blockquote>

</li>

</ol>

</resolution>

</issue>
