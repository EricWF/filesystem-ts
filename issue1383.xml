<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1383" status="Tentatively NAD Editorial">
<title>[FCD] Inconsistent defaulted move/copy members in <tt>pair</tt> and <tt>tuple</tt></title>
<section><sref ref="[pairs]"/></section>
<section><sref ref="[tuple]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-97</b></p>
<p>
<tt>pair</tt>'s class definition in N3092 <sref ref="[pairs.pair]"/>
contains "<tt>pair(const pair&amp;) = default;</tt>" and 
"<tt>pair&amp; operator=(pair&amp;&amp; p);</tt>". The latter is described by
<sref ref="[pairs.pair]"/> p.12-13.
</p>
"<tt>pair(const pair&amp;) = default;</tt>" is a user-declared explicitly defaulted
copy constructor. According to <sref ref="[class.copy]"/>/10, this inhibits 
the implicitly-declared move constructor. <tt>pair</tt> should be move constructible. 
(<sref ref="[class.copy]"/>/7 explains that "<tt>pair(pair&lt;U, V&gt;&amp;&amp; p)</tt>" 
will never be instantiated to move <tt>pair&lt;T1, T2&gt;</tt> to <tt>pair&lt;T1, T2&gt;</tt>.)<BR/>
"<tt>pair&amp; operator=(pair&amp;&amp; p);</tt>" is a user-provided move
assignment operator (according to <sref ref="[dcl.fct.def.default]"/>/4: "A 
special member function is user-provided if it is user-declared and not explicitly defaulted
on its first declaration."). According to <sref ref="[class.copy]"/>/20, this inhibits
the implicitly-declared copy assignment operator. <tt>pair</tt>
should be copy assignable, and was in C++98/03. (Again,
<sref ref="[class.copy]"/>/7 explains that "<tt>operator=(const pair&lt;U, V&gt;&amp; p)</tt>" 
will never be instantiated to copy <tt>pair&lt;T1, T2&gt;</tt> to <tt>pair&lt;T1, T2&gt;</tt>.)<BR/>
Additionally, "<tt>pair&amp; operator=(pair&amp;&amp; p);</tt>" is
unconditionally defined, whereas according to <sref ref="[class.copy]"/>/25,
defaulted copy/move assignment operators are defined as
deleted in several situations, such as when non-static data
members of reference type are present.
<p/>
If "<tt>pair(const pair&amp;) = default;</tt>" and "<tt>pair&amp; operator=(pair&amp;&amp; p);</tt>" 
were removed from <tt>pair</tt>'s class definition in <sref ref="[pairs.pair]"/> and from 
<sref ref="[pairs.pair]"/>/12-13, <tt>pair</tt> would
receive implicitly-declared copy/move constructors and
copy/move assignment operators, and <sref ref="[class.copy]"/>/25 would
apply. The implicitly-declared copy/move constructors
would be trivial when <tt>T1</tt> and <tt>T2</tt> have trivial copy/move
constructors, according to <sref ref="[class.copy]"/>/13, and similarly for the
assignment operators, according to<sref ref="[class.copy]"/>/27. Notes could
be added as a reminder that these functions would be
implicitly-declared, but such notes would not be necessary
(the Standard Library specification already assumes a
high level of familiarity with the Core Language, and
casual readers will simply assume that <tt>pair</tt> is copyable
and movable).
<p/>
Alternatively, <tt>pair</tt> could be given explicitly-defaulted
copy/move constructors and copy/move assignment
operators. This is a matter of style.
<p/>
<tt>tuple</tt> is also affected. <tt>tuple</tt>'s class definition in <sref ref="[tuple]"/> contains:
<PRE>
tuple(const tuple&amp;) = default;
tuple(tuple&amp;&amp;);
tuple&amp; operator=(const tuple&amp;);
tuple&amp; operator=(tuple&amp;&amp;);
</PRE>
They should all be removed or all be explicitly-defaulted,
to be consistent with <tt>pair</tt>. Additionally, <sref ref="[tuple.cnstr]"/>/8-9 specifies the 
behavior of an explicitly defaulted function, which is currently inconsistent with
<tt>pair</tt>.

<note>
Resolution proposed by ballot comment:
</note>
<blockquote>
Either remove "<tt>pair(const pair&amp;) = default;</tt>" and
"<tt>pair&amp; operator=(pair&amp;&amp; p);</tt>" from <tt>pair</tt>'s class
definition in  <sref ref="[pairs.pair]"/> and from  <sref ref="[pairs.pair]"/> p.12-13, or
give pair explicitly-defaulted copy/move constructors and copy/move assignment operators.<BR/>
Change <tt>tuple</tt> to match.
</blockquote>

<note>
2010-10-24 Daniel adds:
</note>

<blockquote>
Accepting <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3140.html">n3140</a> would solve this issue:
The move/copy constructor will be defaulted, but the corresponding assignment operators need a non-default implementation
because they are supposed to work for references as well.
</blockquote>

</discussion>

<resolution>
See <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3140.html">n3140</a>.
</resolution>

</issue>
