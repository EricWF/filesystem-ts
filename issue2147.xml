<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2147" status="Ready">
<title>Unclear hint type in <tt>Allocator</tt>'s <tt>allocate</tt> function</title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>5 Mar 2012</date>

<discussion>

<p>
According to Table 28 &mdash; "Allocator requirements", the expression
</p>
<blockquote><pre>
a.allocate(n, u)
</pre></blockquote>
<p>
expects as second argument a value <tt>u</tt> that is described in Table 27 as:
</p>
<blockquote><p>
a value of type <tt>YY::const_pointer</tt> obtained by calling <tt>YY::allocate</tt>, or else <tt>nullptr</tt>.
</p></blockquote>
<p>
This description leaves it open, whether or whether not a value of type <tt>YY::const_void_pointer</tt> is
valid or not. The corresponding wording in C++03 is nearly the same, but in C++03 there did not exist the concept of
a general <tt>void_pointer</tt> for allocators. There is some evidence for support of void pointers because
the general <tt>allocator_traits</tt> template declares
</p>
<blockquote><pre>
static pointer allocate(Alloc&amp; a, size_type n, const_void_pointer hint);
</pre></blockquote>
<p>
and the corresponding function for <tt>std::allocator&lt;T&gt;</tt> is declared as: 
</p>
<blockquote><pre>
pointer allocate(size_type, allocator&lt;void&gt;::const_pointer hint = 0);
</pre></blockquote>
<p>
As an additional minor wording glitch (especially when comparing with the <tt>NullablePointer</tt> requirements imposed on
<tt>const_pointer</tt> and <tt>const_void_pointer</tt>), the wording seems to exclude lvalues of type
<tt>std::nullptr_t</tt>, which looks like an unwanted artifact to me.
</p>

<note>
2012-10 Portland: Move to Ready 
</note>

<p>
No strong feeling that this is a big issue, but consensus that the proposed resolution is strictly
better than the current wording, so move to Ready.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<ol>
<li><p>Change Table 27 &mdash; "Descriptive variable definitions" in <sref ref="[allocator.requirements]"/>:</p>

<table border="1">
<caption>Table 27 &mdash; Descriptive variable definitions</caption>
<tr>
<th>Variable</th>
<th>Definition</th>
</tr> 

<tr>
<td>
<tt>u</tt>
</td>
<td>
a value of type <del><tt>YY::const_pointer</tt> obtained by calling <tt>YY::allocate</tt>, or else 
<tt>nullptr</tt></del><ins><tt>XX::const_void_pointer</tt> obtained by conversion from a result 
value of <tt>YY::allocate</tt>, or else a value of type (possibly const) <tt>std::nullptr_t</tt></ins>.
</td>
</tr>

</table>

</li>
</ol>

</resolution>

</issue>
