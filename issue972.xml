<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="972" status="NAD Editorial">
<title>The term "Assignable" undefined but still in use</title>
<section><sref ref="[library]"/></section>
<submitter>Niels Dekker</submitter>
<date>7 Jan 2009</date>

<discussion>
<p>
Previous versions of the Draft had a table, defining the Assignable 
requirement.  For example 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2134.pdf">N2134</a>
Table 79, "Assignable requirements". But I guess the term "Assignable" 
is outdated by now, because the current Committee Draft provides 
<tt>MoveAssignable</tt>, <tt>CopyAssignable</tt>, and <tt>TriviallyCopyAssignable</tt> concepts 
instead. And as far as I can see, it no longer has a definition of 
<tt>Assignable</tt>. (Please correct me if I'm wrong.) Still the word 
"Assignable" is used in eight places in the Draft, 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2800.pdf">N2800</a>.
</p>

<p>
Are all of those instances of "<tt>Assignable</tt>" to be replaced by "<tt>CopyAssignable</tt>"? 
</p>

<note>
Batavia (2009-05):
</note>
<blockquote>
Move to NAD Editorial.
</blockquote>
</discussion>

<resolution>

<p>
Change Exception Propagation <sref ref="[propagation]"/>:
</p>
<blockquote>
<tt>exception_ptr</tt> shall be <tt>DefaultConstructible</tt>, <tt>CopyConstructible</tt>,
<tt><ins>Copy</ins>Assignable</tt> and <tt>EqualityComparable</tt>.
</blockquote>

<p>
Change Class template reference_wrapper <sref ref="[refwrap]"/>:
</p>
<blockquote>
<tt>reference_wrapper&lt;T&gt;</tt> is a <tt>CopyConstructible</tt> and <tt><ins>Copy</ins>Assignable</tt> wrapper around a reference to an object of type <tt>T</tt>.
</blockquote>
<p>
Change Placeholders <sref ref="[func.bind.place]"/>:
</p>
<blockquote>
It is implementation defined whether placeholder types are <tt><ins>Copy</ins>Assignable</tt>. <tt><ins>Copy</ins>Assignable</tt> placeholders' copy assignment operators shall not throw exceptions.
</blockquote>
<p>
Change Class template shared_ptr <sref ref="[util.smartptr.shared]"/>:
</p>
<blockquote>
Specializations of <tt>shared_ptr</tt> shall be <tt>CopyConstructible</tt>, <tt><ins>Copy</ins>Assignable</tt>, and <tt>LessThanComparable</tt>...
</blockquote>
<p>
Change Class template weak_ptr <sref ref="[util.smartptr.weak]"/>:
</p>
<blockquote>
Specializations of <tt>weak_ptr</tt> shall be <tt>CopyConstructible</tt>, <tt><ins>Copy</ins>Assignable</tt>, and <tt>LessThanComparable</tt>...
</blockquote>
<p>
Change traits typedefs <sref ref="[char.traits.typedefs]"/> (note: including deletion of reference to 23.1!):
</p>
<blockquote>
<i>Requires:</i> <tt>state_type</tt> shall meet the requirements of <tt><ins>Copy</ins>Assignable</tt><del> (23.1)</del>, <tt>CopyConstructible</tt> (20.1.8), and <tt>DefaultConstructible</tt> types.
</blockquote>
<p>
Change Class seed_seq <sref ref="[rand.util.seedseq]"/> (note again: including deletion of reference to 23.1!):
</p>
<blockquote>
In addition to the requirements set forth below, instances of
<tt>seed_seq</tt> shall meet the requirements of <tt>CopyConstructible</tt> (20.1.8) and of <tt><ins>Copy</ins>Assignable</tt><del> (23.1)</del>.
</blockquote>

<p>
Note: The proposed resolution of this issue does not deal with the
instance of the term "Assignable" in <sref ref="[auto.ptr]"/>, as this is dealt
with more specifically by LWG <iref ref="973"/>, "<tt>auto_ptr</tt> characteristics", submitted
by Maarten Hilferink.
</p>

</resolution>

</issue>
