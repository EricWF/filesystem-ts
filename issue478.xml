<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="478" status="CD1">
<title>Should forward iterator requirements table have a line for r->m?</title>
<section><sref ref="[forward.iterators]"/></section>
<submitter>Dave Abrahams</submitter>
<date>11 Jul 2004</date>

<discussion>
<p>
The Forward Iterator requirements table contains the following:
</p>
<pre>
 expression  return type         operational  precondition
                                  semantics
  ==========  ==================  ===========  ==========================
  a->m        U&amp; if X is mutable, (*a).m       pre: (*a).m is well-defined.
              otherwise const U&amp;

  r->m        U&amp;                  (*r).m       pre: (*r).m is well-defined.
</pre>

<p>The second line may be unnecessary.  Paragraph 11 of
  [lib.iterator.requirements] says:
</p>

<blockquote><p>
   In the following sections, a and b denote values of type const X, n
   denotes a value of the difference type Distance, u, tmp, and m
   denote identifiers, r denotes a value of X&amp;, t denotes a value of
   value type T, o denotes a value of some type that is writable to
   the output iterator.
</p></blockquote>

<p>
Because operators can be overloaded on an iterator's const-ness, the
current requirements allow iterators to make many of the operations
specified using the identifiers a and b invalid for non-const
iterators.</p>

<p>Related issue: <iref ref="477"/></p>
</discussion>

<resolution>

<p>Remove the "r->m" line from the Forward Iterator requirements
table. Change</p>
<blockquote><p>
    "const X"
</p></blockquote>

<p> to </p>

<blockquote><p>
    "X or const X" 
</p></blockquote>

<p>in paragraph 11 of [lib.iterator.requirements].</p>


</resolution>

<rationale>
<p>
This is a defect because it constrains an lvalue to returning a modifiable lvalue.
</p>
</rationale>

</issue>
