<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1135" status="NAD Editorial">
<title><tt>exception_ptr</tt> should support contextual conversion to <tt>bool</tt></title>
<section><sref ref="[propagation]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>6 Jun 2007</date>

<discussion>
<p>
As of
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2857.pdf">N2857</a>
<sref ref="[propagation]"/>/5, the implementation-defined type
<tt>exception_ptr</tt> does provide the following ways to check whether
it is a null value:
</p>
<blockquote><pre>
void f(std::exception_ptr p) {
  p == nullptr;
  p == 0;
  p == exception_ptr();
}
</pre></blockquote>
<p>
This is rather cumbersome way of checking for the null value
and I suggest to require support for evaluation in a boolean
context like so:
</p>

<blockquote><pre>
void g(std::exception_ptr p) {
  if (p) {}
  !p;
}
</pre></blockquote>

<note>
2009 Santa Cruz:
</note>

<blockquote>
Move to Ready. Note to editor: considering putting in a cross-reference
to <sref ref="[conv]"/>, paragraph 3, which defines the phrase
"contextually converted to <tt>bool</tt>".
</blockquote>

<note>
2010-03-14 Howard adds:
</note>

<blockquote>
We moved
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3073.html">N3073</a>
to the formal motions page in Pittsburgh which should obsolete this issue.  I've
moved this issue to NAD Editorial, solved by N3073.
</blockquote>

</discussion>

<rationale>
<p>
Solved by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3073.html">N3073</a>.
</p>
</rationale>

<resolution>
<p>
In section <sref ref="[propagation]"/> insert a new paragraph between p.5 and p.6:
</p>

<blockquote>
<ins>
An object <tt>e</tt> of type <tt>exception_ptr</tt> can be contextually converted to <tt>bool</tt>.
The effect shall be as if <tt>e != exception_ptr()</tt> had been evaluated in place
of <tt>e</tt>. There shall be no implicit conversion to arithmetic type, to
enumeration type or to pointer type.
</ins>
</blockquote>
</resolution>

</issue>
