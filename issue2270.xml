<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2270" status="NAD">
<title>Inconsistent <tt>to_string</tt> overloads</title>
<section><sref ref="[string.conversions]"/></section>
<submitter>Raf Schietekat</submitter>
<date>2 Jul 2013</date>

<discussion>
<p>
For internal consistency, <tt>to_string()</tt> should either list all relevant types (including <tt>bool</tt>, <tt>char</tt>, etc.), 
or only those that are the destination types of integral or floating-point promotion (<tt>float</tt> not being among them).
<p/>
A defensible reason for having (or rather keeping) the <tt>float</tt> overloads anyway could be to exactly mirror the adjacent 
sets of <tt>stoX()</tt> function overloads (even without round-trip fidelity for floating-point numbers).
<p/>
Unfortunately, that reveals a bigger issue than redundant overloads: the glaring and indefensible omission of an overloaded 
function <tt>stoui()</tt>. Adding that is not as trivial as removing redundant overloads, of course, because it requires 
everybody to take action. Still, it is the preferable remedy for the present situation.
<p/>
As far as I can tell from easily accessible information, C++ has already created the precedent with <tt>stoi()</tt>, which 
is not the equivalent of a pair of functions <tt>strtoi()</tt>/<tt>wcstoi()</tt> in C, but it would be if such functions 
existed. The function <tt>atoi()</tt> may look similar, but it does not qualify because it is as different from a 
hypothetical <tt>strtoi()</tt> as <tt>atol()</tt> currently is from <tt>strtol()</tt>, with the latter two both Standard C. 
It is only logical to act on this one-sided precedent by completing the set. Whether or not Standard C leads the way 
(or follows suit) is immaterial, but an invitation could be extended.
</p>

<note>2013-09 Chicago</note>
<p>
These overloads were very carefully and experimentally determined to be the minimal set, when all (known) promotion and
conversion scenarios were considered.  Removing superfluous-looking overloads is likely to result in ambiguities.
</p>

</discussion>

<resolution>

<p>This wording is relative to N3691.</p>

<ol>
<li><p>Modify <sref ref="[string.classes]"/>, header <tt>&lt;string&gt;</tt> synopsis, as indicated:</p>

<blockquote><pre>
#include &lt;initializer_list&gt;

namespace std {
  [&hellip;]
  string to_string(int val);
  string to_string(unsigned val);
  string to_string(long val);
  string to_string(unsigned long val);
  string to_string(long long val);
  string to_string(unsigned long long val);
  <del>string to_string(float val);</del>
  string to_string(double val);
  string to_string(long double val);
  [&hellip;]

  [&hellip;]
  wstring to_wstring(int val);
  wstring to_wstring(unsigned val);
  wstring to_wstring(long val);
  wstring to_wstring(unsigned long val);
  wstring to_wstring(long long val);
  wstring to_wstring(unsigned long long val);
  <del>wstring to_wstring(float val);</del>
  wstring to_wstring(double val);
  wstring to_wstring(long double val);
  [&hellip;]
}
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[string.conversions]"/> p7+14 as indicated:</p>

<blockquote>
<pre>
string to_string(int val);
string to_string(unsigned val);
string to_string(long val);
string to_string(unsigned long val);
string to_string(long long val);
string to_string(unsigned long long val);
<del>string to_string(float val);</del>
string to_string(double val);
string to_string(long double val);
</pre>
<blockquote>
<p>
-7- <i>Returns:</i> Each function returns a <tt>string</tt> object holding the character representation of the value of
its argument that would be generated by calling <tt>sprintf(buf, fmt, val)</tt> with a format specifier of
<tt>"%d"</tt>, <tt>"%u"</tt>, <tt>"%ld"</tt>, <tt>"%lu"</tt>, <tt>"%lld"</tt>, <tt>"%llu"</tt>, <del><tt>"%f"</tt>,</del> 
<tt>"%f"</tt>, or <tt>"%Lf"</tt>, respectively, where <tt>buf</tt> designates an internal character buffer of sufficient size.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
wstring to_wstring(int val);
wstring to_wstring(unsigned val);
wstring to_wstring(long val);
wstring to_wstring(unsigned long val);
wstring to_wstring(long long val);
wstring to_wstring(unsigned long long val);
<del>wstring to_wstring(float val);</del>
wstring to_wstring(double val);
wstring to_wstring(long double val);
</pre>
<blockquote>
<p>
-14- <i>Returns:</i> Each function returns a <tt>wstring</tt> object holding the character representation of the value of
its argument that would be generated by calling <tt>swprintf(buf, buffsz, fmt, val)</tt> with a format specifier of
<tt>L"%d"</tt>, <tt>L"%u"</tt>, <tt>L"%ld"</tt>, <tt>L"%lu"</tt>, <tt>L"%lld"</tt>, <tt>L"%llu"</tt>, <del><tt>L"%f"</tt>,</del> 
<tt>L"%f"</tt>, or <tt>L"%Lf"</tt>, respectively, where <tt>buf</tt> designates an internal character buffer of sufficient 
size <tt>buffsz</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
