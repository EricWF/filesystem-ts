<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2020" status="New">
<title>Time utility arithmetic <tt>constexpr</tt> functions have invalid effects</title>
<section><sref ref="[time.duration.nonmember]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>06 Dec 2010</date>

<discussion>
As of issue <iref ref="1171"/> several time-utility functions have been marked <tt>constexpr</tt>.
Alas this was done without adapting the corresponding return elements, which has the effect that 
none of current arithmetic functions of class template <tt>duration</tt> marked as <tt>constexpr</tt> 
can ever be <tt>constexpr</tt> functions (which makes them ill-formed, no diagnostics required as 
of recent core rules), because they invoke a non-constant expression, e.g. <sref ref="[time.duration.nonmember]"/>/2:
<blockquote><pre>
template &lt;class Rep1, class Period1, class Rep2, class Period2>
constexpr typename common_type&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;{&gt;}::type
operator+(const duration&lt;Rep1, Period1>&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);

2 Returns: CD(lhs) += rhs.
</pre></blockquote>
The real problem is, that we cannot defer to as-if rules here: The returns element
specifies an indirect calling contract of a potentially user-defined function. This <em>cannot</em> be
the <tt>+=</tt> assignment operator of such a user-defined type, but must be the corresponding
immutable binary <tt>operator+</tt> (unless we require that <tt>+=</tt> shall be an immutable function
which does not really makes sense).
</discussion>

<resolution>
The suggested wording changes are against the working draft N3225. Additional to the normative wording
changes some editorial fixes are suggested.
<ol>
<li>
<p>Change the following arithmetic function specifications as follows:</p>
<blockquote><pre>
template &lt;class Rep1, class Period1, class Rep2, class Period2&gt;
constexpr typename common_type&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;<del>{</del>&gt;<del>}</del>::type
operator+(const duration&lt;Rep1, Period1&gt;&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);
</pre><blockquote>
2 <i>Returns</i>: <del><tt>CD(lhs) += rhs</tt></del><ins><tt>CD(CD(lhs).count() + CD(rhs).count())</tt></ins>.
</blockquote></blockquote>

<blockquote><pre>
template &lt;class Rep1, class Period1, class Rep2, class Period2&gt;
constexpr typename common_type&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;<del>{</del>&gt;<del>}</del>::type
operator-(const duration&lt;Rep1, Period1&gt;&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);
</pre><blockquote>
3 <i>Returns</i>: <del><tt>CD(lhs) -= rhs</tt></del><ins><tt>CD(CD(lhs).count() - CD(rhs).count())</tt></ins>.
</blockquote></blockquote>

<blockquote><pre>
template &lt;class Rep1, class Period, class Rep2&gt;
constexpr duration&lt;typename common_type&lt;Rep1, Rep2&gt;::type, Period&gt;
operator*(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre><blockquote>
4 <i>Remarks</i>: This operator shall not participate in overload resolution unless <tt>Rep2</tt> is implicitly convertible
to <tt>CR(Rep1, Rep2)</tt>.
<p/>
5 <i>Returns</i>: <del><tt>duration&lt;CR(Rep1, Rep2), Period&gt;(d) *= s</tt></del><ins><tt>CD(CD(d).count() * s)</tt></ins>.
</blockquote></blockquote>

<p><blockquote>
<tt>[...]</tt>
</blockquote></p>

<blockquote><pre>
template &lt;class Rep1, class Period, class Rep2&gt;
constexpr duration&lt;typename common_type&lt;Rep1, Rep2&gt;::type, Period&gt;
operator/(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre><blockquote>
8 <i>Remarks</i>: This operator shall not participate in overload resolution unless <tt>Rep2</tt> is implicitly convertible
to <tt>CR(Rep1, Rep2)</tt> and <tt>Rep2</tt> is not an instantiation of <tt>duration</tt>.
<p/>
9 <i>Returns</i>: <del><tt>duration&lt;CR(Rep1, Rep2), Period&gt;(d) /= s</tt></del><ins><tt>CD(CD(d).count() / s)</tt></ins>.
</blockquote></blockquote>

<p><blockquote>
<tt>[...]</tt>
</blockquote></p>

<blockquote><pre>
template &lt;class Rep1, class Period, class Rep2&gt;
constexpr duration&lt;typename common_type&lt;Rep1, Rep2&gt;::type, Period&gt;
operator%(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre><blockquote>
11 <i>Remarks</i>: This operator shall not participate in overload resolution unless <tt>Rep2</tt> is implicitly convertible
to <tt>CR(Rep1, Rep2)</tt> and <tt>Rep2</tt> is not an instantiation of <tt>duration</tt>.
<p/>
12 <i>Returns</i>: <del><tt>duration&lt;CR(Rep1, Rep2), Period&gt;(d) %= s</tt></del><ins><tt>CD(CD(d).count() % s)</tt></ins>
</blockquote></blockquote>

<blockquote><pre>
template &lt;class Rep1, class Period1, class Rep2, class Period2&gt;
constexpr typename common_type&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;&gt;::type
operator%(const duration&lt;Rep1, Period1&gt;&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);
</pre><blockquote>
13 Returns: <del><tt>common_type&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt; &gt;::type(lhs) 
 %= rhs</tt></del><ins><tt>CD(CD(lhs).count() % CD(rhs).count())</tt></ins>.
</blockquote></blockquote>
</li>
</ol>
</resolution>

</issue>
