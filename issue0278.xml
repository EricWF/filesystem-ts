<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="278" status="CD1">
<title>What does iterator validity mean?</title>
<section><sref ref="[list.ops]"/></section>
<submitter>P.J. Plauger</submitter>
<date>27 Nov 2000</date>

<discussion>
<p>
Section <sref ref="[list.ops]"/> states that
</p>
<pre>
  void splice(iterator position, list&lt;T, Allocator&gt;&amp; x);
</pre>
<p>
<i>invalidates</i> all iterators and references to list <tt>x</tt>.
</p>

<p>
But what does the C++ Standard mean by &quot;invalidate&quot;?  You
can still dereference the iterator to a spliced list element, but
you'd better not use it to delimit a range within the original
list. For the latter operation, it has definitely lost some of its
validity.
</p>

<p>
If we accept the proposed resolution to issue <iref ref="250"/>,
then we'd better clarify that a &quot;valid&quot; iterator need no
longer designate an element within the same container as it once did.
We then have to clarify what we mean by invalidating a past-the-end
iterator, as when a vector or string grows by reallocation. Clearly,
such an iterator has a different kind of validity. Perhaps we should
introduce separate terms for the two kinds of &quot;validity.&quot;
</p>
</discussion>

<resolution>
<p>Add the following text to the end of section <sref ref="[iterator.concepts]"/>,
after paragraph 5:</p>
<blockquote><p>
An <i>invalid</i> iterator is an iterator that may be
singular. [Footnote: This definition applies to pointers, since
pointers are iterators. The effect of dereferencing an iterator that
has been invalidated is undefined.]
</p></blockquote>

<note>post-Copenhagen: Matt provided wording.</note>

<note>Redmond: General agreement with the intent, some objections to
the wording.  Dave provided new wording.</note>
</resolution>

<rationale>
<p>This resolution simply defines a term that the Standard uses but
  never defines, "invalid", in terms of a term that is defined,
  "singular".</p>

<p>Why do we say "may be singular", instead of "is singular"?  That's
  becuase a valid iterator is one that is known to be nonsingular.
  Invalidating an iterator means changing it in such a way that it's
  no longer known to be nonsingular.  An example: inserting an
  element into the middle of a vector is correctly said to invalidate
  all iterators pointing into the vector.  That doesn't necessarily
  mean they all become singular.</p>
</rationale>

</issue>
