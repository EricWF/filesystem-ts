<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="707" status="NAD">
<title>null pointer constant for <tt>exception_ptr</tt></title>
<section><sref ref="[propagation]"/></section>
<submitter>Jens Maurer</submitter>
<date>20 Jul 2007</date>

<discussion>

<p>
From the Toronto Core wiki:
</p>

<p>
What do you mean by "null pointer constant"? How do you guarantee that
<tt>exception_ptr() == 1</tt> doesn't work?  Do you even want to prevent that?
What's the semantics?  What about <tt>void *p = 0; exception_ptr() == p</tt>?
Maybe disallow those in the interface, but how do you do that with
portable C++? Could specify just "make it work".
</p>

<p>
Peter's response:
</p>

<p>
null pointer constant as defined in <sref ref="[conv.ptr]"/>. Intent is "just make it
work", can be implemented as assignment operator taking a unique pointer
to member, as in the unspecified bool type idiom.
</p>

<note>
Bellevue:
</note>

<blockquote>
<p>
Original implementation was possible using the "unspecified-null-pointer" idiom, similar to unspecified-bool.
</p>
<p>
Even simpler now with nullptr_t.
</p>
<p>
NAD Rationale : null pointer constant is a perfectly defined term, and
while API is clearly implementable there is no need to spell out
implementation details.
</p>
</blockquote>

</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
