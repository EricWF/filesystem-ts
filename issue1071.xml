<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1071" status="C++11">
<title><tt>is_bind_expression</tt> should derive from <tt>integral_constant&lt;bool&gt;</tt></title>
<section><sref ref="[func.bind.isbind]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>19 Mar 2009</date>

<discussion>

<p>
Class template is_bind_expression <sref ref="[func.bind.isbind]"/>:
</p>

<blockquote><pre>
namespace std {
  template&lt;class T&gt; struct is_bind_expression {
    static const bool value = see below;
  };
}
</pre></blockquote>
<p>
<tt>is_bind_expression</tt> should derive from <tt>std::integral_constant&lt;bool&gt;</tt> like
other similar trait types.
</p>

<note>
Daniel adds:
</note>
<blockquote><p>
We need the same thing for the trait <tt>is_placeholder</tt> as well.
</p></blockquote>
<note>
2009-03-22 Daniel provided wording.
</note>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
We recommend this be deferred until after the next Committee Draft is issued.
</p>
<p>
Move to Open.
</p>
</blockquote>

<note>
2009-05-31 Peter adds:
</note>

<blockquote>
<p>
I am opposed to the proposed resolution and to the premise of the issue
in general. The traits's default definitions should NOT derive from
<tt>integral_constant</tt>, because this is harmful, as it misleads people into
thinking that <tt>is_bind_expression&lt;E&gt;</tt> always derives from
<tt>integral_constant</tt>, whereas it may not.
</p>
<p>
<tt>is_bind_expression</tt> and <tt>is_placeholder</tt> allow user
specializations, and in fact, this is their primary purpose. Such user
specializations may not derive from <tt>integral_constant</tt>, and the
places where <tt>is_bind_expression</tt> and <tt>is_placeholder</tt> are
used intentionally do not require such derivation.
</p>
<p>
The long-term approach here is to switch to
<tt>BindExpression&lt;E&gt;</tt> and <tt>Placeholder&lt;P&gt;</tt>
explicit concepts, of course, but until that happens, I say leave them
alone.
</p>
</blockquote>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Move to Tentatively Ready.  We are comfortable with requiring user specializations
to derive from <tt>integral_constant</tt>.
</p></blockquote>

</discussion>

<resolution>
<ol>
<li>
<p>
In <sref ref="[func.bind.isbind]"/> change as indicated:
</p>
<blockquote><pre>
namespace std {
 template&lt;class T&gt; struct is_bind_expression <ins>: integral_constant&lt;bool, <i>see below</i>&gt; { };</ins><del>{
   static const bool value = <i>see below</i>;
 };</del>
}
</pre></blockquote>
</li>
<li>
<p>
In <sref ref="[func.bind.isbind]"/>/2 change as indicated:
</p>
<blockquote><pre>
<del>static const bool value;</del>
</pre>
<blockquote><p>
-2- <del><tt>true</tt> if <tt>T</tt> is a type returned from <tt>bind</tt>, <tt>false</tt> otherwise.</del>
  <ins>If <tt>T</tt> is a type returned from <tt>bind</tt>, <tt>is_bind_expression&lt;T&gt;</tt> shall
be publicly derived from
        <tt>integral_constant&lt;bool, true&gt;</tt>, otherwise it shall be
publicly derived from
          <tt>integral_constant&lt;bool, false&gt;</tt>.</ins>
</p></blockquote>
</blockquote>
</li>
<li>
<p>
In <sref ref="[func.bind.isplace]"/> change as indicated:
</p>
<blockquote><pre>
namespace std {
 template&lt;class T&gt; struct is_placeholder <ins>: integral_constant&lt;int, <i>see below</i>&gt; { };</ins><del>{
   static const int value = <i>see below</i>;
 };</del>
}
</pre></blockquote>
</li>
<li>
<p>
In <sref ref="[func.bind.isplace]"/>/2 change as indicated:
</p>
<blockquote><pre>
<del>static const int value;</del>
</pre>
<blockquote><p>
-2- <del>value is <tt>J</tt> if <tt>T</tt> is the type of <tt>std::placeholders::_J</tt>, 0 otherwise.</del>
  <ins>If <tt>T</tt> is the type of <tt>std::placeholders::_J</tt>, <tt>is_placeholder&lt;T&gt;</tt>
shall be publicly
          derived from <tt>integral_constant&lt;int, J&gt;</tt> otherwise it shall
be publicly derived
          from <tt>integral_constant&lt;int, 0&gt;</tt>.</ins>
</p></blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
