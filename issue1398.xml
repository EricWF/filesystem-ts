<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1398" status="NAD">
<title>Users should be able to specialize functors without depending on whole <tt>&lt;functional&gt;</tt> header</title>
<section><sref ref="[function.objects]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-96</b></p>
<p>
The function templates <tt>hash</tt>, <tt>less</tt> and <tt>equal_to</tt>
are important customization points for user-defined types to
be supported by several standard containers. These are
accessed through the <tt>&lt;functional&gt;</tt> header which has
grown significantly larger in C++0x, exposing many more
facilities than a user is likely to need through there own
header, simply to declare the necessary specialization.
There should be a smaller header available for users to
make the necessary customization.
</p>

<note>
Resolution proposed by ballot comment
</note>
<p>
Provide a tiny forwarding header for important
functor types in the <tt>&lt;functional&gt;</tt> header that a
user may want to specialize. This should contain
the template declaration for <tt>equal_to</tt>, <tt>hash</tt> and
<tt>less</tt>.
</p>

<note>
Rapperswill summary
</note>
<p>Alisdair: Would recommend NAD unless someone takes the issue. </p>

<p>Daniel: Volunteers to write a paper for this. </p>

<note>
2010-11-07 Daniel provides a paper available on the Batavia document list
</note>

<note>
2010 Batavia:
</note>
<p>
Closed as NAD - the consensus was that forwarding headers such as
<tt>&lt;iosfwd&gt;</tt> do not bring the expected benefits, and are
not widely used (to the surprise of some active users in the room!).
Without real experience reporting a benefit, there is no further interest
in pursuing this issue as an extension - hence NAD rather than NAD Future.
</p>

</discussion>

<rationale><p>No consensus to make a change</p></rationale>

<resolution>
<p>
See paper &quot;Forwarding <tt>&lt;functional&gt;</tt> functor templates&quot;
on the Batavia LWG document list
</p>
</resolution>

</issue>
