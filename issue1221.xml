<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1221" status="WP">
<title><tt>condition_variable</tt> wording</title>
<section><sref ref="[thread.condition.condvar]"/></section>
<submitter>Jeffrey Yasskin</submitter>
<date>30 Sep 2009</date>

<discussion>
<p>
<sref ref="[thread.condition.condvar]"/> says:
</p>

<blockquote>
<pre>
~condition_variable();
</pre>
<blockquote><p>
<i>Precondition:</i> There shall be no thread blocked on <tt>*this</tt>.
[<i>Note:</i> That is, all threads shall have been notified; they may
subsequently block on the lock specified in the wait. Beware that
destroying a <tt>condition_variable</tt> object while the corresponding
predicate is <tt>false</tt> is likely to lead to undefined behavior.
&mdash; <i>end note</i>]
</p></blockquote>
</blockquote>

<p>
The text hasn't introduced the notion of a "corresponding predicate"
yet.
</p>

<note>
2010-02-11 Anthony provided wording.
</note>

<note>
2010-02-12 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<resolution>
<p>
Modify <sref ref="[thread.condition.condvar]"/>p4 as follows:
</p>

<blockquote>
<pre>~condition_variable();</pre>
<blockquote><p>
4 <i>Precondition:</i> There shall be no thread blocked on <tt>*this</tt>.
[<i>Note:</i> That is, all threads shall have been notified; they may
subsequently block on the lock specified in the wait. <del>Beware that
destroying a <tt>condition_variable</tt> object while the corresponding
predicate is false is likely to lead to undefined behavior.</del> <ins>The user
must take care to ensure that no threads wait on <tt>*this</tt> once the
destructor has been started, especially when the waiting threads are calling the
wait functions in a loop or using the overloads of <tt>wait</tt>,
<tt>wait_for</tt> or <tt>wait_until</tt> that take a predicate.</ins> &mdash;
<i>end note</i>]
</p></blockquote>
</blockquote>
</resolution>

</issue>
