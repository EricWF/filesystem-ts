<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="697" status="NAD Editorial">
<title>New <tt>&lt;system_error&gt;</tt> header leads to name clashes</title>
<section><sref ref="[syserr]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>24 Jun 2007</date>

<discussion>
<p>
The most recent state of 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2241.html">N2241</a>
as well as the current draft
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2284.pdf">N2284</a>
(section <sref ref="[syserr]"/>, p.2) proposes a
new
enumeration type <tt>posix_errno</tt> immediatly in the namespace <tt>std</tt>. One of
the enumerators has the name <tt>invalid_argument</tt>, or fully qualified:
<tt>std::invalid_argument</tt>. This name clashes with the exception type
<tt>std::invalid_argument</tt>, see <sref ref="[std.exceptions]"/>/p.3. This clash makes
e.g. the following snippet invalid:
</p>

<blockquote><pre>
#include &lt;system_error&gt;
#include &lt;stdexcept&gt;

void foo() { throw std::invalid_argument("Don't call us - we call you!"); }
</pre></blockquote>

<p>
I propose that this enumeration type (and probably the remaining parts
of
<tt>&lt;system_error&gt;</tt> as well) should be moved into one additional inner
namespace, e.g. <tt>sys</tt> or <tt>system</tt> to reduce foreseeable future clashes
due
to the great number of members that <tt>std::posix_errno</tt> already contains
(Btw.: Why has the already proposed <tt>std::sys</tt> sub-namespace from
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2066.html">N2066</a>
been rejected?). A further clash <em>candidate</em> seems to be
<tt>std::protocol_error</tt>
(a reasonable name for an exception related to a std network library,
I guess).
</p>

<p>
Another possible resolution would rely on the proposed strongly typed
enums,
as described in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2213.pdf">N2213</a>.
But maybe the forbidden implicit conversion to integral types would
make
these enumerators less attractive in this special case?
</p>
</discussion>

<resolution>
<p>
Fixed by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2422.htm#Issue7">issue 7 of N2422</a>.
</p>
</resolution>

</issue>

