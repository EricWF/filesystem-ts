<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1273" status="Resolved">
<title><tt>future::valid</tt> should be callable on an invalid future</title>
<section><sref ref="[futures.unique_future]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>22 Nov 2009</date>

<discussion>
<p>
<sref ref="[futures.unique_future]"/>/3 says:
</p>

<blockquote><p>
The effect of calling any member function other than the destructor or
the move-assignment operator on a <tt>future</tt> object for which 
<tt>valid() == false</tt> is undefined.
</p></blockquote>

<p>
This means calling <tt>future::valid()</tt> is undefined unless it will
return <tt>true</tt>, so you can only use it if you know the answer!
</p>

<note>
2009-12-08 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

<note>
2010 Pittsburgh:
</note>

<blockquote><p>
Moved to <del>NAD Editorial</del><ins>Resolved</ins>.  Rationale added below.
</p></blockquote>

</discussion>

<rationale>
<p>
Solved by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3058.html">N3058</a>.
</p>
</rationale>

<resolution>
<p>
Change <sref ref="[futures.unique_future]"/>/3:
</p>

<blockquote><p>
The effect of calling any member function other than the
destructor<ins>,</ins> or the move-assignment operator<ins>, or
<tt>valid</tt>,</ins> on a <tt>future</tt> object for which <tt>valid()
== false</tt> is undefined.
</p></blockquote>

</resolution>

</issue>
