<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1114" status="C++11">
<title>Type traits underspecified</title>
<section><sref ref="[meta]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>12 May 2009</date>

<discussion>

<p>
Related to <iref ref="975"/> and <iref ref="1023"/>.
</p>

<p>
The current wording in <sref ref="[meta.rqmts]"/> is still unclear concerning
it's requirements on the type traits classes regarding ambiguities.
Specifically it's unclear
</p>

<ul>
<li>
if a predicate trait (<sref ref="[meta.unary]"/>, <sref
ref="[meta.rel]"/>) could derive from both
<tt>true_type</tt>&#47;<tt>false_type</tt>.
</li>
<li>
if any of the type traits (<sref ref="[meta.rqmts]"/>, <sref
ref="[meta.unary]"/>, <sref ref="[meta.rel]"/>) could ambiguously derive
from the same specified result type.
</li>
<li>
if any of the type traits (<sref ref="[meta.rqmts]"/>, <sref
ref="[meta.unary]"/>, <sref ref="[meta.rel]"/>) could derive from other
<tt>integral_constant</tt> types making the contained names ambiguous
</li>
<li>
if any of the type traits (<sref ref="[meta.rqmts]"/>, <sref
ref="[meta.unary]"/>, <sref ref="[meta.rel]"/>) could have other base
classes that contain members hiding the name of the result type members
or make the contained member names ambiguous.
</li>
</ul>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Alisdair would prefer to factor some of the repeated text,
but modulo a corner case or two,
he believes the proposed wording is otherwise substantially correct.
</p>
<p>
Move to Open.
</p>
</blockquote>

<note>
2009-10 post-Santa Cruz:
</note>

<blockquote><p>
Move to Tentatively Ready.
</p></blockquote>

</discussion>

<resolution>
<note>
The usage of the notion of a <i>BaseCharacteristic</i> below might be
useful in other places - e.g. to define the base class relation in <sref
ref="[refwrap]"/>, <sref ref="[func.memfn]"/>, or <sref
ref="[func.wrap.func]"/>. In this case it's definition should probably
be moved to Clause 17
</note>

<ol>
<li>
<p>
Change <sref ref="[meta.rqmts]"/> p.1 as indicated:
</p>
<blockquote><p>
[..] It shall be <tt>DefaultConstructible</tt>, <tt>CopyConstructible</tt>, and publicly
<ins>and unambiguously</ins> derived, directly or indirectly, from
<ins>its <i>BaseCharacteristic</i>, which is</ins> a specialization of the
template <tt>integral_constant</tt> (20.6.3), with the arguments to the template
<tt>integral_constant</tt> determined by the requirements for the particular
property being described. <ins>The member names of the
<i>BaseCharacteristic</i> shall be unhidden and unambiguously
available in the <i>UnaryTypeTrait</i>.</ins>
</p></blockquote>
</li>
<li>
<p>
Change <sref ref="[meta.rqmts]"/> p.2 as indicated:
</p>
<blockquote><p>
[..] It shall be <tt>DefaultConstructible</tt>, <tt>CopyConstructible</tt>, and publicly
<ins>and unambiguously</ins> derived, directly or indirectly, from
<del>an instance</del> <ins>its <i>BaseCharacteristic</i>, which is a
specialization</ins> of the template <tt>integral_constant</tt> (20.6.3), with
the arguments to the template <tt>integral_constant</tt> determined by the
requirements for the particular relationship being described. <ins>The
member names of the <i>BaseCharacteristic</i> shall be unhidden
and unambiguously available in the <i>BinaryTypeTrait</i>.</ins>
</p></blockquote>
</li>
<li>
<p>
Change <sref ref="[meta.unary]"/> p.2 as indicated:
</p>
<blockquote><p>
Each of these templates shall be a <i>UnaryTypeTrait</i> (20.6.1),
<del>publicly derived directly or indirectly from <tt>true_type</tt> if the
corresponding condition is true, otherwise from <tt>false_type</tt></del>
<ins>where its <i>BaseCharacteristic</i> shall be <tt>true_type</tt> if the
corresponding condition is true, otherwise <tt>false_type</tt></ins>.
</p></blockquote>
</li>
<li>
<p>
Change <sref ref="[meta.rel]"/> p.2 as indicated:
</p>

<blockquote><p>
Each of these templates shall be a <i>BinaryTypeTrait</i> (20.6.1),
<del>publicly derived directly or indirectly from <tt>true_type</tt> if the
corresponding condition is true, otherwise from <tt>false_type</tt></del>
<ins>where its <i>BaseCharacteristic</i> shall be <tt>true_type</tt> if the
corresponding condition is true, otherwise <tt>false_type</tt></ins>.
</p></blockquote>
</li>
</ol>

</resolution>

</issue>
