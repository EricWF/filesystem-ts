<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1092" status="NAD Concepts">
<title>Class template <tt>integral_constant</tt> should be a  constrained template</title>
<section><sref ref="[meta.help]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>22 Mar 2009</date>

<discussion>
<p>
A first step to change the type traits predicates to constrained templates is to
constrain their common base template <tt>integral_constant</tt>. This can be done,
without enforcing depending classes to be constrained as well, but not
vice versa
without brute force <tt>late_check</tt> usages. The following proposed resolution depends
on the resolution of LWG issue <iref ref="1019"/>.
</p>

<note>
Batavia (2009-05):
</note>
<blockquote>
Move to Open, pending a paper that looks at constraints
for the entirety of the type traits
and their relationship to the foundation concepts.
We recommend this be deferred
until after the next Committee Draft is issued.
</blockquote>
</discussion>

<resolution>
<ol>
<li>
<p>
In <sref ref="[meta.type.synop]"/>, Header <tt>&lt;type_traits&gt;</tt>
synopsis change as indicated:
</p>
<blockquote><pre>
namespace std {
// 20.5.3, helper class:
template &lt;<del>class</del><ins>IntegralConstantExpressionType</ins> T, T v&gt; struct integral_constant;
</pre></blockquote>
</li>
<li>
<p>
In <sref ref="[meta.help]"/> change as indicated:
</p>
<blockquote><pre>
template &lt;<del>class</del><ins>IntegralConstantExpressionType</ins> T, T v&gt;
struct integral_constant {
  static constexpr T value = v;
  typedef T value_type;
  typedef integral_constant&lt;T,v&gt; type;
  constexpr operator value_type() { return value; }
};
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
