<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1466" status="Pending Resolved">
<title>[FCD] Silent <tt>const</tt> breakage by <tt>compare_exchange_*</tt> member functions</title>
<section><sref ref="[atomics.types.address]"/></section>
<submitter>INCITS</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses US-162</b></p>

The <tt>compare_exchange_weak</tt> and <tt>compare_exchange_strong</tt> member functions that take
<tt>const void*</tt> arguments lead to a silent removal of <tt>const</tt>, because the <tt>load</tt> 
member function and other acessors return the stored value as a <tt>void*</tt>.

<note>
Proposed resolution as of NB comment:
</note>

<p>
Change <sref ref="[atomics.types.address]"/>, class <tt>atomic_address</tt> synopsis, as indicated:

<blockquote><pre>
namespace std {
  typedef struct atomic_address {
    [..]
    <del>bool compare_exchange_weak(const void*&, const void*,
      memory_order, memory_order) volatile;</del>
    <del>bool compare_exchange_weak(const void*&, const void*,
      memory_order, memory_order);</del>
    <del>bool compare_exchange_strong(const void*&, const void*,
      memory_order, memory_order) volatile;</del>
    <del>bool compare_exchange_strong(const void*&, const void*,
      memory_order, memory_order);</del>
    <del>bool compare_exchange_weak(const void*&, const void*,
      memory_order = memory_order_seq_cst) volatile;</del>
    <del>bool compare_exchange_weak(const void*&, const void*,
      memory_order = memory_order_seq_cst);</del>
    <del>bool compare_exchange_strong(const void*&, const void*,
      memory_order = memory_order_seq_cst) volatile;</del>
    <del>bool compare_exchange_strong(const void*&, const void*,
      memory_order = memory_order_seq_cst);</del>
    [..]
  } atomic_address;
  [..]
}
</pre></blockquote>

</p>

<note>
2010-10-27 Daniel adds:
</note>

<blockquote>
Accepting <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3164.html">n3164</a> 
would solve this issue by replacing <tt>atomic_address</tt> by <tt>atomic&lt;void*&gt;</tt>.
</blockquote>

<note>
Resolved in Batavia by accepting 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3193.html">n3193</a>.
</note>

</discussion>

<resolution>
Solved by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3193.html">n3193</a>.
</resolution>

</issue>
