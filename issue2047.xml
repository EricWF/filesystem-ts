<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2047" status="Pending WP">
<title>Incorrect "mixed" move-assignment semantics of <tt>unique_ptr</tt></title>
<section><sref ref="[unique.ptr.single.asgn]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>16 Apr 2011</date>

<discussion>
<p>The semantics described in <sref ref="[unique.ptr.single.asgn]"/> p. 6</p>
<blockquote><p>
<i>Effects</i>: Transfers ownership from <tt>u</tt> to <tt>*this</tt> as if [&hellip;] followed 
by an assignment from <tt>std::forward&lt;D&gt;(u.get_deleter())</tt>.
</p></blockquote>
<p>
contradicts to the pre-conditions described in p. 4:
</p>
<blockquote><p>
<i>Requires</i>: If E is not a reference type, assignment of the deleter from an rvalue of type <tt>E</tt> shall be
well-formed and shall not throw an exception. Otherwise, <tt>E</tt> is a reference type and assignment of the
deleter from an lvalue of type <tt>E</tt> shall be well-formed and shall not throw an exception.
</p></blockquote>
<p>
Either the pre-conditions are incorrect or the semantics should be an assignment from
<tt>std::forward&lt;<span style="color:red;font-weight:bolder">E</span>&gt;(u.get_deleter())</tt>, instead.
</p>
<p>It turns out that this contradiction is due to an incorrect transcription from the proposed
resolution of <iref ref="983"/> to the finally accepted proposal 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3073.html">n3073</a> (see
bullet 12) as confirmed by Howard Hinnant, thus the type argument provided to <tt>std::forward</tt>
must be fixed as indicated.
</p>

<note>Bloomington, 2011</note>
<p>
Move to Ready
</p>

</discussion>

<resolution>

<p>This wording is relative to the FDIS.</p>

<ol>
<li><p>Edit <sref ref="[unique.ptr.single.asgn]"/> p. 6 as indicated:</p>

<blockquote><pre>
template &lt;class U, class E&gt; unique_ptr&amp; operator=(unique_ptr&lt;U, E&gt;&amp;&amp; u) noexcept;
</pre><blockquote><p>
4 - <i>Requires</i>: If <tt>E</tt> is not a reference type, assignment of the deleter from an rvalue 
of type <tt>E</tt> shall be well-formed and shall not throw an exception. Otherwise, <tt>E</tt> is a 
reference type and assignment of the deleter from an lvalue of type <tt>E</tt> shall be well-formed and 
shall not throw an exception.
<p/>
5 - <i>Remarks</i>: This operator shall not participate in overload resolution unless:</p>
<ul>
<li><tt>unique_ptr&lt;U, E&gt;::pointer</tt> is implicitly convertible to <tt>pointer</tt> and</li>
<li><tt>U</tt> is not an array type.</li>
</ul>
<p>
6 - <i>Effects</i>: Transfers ownership from <tt>u</tt> to <tt>*this</tt> as if by calling 
<tt>reset(u.release())</tt> followed by an assignment from <tt>std::forward&lt;<del>D</del><ins>E</ins>&gt;(u.get_deleter())</tt>.
<p/>
7 - <i>Returns</i>: <tt>*this</tt>.
</p>
</blockquote>
</blockquote>

</li>
</ol>

</resolution>

</issue>
