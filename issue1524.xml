<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1524" status="WP">
<title>[FCD] Allocation functions are missing <i>happens-before</i> requirements and guarantees</title>
<section><sref ref="[new.delete.dataraces]"/></section>
<submitter>Hans Boehm</submitter>
<date>26 Feb 2011</date>

<discussion>
<p><b>Addresses US-34</b></p>

<p>Technical details:
<p/>
When the same unit of storage is allocated and deallocated repeatedly, operations on it can't be allowed to
race between the allocator and the user program. But I don't see any mention of <i>happens-before</i> in the
descriptions of allocation and deallocation functions.
<p/>
Proposed resolution (not wording yet):
</p>
<ul>
<li><p>The call to an allocation function returning a pointer <tt>P</tt> must happen-before the matching
deallocation call with <tt>P</tt> as a parameter. Otherwise the behavior is undefined. I don't know whether
receiving <tt>P</tt> with <tt>memory_order_consume</tt> fits this requirement. <tt>memory_order_relaxed</tt> does not.</p>
</li>
<li><p>If some memory is passed to a deallocation function, the implementation must ensure that the
deallocation call happens-before any allocation call that returns the same memory address.</p>
</li>
</ul>

<note>2011-02-26: Hans comments and drafts wording</note>

<p>The second requirement already exists, almost verbatim, as <sref ref="[new.delete.dataraces]"/> p. 1. 
I think this is where the statement belongs.  However, this paragraph requires work to correctly address 
the first part of the issue.
</p>

<note>Adopted at Madrid, 2011-03</note>

</discussion>

<resolution>
<p>Change <sref ref="[new.delete.dataraces]"/> p. 1 as follows:</p>

<blockquote><p>
1 <del>The library versions of <tt>operator new</tt> and <tt>operator delete</tt>, user replacement versions of global 
<tt>operator new</tt> and <tt>operator delete</tt>, and the C standard library functions <tt>calloc</tt>, <tt>malloc</tt>, 
<tt>realloc</tt>, and <tt>free</tt> shall not introduce data races (<sref ref="[intro.multithread]"/>) as a result 
of concurrent calls from different threads.</del><ins> For purposes of determining the existence of data races,
the library versions of <tt>operator new</tt>, user replacement versions of global <tt>operator new</tt>, and the C 
standard library functions <tt>calloc</tt> and <tt>malloc</tt> shall behave as though they accessed and modified only 
the storage referenced by the return value. The library versions of <tt>operator delete</tt>, user replacement
versions of <tt>operator delete</tt>, and the C standard library function <tt>free</tt> shall behave as though they 
accessed and modified only the storage referenced by their first argument. The C standard library <tt>realloc</tt> 
function shall behave as though it accessed and modified only the storage referenced by its first argument and by 
its return value.</ins> Calls to these functions that allocate or deallocate a particular unit of storage 
shall occur in a single total order, and each such deallocation call shall happen before the next allocation 
(if any) in this order.
</p></blockquote>
</resolution>

</issue>
