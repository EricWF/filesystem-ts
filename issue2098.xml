<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2098" status="Voting">
<title>Minor Inconsistency between <tt>promise::set_value</tt> and <tt>promise::set_value_at_thread_exit</tt></title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Pete Becker</submitter>
<date>14 Nov 2011</date>

<discussion>

<p>
<sref ref="[futures.promise]"/>&#47;16 says that <tt>promise::set_value(const R&amp;)</tt> throws any exceptions 
thrown by <tt>R</tt>'s copy constructor, and that <tt>promise_set_value(R&amp;&amp;)</tt> throws any exceptions 
thrown by <tt>R</tt>'s move constructor.
<p/>
<sref ref="[futures.promise]"/>&#47;22 is the Throws: clause for <tt>promise::set_value_at_thread_exit</tt>. It 
has no corresponding requirements, only that these functions throw "<tt>future_error</tt> if an error condition 
occurs."
<p/>
Daniel suggests wording to fix this: The approach is a bit more ambitious and also attempts to fix wording glitches
of <sref ref="[futures.promise]"/>&#47;16, because it would be beyond acceptable efforts of implementations to 
determine whether a constructor call of a user-defined type will indeed call a copy constructor or move constructor 
(in the first case it might be a template constructor, in the second case it might also be a copy-constructor, 
if the type has no move constructor).
</p>

<note>2012, Portland: move to Review</note>
<p>
Moved to Review by the concurrency working group, with no further comments.
</p>

<note>2013-04-20, Bristol</note>
<p>Accepted for the working paper</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<ol>
<li><p>Change <sref ref="[futures.promise]"/>&#47;16 as indicated:</p>
<blockquote><pre>
void promise::set_value(const R&amp; r);
void promise::set_value(R&amp;&amp; r);
void promise&lt;R&amp;&gt;::set_value(R&amp; r);
void promise&lt;void&gt;::set_value();
</pre><blockquote><p>
[&hellip;]
<p/>
-16- <i>Throws</i>:
</p>
<ul>
<li><tt>future_error</tt> if its shared state already has a stored value or exception, or</li>
<li>for the first version, any exception thrown by the <del>copy constructor 
of</del><ins>constructor selected to copy an object of</ins> <tt>R</tt>, or</li>
<li>for the second version, any exception thrown by the <del>move constructor 
of</del><ins>constructor selected to move an object of</ins> <tt>R</tt>.</li>
</ul>
</blockquote></blockquote>
</li>

<li><p>Change <sref ref="[futures.promise]"/>&#47;22 as indicated:</p>
<blockquote><pre>
void promise::set_value_at_thread_exit(const R&amp; r);
void promise::set_value_at_thread_exit(R&amp;&amp; r);
void promise&lt;R&amp;&gt;::set_value_at_thread_exit(R&amp; r);
void promise&lt;void&gt;::set_value_at_thread_exit();
</pre><blockquote><p>
[&hellip;]
<p/>
-16- <i>Throws</i>: <del><tt>future_error</tt> if an error condition occurs.</del>
</p>
<ul>
<li><ins><tt>future_error</tt> if its shared state already has a stored value or exception, or</ins></li>
<li><ins>for the first version, any exception thrown by the constructor selected to copy an object of <tt>R</tt>, or</ins></li>
<li><ins>for the second version, any exception thrown by the constructor selected to move an object of <tt>R</tt>.</ins></li>
</ul>
</blockquote></blockquote>
</li>
</ol>

</resolution>

</issue>
