<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2029" status="C++11">
<title>Missing '<tt>noexcept</tt>' on <tt>basic_regex</tt> move-assignment operator</title>
<section><sref ref="[re.regex]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>16 Feb 2011</date>

<discussion>
<p>
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3149.html">N3149</a> replaced 
the "<tt>Throws: nothing</tt>" clause on <tt>basic_regex::assign(basic_regex&amp;&amp;)</tt> with 
the <tt>noexcept</tt> keyword. The effects of the move-assignment operator are defined in terms of 
the <tt>assign()</tt> function, so the "<tt>Throws: nothing</tt>" applied there too, and a
<tt>noexcept</tt>-specification should be added there too.
</p>

<note>2011-02-24 Reflector discussion</note>
<p>
Moved to Tentatively Ready after 7 votes.
</p> 
</discussion>

<resolution>

<ol>
<li>
<p>Modify the <tt>basic_regex</tt> synopsis in <sref ref="[re.regex]"/> p. 3:</p>

<blockquote><pre>
namespace std {
  template &lt;class charT,
            class traits = regex_traits&lt;charT&gt; &gt;
  class basic_regex {
  public:
    ...
    basic_regex&amp; operator=(const basic_regex&amp;);
    basic_regex&amp; operator=(basic_regex&amp;&amp;) <ins>noexcept</ins>;
    basic_regex&amp; operator=(const charT* ptr);
    ...
  };
}
</pre></blockquote>

</li>

<li>
<p>Modify <sref ref="[re.regex.assign]"/> p. 2:</p>

<blockquote><pre>
basic_regex&amp; operator=(basic_regex&amp;&amp; e) <ins>noexcept</ins>;
</pre>
<blockquote><p>
2 <em>Effects</em>: returns <tt>assign(std::move(e))</tt>.
</p></blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
