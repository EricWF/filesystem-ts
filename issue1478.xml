<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1478" status="Open">
<title>[FCD] Clarify race conditions in atomics initialization</title>
<section><sref ref="[atomics.types.operations]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-136</b></p>
<p>
GB requests normative clarification in <sref ref="[atomics.types.operations]"/> p.4 that
concurrent access constitutes a race, as already done on p.6 and p.7.
</p>
<note>
Resolution proposed in ballot comment:
</note>

<blockquote><p>
Initialisation of atomics:
<p/>
We believe the intent is that for any atomics there is a distinguished
initialisation write, but that this need not happens-before all the
other operations on that atomic - specifically so that the
initialisation write might be non-atomic and hence give rise to a data
race, and hence undefined behaviour, in examples such as this (from
Hans):
</p>
<blockquote><pre>
atomic&lt;atomic&lt;int&gt; *&gt; p
f()                      |
{ atomic&lt;int&gt;x;          | W_na x
  p.store(&amp;x,mo_rlx);    | W_rlx p=&amp;x
}                        |
</pre></blockquote><p>
(where na is nonatomic and rlx is relaxed). We suspect also that no
other mixed atomic/nonatomic access to the same location is intended
to be permitted. Either way, a note would probably help.
</p></blockquote>

<note>2011-02-26: Hans comments and drafts wording</note>

<p>I think the important point here is to clarify that races on atomics
are possible, and can be introduced as a result of non-atomic
initialization operations.  There are other parts of this that remain unclear
to me, such as whether there are other ways to introduce data races on atomics,
or whether the races with initialization also introduce undefined behavior
by the 3.8 lifetime rules.  But I don't think that it is necessary to resolve
those issues before releasing the standard.  That's particularly true
since we've introduced <tt>atomic_init</tt>, which allows easier ways to
construct initialization races.
</p>
</discussion>

<resolution>
<ol>
<li><p>Update <sref ref="[atomics.types.operations.req]"/> p. 5 as follows:</p>

<blockquote><pre>
constexpr A::A(C desired);
</pre><blockquote><p>
5 <i>Effects</i>: Initializes the object with the value <tt>desired</tt>. <del>[ <i>Note</i>: 
Construction is not atomic. &mdash; <i>end note</i> ]</del><ins> Initialization is not an 
atomic operation (1.10) [intro.multithread]. [<i>Note</i>: It is possible to have an
access to an atomic object <tt>A</tt> race with its construction, for example
by communicating the address of the just-constructed object <tt>A</tt> to another thread 
via <code>memory_order_relaxed</code> atomic operations on a suitable atomic pointer variable, 
and then immediately accessing <tt>A</tt> in the receiving thread.  This results in undefined 
behavior. &mdash; <i>end note</i>]</ins>
</p></blockquote></blockquote>
</li>

<li><p>In response to the editor comment to <sref ref="[atomics.types.operations.req]"/> p. 8: 
The first <i>Effects</i> element is the correct and intended one:</p>

<blockquote><pre>
void atomic_init(volatile A *object, C desired);
void atomic_init(A *object, C desired);
</pre><blockquote><p>
8 <i>Effects</i>: Non-atomically initializes <tt>*object</tt> with value <tt>desired</tt>.
This function shall only be applied to objects that have been default constructed, and then only once.
[ <i>Note</i>: these semantics ensure compatibility with C. &mdash; <i>end note</i> ] [ <i>Note</i>: 
Concurrent access from another thread, even via an atomic operation, constitutes a data 
race. &mdash; <i>end note</i> ] <del>[<i>Editor's note</i>: The preceding text is from the WD as 
amended by N3196. N3193 makes different changes, marked up in the paper as follows:]
<i>Effects</i>: Dynamically initializes an atomic variable. Non-atomically That is, non-atomically assigns the
value desired to <tt>*object</tt>. [ <i>Note</i>: this operation may need to initialize 
locks. &mdash; <i>end note</i> ] Concurrent access from another thread, even via an atomic 
operation, constitutes a data race.</del>
</p></blockquote></blockquote>
</li>
</ol>
</resolution>

</issue>
