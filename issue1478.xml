<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1478" status="Open">
<title>[FCD] Clarify race conditions in atomics initialization</title>
<section><sref ref="[atomics.types.operations]"/></section>
<submitter>BSI</submitter>
<date>25 Aug 2010</date>

<discussion>
<p><b>Addresses GB-136</b></p>

GB requests normative clarification in <sref ref="[atomics.types.operations]"/> p.4 that
concurrent access constitutes a race, as already done on p.6 and p.7.

<note>
2010-10-28 Daniel adds:
</note>

<p>The following text from n3141 provides details of the NB comment:
</p>

<blockquote>
Initialisation of atomics:
<p/>
We believe the intent is that for any atomics there is a distinguished
initialisation write, but that this need not happens-before all the
other operations on that atomic - specifically so that the
initialisation write might be non-atomic and hence give rise to a data
race, and hence undefined behaviour, in examples such as this (from
Hans):
<blockquote><pre>
atomic&lt;atomic&lt;int&gt; *&gt; p
f()                      |
{ atomic&lt;int&gt;x;          | W_na x
  p.store(&ampx,mo_rlx); | W_rlx p=&amp;x
}                        |
</pre></blockquote>
(where na is nonatomic and rlx is relaxed). We suspect also that no
other mixed atomic/nonatomic access to the same location is intended
to be permitted. Either way, a note would probably help.
</blockquote>
</discussion>

<resolution>
</resolution>

</issue>
