<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="980" status="NAD">
<title><tt>mutex lock()</tt> missing error conditions</title>
<section><sref ref="[thread.mutex.requirements]"/></section>
<submitter>Ion Gazta&ntilde;aga</submitter>
<date>7 Feb 2009</date>

<discussion>
<p>
POSIX 2008 adds two return values for <tt>pthread_mutex_xxxlock()</tt>:
<tt>EOWNERDEAD</tt> (<tt>owner_dead</tt>) and <tt>ENOTRECOVERABLE</tt>
(<tt>state_not_recoverable</tt>). In the first case the mutex is locked,
in the second case the mutex is not locked.
</p>

<p>
Throwing an exception in the first case can be incompatible with the use
of Locks, since the <tt>Lock::owns_lock()</tt> will be <tt>false</tt> when the lock is
being destroyed.
</p>

<p>
Consider:
</p>

<blockquote><pre>
//Suppose mutex.lock() throws "owner_dead"
unique_lock ul(&amp;mutex);
//mutex left locked if "owner_dead" is thrown
</pre></blockquote>

<p>
Throwing an exception with <tt>owner_dead</tt> might be also undesirable if
robust-mutex support is added to C++ and the user has the equivalent of
<tt>pthread_mutex_consistent()</tt> to notify the user has fixed the corrupted
data and the mutex state should be marked consistent.
</p>

<ol>
<li>
For <tt>state_not_recoverable</tt> add it to the list of Error conditions:
</li>
<li>
For <tt>owner_dead</tt>, no proposed resolution.
</li>
</ol>

<note>
Summit:
</note>

<blockquote>
Not a defect. Handling these error conditions is an implementation
detail and must be handled below the C++ interface.
</blockquote>

</discussion>

<resolution>

<p>
Add to <sref ref="[thread.mutex.requirements]"/>, p12:
</p>

<blockquote>
<p>
-12- <i>Error conditions:</i>
</p>

<ul>
<li>
<tt>operation_not_permitted</tt> -- if the thread does not have the necessary permission to change 
the state of the mutex.
</li>
<li>
<tt>resource_deadlock_would_occur</tt> -- if the current thread already owns the mutex and is able 
to detect it.
</li>
<li>
<tt>device_or_resource_busy</tt> --  if the mutex is already locked and blocking is not possible.
</li>
<li>
<ins><tt>state_not_recoverable</tt> -- if the state protected by the mutex is not recoverable.</ins>
</li>
</ul>
</blockquote>
</resolution>

</issue>
