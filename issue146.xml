<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="146" status="TC1">
<title>complex&lt;T&gt; Inserter and Extractor need sentries</title>
<section><sref ref="[complex.ops]"/></section>
<submitter>Angelika Langer</submitter>
<date>12 May 1999</date>

<discussion>
<p>The extractor for complex numbers is specified as:&nbsp;</p>

<blockquote>

<p>     template&lt;class T, class charT, class traits&gt;&nbsp;<br/>
     basic_istream&lt;charT, traits&gt;&amp;&nbsp;<br/>
     operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp;  is, complex&lt;T&gt;&amp;  x);<br/>
&nbsp;<br/>
Effects: Extracts a complex number x of the form: u, (u), or (u,v),
where u is the real part and v is the imaginary part
(lib.istream.formatted).&nbsp;<br/>
Requires: The input values be convertible to T. If bad input is
encountered, calls is.setstate(ios::failbit) (which may throw
ios::failure (lib.iostate.flags).&nbsp;<br/>
Returns: is .</p>

</blockquote>
<p>Is it intended that the extractor for complex numbers does not skip
whitespace, unlike all other extractors in the standard library do?
Shouldn't a sentry be used?&nbsp;<br/>
<br/>
The inserter for complex numbers is specified as:</p>

<blockquote>

<p>     template&lt;class T, class charT, class traits&gt;&nbsp;<br/>
     basic_ostream&lt;charT, traits&gt;&amp;&nbsp;<br/>
     operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp;  o, const complex&lt;T&gt;&amp;  x);<br/>
<br/>
Effects: inserts the complex number x onto the stream o as if it were implemented as follows:<br/>
<br/>
     template&lt;class T, class charT, class traits&gt;&nbsp;<br/>
     basic_ostream&lt;charT, traits&gt;&amp;&nbsp;<br/>
     operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; o, const complex&lt;T&gt;&amp; x)&nbsp;<br/>
     {&nbsp;<br/>
             basic_ostringstream&lt;charT, traits&gt; s;&nbsp;<br/>
             s.flags(o.flags());&nbsp;<br/>
             s.imbue(o.getloc());&nbsp;<br/>
             s.precision(o.precision());&nbsp;<br/>
             s &lt;&lt; '(' &lt;&lt; x.real() &lt;&lt; "," &lt;&lt; x.imag() &lt;&lt; ')';&nbsp;<br/>
             return o &lt;&lt; s.str();&nbsp;<br/>
     }</p>

</blockquote>

<p>Is it intended that the inserter for complex numbers ignores the
field width and does not do any padding? If, with the suggested
implementation above, the field width were set in the stream then the
opening parentheses would be adjusted, but the rest not, because the
field width is reset to zero after each insertion.</p>

<p>I think that both operations should use sentries, for sake of
consistency with the other inserters and extractors in the
library. Regarding the issue of padding in the inserter, I don't know
what the intent was.&nbsp;</p>
</discussion>

<resolution>
<p>After <sref ref="[complex.ops]"/> paragraph 14 (operator&gt;&gt;), add a
Notes clause:</p>

<blockquote>

<p>Notes: This extraction is performed as a series of simpler
extractions. Therefore, the skipping of whitespace is specified to be the
same for each of the simpler extractions.</p>

</blockquote>
</resolution>

<rationale>
<p>For extractors, the note is added to make it clear that skipping whitespace
follows an &quot;all-or-none&quot; rule.</p>

<p>For inserters, the LWG believes there is no defect; the standard is correct
as written.</p>
</rationale>
</issue>
