<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="827" status="NAD Editorial">
<title><tt>constexpr shared_ptr::shared_ptr()?</tt></title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Peter Dimov</submitter>
<date>11 Apr 2008</date>

<discussion>
<p>
Would anyone object to making the default constructor of <tt>shared_ptr</tt> (and
<tt>weak_ptr</tt> and <tt>enable_shared_from_this) constexpr</tt>? This would enable
static initialization for <tt>shared_ptr</tt> variables, eliminating another
unfair advantage of raw pointers.
</p>

<note>
San Francisco:
</note>

<blockquote>
<p>
It's not clear to us that you can initialize a pointer with the literal
0 in a constant expression. We need to ask CWG to make sure this works.
Bjarne has been appointed to do this.
</p>
<p>
Core got back to us and assured as that <tt>nullptr</tt> would do the job
nicely here.
</p>
</blockquote>

<note>
2009-05-01 Alisdair adds:
</note>

<blockquote>
<p>
I don't believe that constexpr will buy anything in this case.
<tt>shared_ptr/weak_ptr/enable_shared_from_this</tt> cannot be literal types as they
have a non-trivial copy constructor.  As they do not produce literal types,
then the constexpr default constructor will <em>not</em> guarantee constant
initialization, and so not buy the hoped for optimization.
</p>
<p>
I recommend referring this back to Core to see if we can get static
initialization for types with constexpr constructors, even if they are not
literal types.  Otherwise this should be closed as NAD.
</p>
</blockquote>

<note>
2009-05-26 Daniel adds:
</note>

<blockquote>
If Alisdair's 2009-05-01 comment is correct, wouldn't that also make
<tt>constexpr mutex()</tt> useless, because this class has a non-trivial
destructor? (<iref ref="828"/>)
</blockquote>

<note>
2009-07-21 Alisdair adds:
</note>

<blockquote>
<p>
The feedback from core is that this and similar uses of constexpr
constructors to force static initialization should be supported.  If
there are any problems with this in the working draught, we should file
core issues.
</p>

<p>
Recommend we declare the default constructor constexpr as the issue suggests
(proposed wording added).
</p>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote>
NAD Editorial.  Solved by
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2994.html">N2994</a>.
</blockquote>
</discussion>

<resolution>
<p>
Change <sref ref="[util.smartptr.shared]"/> and <sref ref="[util.smartptr.shared.const]"/>:
</p>

<blockquote><pre>
<ins>consexpr</ins> shared_ptr();
</pre></blockquote>

<p>
Change <sref ref="[util.smartptr.weak]"/> and <sref ref="[util.smartptr.weak.const]"/>:
</p>

<blockquote><pre>
<ins>consexpr</ins> weak_ptr();
</pre></blockquote>

<p>
Change <sref ref="[util.smartptr.enab]"/> (2 places):
</p>

<blockquote><pre>
<ins>consexpr</ins> enable_shared_from_this();
</pre></blockquote>

</resolution>

</issue>
