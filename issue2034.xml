<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2034" status="Resolved">
<title>Initialization of atomics is misspecified so that it doesn't preserve sequential consistency</title>
<section><sref ref="[atomics.order]"/></section>
<submitter>Hans Boehm</submitter>
<date>26 Feb 2011</date>

<discussion>
<p>
This violates the core intent of the memory model, as stated in the note in <sref ref="[intro.multithread]"/> p. 21.
</p>

<p>
This was discovered by Mark Batty, and pointed out in their POPL 2011 paper, "Mathematizing C++ Concurrency",
section 4, "Sequential consistency of SC atomics".  The problem is quite technical, but well-explained in that paper.
</p>

<p>
This particular issue was not understood at the time the FCD comments were generated. But it is closely related 
to a number of FCD comments. It should have arisen from 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3224.html#US171">US-171</a>, though that's not 
the actual history.
</p>

<p>This issue has been under discussion for several months in a group that included a half dozen or so of the 
most interested committee members. The P/R represents a well-considered consensus among us:</p>

<note>2011-03-16: Jens updates wording</note>

<blockquote class="note">
<p>Modify <sref ref="[atomics.order]"/> p.3, so that the normative part reads:</p>

<blockquote><p>
3 There shall be a single total order <i>S</i> on all <tt>memory_order_seq_cst</tt> operations, consistent 
with the &quot;happens before&quot; order and modification orders for all affected locations, such that each 
<tt>memory_order_seq_cst</tt> operation that loads a value observes either the last 
preceding modification according to this order <i>S</i><ins>, <i>A</i> (if any)</ins>, or the result of an operation 
<ins><i>X</i></ins> that <del>is not</del><ins>does not happen before <i>A</i> and that is not</ins> <tt>memory_order_seq_cst</tt>. 
[ <i>Note</i>: Although it is not explicitly required that <i>S</i> include locks, it can always be extended 
to an order that does include lock and unlock operations, since the ordering between those is already included 
in the &quot;happens before&quot; ordering. &mdash; <i>end note</i> ]
</p></blockquote>

</blockquote>
</discussion>

<resolution><p>
Resolved 2011-03 Madrid meeting by paper <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3278">N3278</a>
</p></resolution>

</issue>
