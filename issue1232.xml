<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1232" status="NAD Editorial">
<title>Still <tt>swap</tt>'s with rvalue-references</title>
<section><sref ref="[library]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>11 Oct 2009</date>

<discussion>
<p>
The current library contains still rvalue reference-swaps that seem to be
overlooked in the process of switching back to lvalue-ref swaps.
</p>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Editor accepts as NAD Editorial.
</p></blockquote>

</discussion>

<resolution>
<ol>
<li>
<p>
Change <sref ref="[pairs]"/>/1 as indicated:
</p>

<blockquote><pre>
template &lt;class T1, class T2&gt;
struct pair {
  ...
  void swap(pair&amp;<del>&amp;</del> p);
};
</pre></blockquote>
</li>

<li>
<p>
Change <sref ref="[pairs]"/> before p. 17 as indicated:
</p>

<blockquote><pre>
void swap(pair&amp;<del>&amp;</del> p);
</pre></blockquote>

</li>

<li>

<p>
Change <sref ref="[pairs]"/> before p. 21 as indicated:
</p>

<blockquote><pre>
template&lt;class T1, class T2&gt; void swap(pair&lt;T1, T2&gt;&amp; x, pair&lt;T1, T2&gt;&amp; y);
<del>template&lt;class T1, class T2&gt; void swap(pair&lt;T1, T2&gt;&amp;&amp; x, pair&lt;T1, T2&gt;&amp; y);</del>
<del>template&lt;class T1, class T2&gt; void swap(pair&lt;T1, T2&gt;&amp; x, pair&lt;T1, T2&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[tuple.general]"/>/2, header <tt>&lt;tuple&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
// 20.5.2.9, specialized algorithms:
template &lt;class... Types&gt;
void swap(tuple&lt;Types...&gt;&amp; x, tuple&lt;Types...&gt;&amp; y);
<del>template &lt;class... Types&gt;
void swap(tuple&lt;Types...&gt;&amp;&amp; x, tuple&lt;Types...&gt;&amp; y);
template &lt;class... Types&gt;
void swap(tuple&lt;Types...&gt;&amp; x, tuple&lt;Types...&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[tuple.tuple]"/> as indicated:
</p>

<blockquote><pre>
// 20.5.2.3, tuple swap
void swap(tuple&amp;<del>&amp;</del>)
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[tuple.swap]"/> before 1 as indicated:
</p>

<blockquote><pre>
void swap(tuple&amp;<del>&amp;</del> rhs);
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[function.objects]"/>/2, header <tt>&lt;functional&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;, function&lt;R(ArgTypes...)&gt;&amp;);
<del>template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;&amp;, function&lt;R(ArgTypes...)&gt;&amp;);
template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;, function&lt;R(ArgTypes...)&amp;&amp;);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[func.wrap.func]"/>, as indicated:
</p>

<blockquote><pre>
// 20.7.15.2.2, function modifiers:
void swap(function&amp;<del>&amp;</del>);
template&lt;class F, class A&gt; void assign(F, const A&amp;);

[..]

// 20.7.15.2.7, specialized algorithms:
template &lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;, function&lt;R(ArgTypes...)&gt;&amp;);
<del>template &lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;&amp;, function&lt;R(ArgTypes...)&gt;&amp;);
template &lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;, function&lt;R(ArgTypes...)&gt;&amp;&amp;);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[func.wrap.func.alg]"/> before 1 as indicated:
</p>

<blockquote><pre>
template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp; f1, function&lt;R(ArgTypes...)&gt;&amp; f2);
<del>template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp;&amp; f1, function&lt;R(ArgTypes...)&gt;&amp; f2);
template&lt;class R, class... ArgTypes&gt;
void swap(function&lt;R(ArgTypes...)&gt;&amp; f1, function&lt;R(ArgTypes...)&gt;&amp;&amp; f2);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[util.smartptr.shared]"/>/1 as indicated:
</p>

<blockquote><pre>
// 20.8.12.2.4, modifiers:
void swap(shared_ptr&amp;<del>&amp;</del> r);

[..]

// 20.8.12.2.9, shared_ptr specialized algorithms:
template&lt;class T&gt; void swap(shared_ptr&lt;T&gt;&amp; a, shared_ptr&lt;T&gt;&amp; b);
<del>template&lt;class T&gt; void swap(shared_ptr&lt;T&gt;&amp;&amp; a, shared_ptr&lt;T&gt;&amp; b);
template&lt;class T&gt; void swap(shared_ptr&lt;T&gt;&amp; a, shared_ptr&lt;T&gt;&amp;&amp; b);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[string.classes]"/>/1, header <tt>&lt;string&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
// 21.4.8.8: swap
template&lt;class charT, class traits, class Allocator&gt;
void swap(basic_string&lt;charT,traits,Allocator&gt;&amp; lhs, basic_string&lt;charT,traits,Allocator&gt;&amp; rhs);
<del>template&lt;class charT, class traits, class Allocator&gt;
void swap(basic_string&lt;charT,traits,Allocator&gt;&amp;&amp; lhs, basic_string&lt;charT,traits,Allocator&gt;&amp; rhs);
template&lt;class charT, class traits, class Allocator&gt;
void swap(basic_string&lt;charT,traits,Allocator&gt;&amp; lhs, basic_string&lt;charT,traits,Allocator&gt;&amp;&amp; rhs);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[sequences]"/>/1, header <tt>&lt;deque&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[sequences]"/>/1, header <tt>&lt;list&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp;&amp; x, list&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[sequences]"/>/1, header <tt>&lt;queue&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp; y);
<del>template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp;&amp; x, queue&lt;T, Container&gt;&amp; y);
template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp;&amp; y);</del>

template &lt;class T, class Container = vector&lt;T&gt;, class Compare = less&lt;typename Container::value_type&gt; &gt;
class priority_queue;
template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
<del>template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[sequences]"/>/1, header <tt>&lt;stack&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp; x, stack&lt;T, Container&gt;&amp; y);
<del>template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp;&amp; x, stack&lt;T, Container&gt;&amp; y);
template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp; x, stack&lt;T, Container&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[sequences]"/>/1, header <tt>&lt;vector&gt;</tt> synopsis, as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[deque]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator position);
iterator erase(const_iterator first, const_iterator last);
void swap(deque&lt;T,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[deque.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp;&amp; x, deque&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(deque&lt;T,Allocator&gt;&amp; x, deque&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[forwardlist]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase_after(const_iterator position);
iterator erase_after(const_iterator position, iterator last);
void swap(forward_list&lt;T,Allocator&gt;&amp;<del>&amp;</del>);

[..]

// 23.3.3.6 specialized algorithms:
template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp; x, forward_list&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp;&amp; x, forward_list&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp; x, forward_list&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[forwardlist.spec]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp; x, forward_list&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp;&amp; x, forward_list&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(forward_list&lt;T,Allocator&gt;&amp; x, forward_list&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[list]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator position);
iterator erase(const_iterator position, const_iterator last);
void swap(list&lt;T,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp;&amp; x, list&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[list.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp;&amp; x, list&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(list&lt;T,Allocator&gt;&amp; x, list&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[queue.defn]"/> as indicated:
</p>

<blockquote><pre>
void swap(queue&amp;<del>&amp;</del> q) { c.swap(q.c); }

[..]

template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp; y);
<del>template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp;&amp; x, queue&lt;T, Container&gt;&amp; y);
template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[queue.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp; y);
<del>template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp;&amp; x, queue&lt;T, Container&gt;&amp; y);
template &lt;class T, class Container&gt;
void swap(queue&lt;T, Container&gt;&amp; x, queue&lt;T, Container&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[priority.queue]"/>/1 as indicated:
</p>

<blockquote><pre>
void swap(priority_queue&amp;<del>&amp;</del>);

// no equality is provided
template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
<del>template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
template &lt;class T, class Container, class Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[priqueue.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Container, Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
<del>template &lt;class T, class Container, Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp; y);
template &lt;class T, class Container, Compare&gt;
void swap(priority_queue&lt;T, Container, Compare&gt;&amp; x, priority_queue&lt;T, Container, Compare&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[stack.defn]"/> as indicated:
</p>

<blockquote><pre>
void swap(stack&amp;<del>&amp;</del> s) { c.swap(s.c); }

[..]

template &lt;class T, class Allocator&gt;
void swap(stack&lt;T,Allocator&gt;&amp; x, stack&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(stack&lt;T,Allocator&gt;&amp;&amp; x, stack&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(stack&lt;T,Allocator&gt;&amp; x, stack&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>


</li>

<li>
<p>
Change <sref ref="[stack.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp; x, stack&lt;T, Container&gt;&amp; y);
<del>template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp;&amp; x, stack&lt;T, Container&gt;&amp; y);
template &lt;class T, class Container&gt;
void swap(stack&lt;T, Container&gt;&amp; x, stack&lt;T, Container&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[vector]"/>/2 as indicated:
</p>

<blockquote><pre>
void swap(vector&lt;T,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[vector.capacity]"/> before p. 8 as indicated:
</p>

<blockquote><pre>
void swap(vector&lt;T,Allocator&gt;&amp;<del>&amp;</del> x);
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[vector.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
<del>template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp;&amp; x, vector&lt;T,Allocator&gt;&amp; y);
template &lt;class T, class Allocator&gt;
void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[vector.bool]"/>/1 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator first, const_iterator last);
void swap(vector&lt;bool,Allocator&gt;&amp;<del>&amp;</del>);
static void swap(reference x, reference y);
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[associative]"/>/1, header <tt>&lt;map&gt;</tt> synopsis as indicated:
</p>

<blockquote><pre>
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&amp;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>

[..]

template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&amp;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[associative]"/>/1, header <tt>&lt;set&gt;</tt> synopsis as indicated:
</p>

<blockquote><pre>
template &lt;class Key, class Compare, class Allocator&gt;
void swap(set&lt;Key,Compare,Allocator&gt;&amp; x, set&lt;Key,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(set&lt;Key,T,Compare,Allocator&amp;&amp; x, set&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(set&lt;Key,T,Compare,Allocator&amp; x, set&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>

[..]

template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,T,Compare,Allocator&amp;&amp; x, multiset&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,T,Compare,Allocator&amp; x, multiset&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[map]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator first, const_iterator last);
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&amp;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[map.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(map&lt;Key,T,Compare,Allocator&gt;&amp; x, map&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[multimap]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator first, const_iterator last);
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&amp;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[multimap.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class T, class Compare, class Allocator&gt;
void swap(multimap&lt;Key,T,Compare,Allocator&gt;&amp; x, multimap&lt;Key,T,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[set]"/>/2 and <sref ref="[set.special]"/> as indicated: (twice!)
</p>

<blockquote><pre>
// specialized algorithms:
template &lt;class Key, class Compare, class Allocator&gt;
void swap(set&lt;Key,Compare,Allocator&gt;&amp; x, set&lt;Key,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class Compare, class Allocator&gt;
void swap(set&lt;Key,Compare,Allocator&amp;&amp; x, set&lt;Key,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class Compare, class Allocator&gt;
void swap(set&lt;Key,Compare,Allocator&amp; x, set&lt;Key,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[multiset]"/>/2 as indicated:
</p>

<blockquote><pre>
iterator erase(const_iterator first, const_iterator last);
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp;<del>&amp;</del>);
void clear();

[..]

// specialized algorithms:
template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&amp;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>

<li>
<p>
Change <sref ref="[multiset.special]"/> as indicated:
</p>

<blockquote><pre>
template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp; y);
<del>template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp; y);
template &lt;class Key, class Compare, class Allocator&gt;
void swap(multiset&lt;Key,Compare,Allocator&gt;&amp; x, multiset&lt;Key,Compare,Allocator&gt;&amp;&amp; y);</del>
</pre></blockquote>

</li>
</ol>
</resolution>

</issue>
