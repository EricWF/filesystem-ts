<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="512" status="NAD Editorial">
<title>Seeding subtract_with_carry_01 from a single unsigned long</title>
<section><sref ref="[rand.eng]"/><sref ref="[tr.rand.eng.sub1]"/></section>
<submitter>Walter Brown</submitter>
<date>3 Jul 2005</date>

<discussion>
<p>
Paragraph 8 specifies the algorithm by which a subtract_with_carry_01  engine
is to be seeded given a single unsigned long.  This algorithm is seriously
flawed in the case where the engine parameter w (also known as word_size)
exceeds 31 [bits].  The key part of the paragraph reads:
</p>
<blockquote><p>
sets x(-r) ... x(-1) to (lcg(1)*2**(-w)) mod 1
</p></blockquote>
<p>
and so forth. 
</p>
<p>
Since the specified linear congruential engine, lcg, delivers numbers with
a maximum of 2147483563 (just a shade under 31 bits), then when w is, for
example, 48, each of the x(i) will be less than 2**-17.  The consequence
is that roughly the first 400 numbers delivered will be  conspicuously
close to either zero or one.
</p>
<p>
Unfortunately, this is not an innocuous flaw:  One of the predefined engines
in [tr.rand.predef],  namely ranlux64_base_01, has w = 48 and would exhibit
this poor behavior, while the original N1378 proposal states that these
pre-defined engines are intended to be of "known good properties."
</p>
</discussion>

<resolution>
<p>
In 5.1.4.4 [tr.rand.eng.sub1], replace the "effects" clause for
void seed(unsigned long value = 19780503) by
</p>

<blockquote><p>
<i>Effects:</i> If <tt>value == 0</tt>, sets value to <tt>19780503</tt>. In any
case, <del>with a linear congruential generator <tt>lcg</tt>(i) having parameters
<tt><i>m<sub>lcg</sub></i> = 2147483563</tt>, <tt><i>a<sub>lcg</sub></i> = 40014</tt>,
<tt><i>c<sub>lcg</sub></i> = 0</tt>, and <tt><i>lcg</i>(0) = value</tt>,</del>
sets <ins>carry<tt>(-1)</tt> and</ins> <tt>x(-r) &#x2026; x(-1)</tt>
<ins>as if executing</ins></p>

<blockquote><pre><ins>
linear_congruential&lt;unsigned long, 40014, 0, 2147483563&gt; lcg(value);
seed(lcg);
</ins></pre></blockquote>

<p>
<del>to <tt>(<i>lcg</i>(1) &#183; 2<sup>-<i>w</i></sup>) mod 1
&#x2026; (<i>lcg</i>(<i>r</i>) &#183; 2<sup>-<i>w</i></sup>) mod 1</tt>,
respectively. If <tt><i>x</i>(-1) == 0</tt>, sets carry<tt>(-1) = 2<sup>-<i>w</i></sup></tt>,
else sets carry<tt>(-1) = 0</tt>.</del></p>
</blockquote>

<note>
Jens provided revised wording post Mont Tremblant.
</note>

<note>
Berlin: N1932 adopts the originally-proposed resolution of the issue.
Jens's supplied wording is a clearer description of what is
intended.  Moved to Ready.
</note>

</resolution>

<rationale>
<p>
Jens: I'm using an explicit type here, because fixing the
prose would probably not qualify for the (with issue <iref ref="504"/> even
stricter) requirements we have for seed(Gen&amp;).
</p>

<note>
Portland:  Subsumed by N2111.
</note>
</rationale>

</issue>
