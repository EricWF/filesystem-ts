<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1259" status="NAD">
<title>Should initializer-list constructors move elements?</title>
<section><sref ref="[sequence.reqmts]"/></section>
<submitter>Sean Hunt</submitter>
<date>5 Nov 2009</date>

<discussion>
<p>
According to <sref ref="[sequence.reqmts]"/>, <tt>X(il)</tt> is
equivalent to <tt>X(il.begin(), il.end())</tt>. Should it instead be
equivalent to <tt>X(move_iterator(il.begin()),
move_iterator(il.end()))</tt> so that needless copies are not made? This
doesn't seem ideal either - it may make more sense to provide two
overloads for the constructor, one for move and one for copy.
</p>

<note>
2009-11-10 Howard adds:
</note>

<blockquote><p>
I've moved this issue to Tentatively NAD after 5 positive votes on c++std-lib,
and added a rationale below.
</p></blockquote>
</discussion>

<resolution>
<p>
</p>
</resolution>

<rationale>
<p>
There is no consensus at this time within EWG or CWG to make the
required language changes.  Therefore this is not something that the LWG
can even consider.  Should such language changes be made for a future
standard, no doubt there would need to be an accompanying library impact
survey.
</p>
</rationale>

</issue>
